{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/d3-geo/src/adder.js","webpack:///./node_modules/d3-geo/src/math.js","webpack:///./node_modules/d3-geo/src/noop.js","webpack:///./node_modules/d3-geo/src/stream.js","webpack:///./node_modules/d3-geo/src/area.js","webpack:///./node_modules/d3-geo/src/cartesian.js","webpack:///./node_modules/d3-geo/src/bounds.js","webpack:///./node_modules/d3-geo/src/centroid.js","webpack:///./node_modules/d3-geo/src/constant.js","webpack:///./node_modules/d3-geo/src/compose.js","webpack:///./node_modules/d3-geo/src/rotation.js","webpack:///./node_modules/d3-geo/src/circle.js","webpack:///./node_modules/d3-geo/src/clip/buffer.js","webpack:///./node_modules/d3-geo/src/pointEqual.js","webpack:///./node_modules/d3-geo/src/clip/rejoin.js","webpack:///./node_modules/d3-geo/src/polygonContains.js","webpack:///./node_modules/d3-geo/src/clip/index.js","webpack:///./node_modules/d3-geo/src/clip/antimeridian.js","webpack:///./node_modules/d3-geo/src/clip/circle.js","webpack:///./node_modules/d3-geo/src/clip/line.js","webpack:///./node_modules/d3-geo/src/clip/rectangle.js","webpack:///./node_modules/d3-geo/src/clip/extent.js","webpack:///./node_modules/d3-geo/src/length.js","webpack:///./node_modules/d3-geo/src/distance.js","webpack:///./node_modules/d3-geo/src/contains.js","webpack:///./node_modules/d3-geo/src/graticule.js","webpack:///./node_modules/d3-geo/src/interpolate.js","webpack:///./node_modules/d3-geo/src/path/area.js","webpack:///./node_modules/d3-geo/src/identity.js","webpack:///./node_modules/d3-geo/src/path/bounds.js","webpack:///./node_modules/d3-geo/src/path/centroid.js","webpack:///./node_modules/d3-geo/src/path/context.js","webpack:///./node_modules/d3-geo/src/path/measure.js","webpack:///./node_modules/d3-geo/src/path/string.js","webpack:///./node_modules/d3-geo/src/path/index.js","webpack:///./node_modules/d3-geo/src/transform.js","webpack:///./node_modules/d3-geo/src/projection/fit.js","webpack:///./node_modules/d3-geo/src/projection/resample.js","webpack:///./node_modules/d3-geo/src/projection/index.js","webpack:///./node_modules/d3-geo/src/projection/conic.js","webpack:///./node_modules/d3-geo/src/projection/conicEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/cylindricalEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/albers.js","webpack:///./node_modules/d3-geo/src/projection/albersUsa.js","webpack:///./node_modules/d3-geo/src/projection/azimuthal.js","webpack:///./node_modules/d3-geo/src/projection/azimuthalEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/azimuthalEquidistant.js","webpack:///./node_modules/d3-geo/src/projection/mercator.js","webpack:///./node_modules/d3-geo/src/projection/conicConformal.js","webpack:///./node_modules/d3-geo/src/projection/equirectangular.js","webpack:///./node_modules/d3-geo/src/projection/conicEquidistant.js","webpack:///./node_modules/d3-geo/src/projection/gnomonic.js","webpack:///./node_modules/d3-geo/src/projection/identity.js","webpack:///./node_modules/d3-geo/src/projection/naturalEarth1.js","webpack:///./node_modules/d3-geo/src/projection/orthographic.js","webpack:///./node_modules/d3-geo/src/projection/stereographic.js","webpack:///./node_modules/d3-geo/src/projection/transverseMercator.js","webpack:///./node_modules/d3-array/src/ascending.js","webpack:///./node_modules/d3-array/src/bisector.js","webpack:///./node_modules/d3-array/src/bisect.js","webpack:///./node_modules/d3-array/src/pairs.js","webpack:///./node_modules/d3-array/src/cross.js","webpack:///./node_modules/d3-array/src/descending.js","webpack:///./node_modules/d3-array/src/number.js","webpack:///./node_modules/d3-array/src/variance.js","webpack:///./node_modules/d3-array/src/deviation.js","webpack:///./node_modules/d3-array/src/extent.js","webpack:///./node_modules/d3-array/src/array.js","webpack:///./node_modules/d3-array/src/constant.js","webpack:///./node_modules/d3-array/src/identity.js","webpack:///./node_modules/d3-array/src/range.js","webpack:///./node_modules/d3-array/src/ticks.js","webpack:///./node_modules/d3-array/src/threshold/sturges.js","webpack:///./node_modules/d3-array/src/histogram.js","webpack:///./node_modules/d3-array/src/quantile.js","webpack:///./node_modules/d3-array/src/threshold/freedmanDiaconis.js","webpack:///./node_modules/d3-array/src/threshold/scott.js","webpack:///./node_modules/d3-array/src/max.js","webpack:///./node_modules/d3-array/src/mean.js","webpack:///./node_modules/d3-array/src/median.js","webpack:///./node_modules/d3-array/src/merge.js","webpack:///./node_modules/d3-array/src/min.js","webpack:///./node_modules/d3-array/src/permute.js","webpack:///./node_modules/d3-array/src/scan.js","webpack:///./node_modules/d3-array/src/shuffle.js","webpack:///./node_modules/d3-array/src/sum.js","webpack:///./node_modules/d3-array/src/transpose.js","webpack:///./node_modules/d3-array/src/zip.js","webpack:///./node_modules/d3-color/src/define.js","webpack:///./node_modules/d3-color/src/color.js","webpack:///./node_modules/d3-color/src/math.js","webpack:///./node_modules/d3-color/src/lab.js","webpack:///./node_modules/d3-color/src/cubehelix.js","webpack:///./node_modules/d3-interpolate/src/basis.js","webpack:///./node_modules/d3-interpolate/src/basisClosed.js","webpack:///./node_modules/d3-interpolate/src/constant.js","webpack:///./node_modules/d3-interpolate/src/color.js","webpack:///./node_modules/d3-interpolate/src/rgb.js","webpack:///./node_modules/d3-interpolate/src/array.js","webpack:///./node_modules/d3-interpolate/src/date.js","webpack:///./node_modules/d3-interpolate/src/number.js","webpack:///./node_modules/d3-interpolate/src/object.js","webpack:///./node_modules/d3-interpolate/src/string.js","webpack:///./node_modules/d3-interpolate/src/transform/parse.js","webpack:///./node_modules/d3-interpolate/src/value.js","webpack:///./node_modules/d3-interpolate/src/round.js","webpack:///./node_modules/d3-interpolate/src/transform/decompose.js","webpack:///./node_modules/d3-interpolate/src/transform/index.js","webpack:///./node_modules/d3-interpolate/src/zoom.js","webpack:///./node_modules/d3-interpolate/src/hsl.js","webpack:///./node_modules/d3-interpolate/src/lab.js","webpack:///./node_modules/d3-interpolate/src/hcl.js","webpack:///./node_modules/d3-interpolate/src/cubehelix.js","webpack:///./node_modules/d3-interpolate/src/quantize.js","webpack:///./node_modules/d3-format/src/formatDecimal.js","webpack:///./node_modules/d3-format/src/formatPrefixAuto.js","webpack:///./node_modules/d3-format/src/exponent.js","webpack:///./node_modules/d3-format/src/formatRounded.js","webpack:///./node_modules/d3-format/src/formatTypes.js","webpack:///./node_modules/d3-format/src/formatDefault.js","webpack:///./node_modules/d3-format/src/formatSpecifier.js","webpack:///./node_modules/d3-format/src/identity.js","webpack:///./node_modules/d3-format/src/defaultLocale.js","webpack:///./node_modules/d3-format/src/locale.js","webpack:///./node_modules/d3-format/src/formatGroup.js","webpack:///./node_modules/d3-format/src/formatNumerals.js","webpack:///./node_modules/d3-format/src/precisionFixed.js","webpack:///./node_modules/d3-format/src/precisionPrefix.js","webpack:///./node_modules/d3-format/src/precisionRound.js","webpack:///./node_modules/d3-collection/src/map.js","webpack:///./node_modules/d3-collection/src/set.js","webpack:///./node_modules/d3-scale/src/array.js","webpack:///./node_modules/d3-scale/src/ordinal.js","webpack:///./node_modules/d3-scale/src/band.js","webpack:///./node_modules/d3-scale/src/constant.js","webpack:///./node_modules/d3-scale/src/number.js","webpack:///./node_modules/d3-scale/src/continuous.js","webpack:///./node_modules/d3-scale/src/tickFormat.js","webpack:///./node_modules/d3-scale/src/linear.js","webpack:///./node_modules/d3-scale/src/identity.js","webpack:///./node_modules/d3-scale/src/nice.js","webpack:///./node_modules/d3-scale/src/log.js","webpack:///./node_modules/d3-scale/src/pow.js","webpack:///./node_modules/d3-scale/src/quantile.js","webpack:///./node_modules/d3-scale/src/quantize.js","webpack:///./node_modules/d3-scale/src/threshold.js","webpack:///./node_modules/d3-time/src/interval.js","webpack:///./node_modules/d3-time/src/millisecond.js","webpack:///./node_modules/d3-time/src/duration.js","webpack:///./node_modules/d3-time/src/second.js","webpack:///./node_modules/d3-time/src/minute.js","webpack:///./node_modules/d3-time/src/hour.js","webpack:///./node_modules/d3-time/src/day.js","webpack:///./node_modules/d3-time/src/week.js","webpack:///./node_modules/d3-time/src/month.js","webpack:///./node_modules/d3-time/src/year.js","webpack:///./node_modules/d3-time/src/utcMinute.js","webpack:///./node_modules/d3-time/src/utcHour.js","webpack:///./node_modules/d3-time/src/utcDay.js","webpack:///./node_modules/d3-time/src/utcWeek.js","webpack:///./node_modules/d3-time/src/utcMonth.js","webpack:///./node_modules/d3-time/src/utcYear.js","webpack:///./node_modules/d3-time-format/src/locale.js","webpack:///./node_modules/d3-time-format/src/defaultLocale.js","webpack:///./node_modules/d3-time-format/src/isoFormat.js","webpack:///./node_modules/d3-time-format/src/isoParse.js","webpack:///./node_modules/d3-scale/src/time.js","webpack:///./node_modules/d3-scale/src/utcTime.js","webpack:///./node_modules/d3-scale/src/sequential.js","webpack:///./node_modules/topojson-client/src/identity.js","webpack:///./node_modules/topojson-client/src/transform.js","webpack:///./node_modules/topojson-client/src/bbox.js","webpack:///./node_modules/topojson-client/src/reverse.js","webpack:///./node_modules/topojson-client/src/feature.js","webpack:///./node_modules/topojson-client/src/stitch.js","webpack:///./node_modules/topojson-client/src/mesh.js","webpack:///./node_modules/topojson-client/src/merge.js","webpack:///./node_modules/topojson-client/src/bisect.js","webpack:///./node_modules/topojson-client/src/neighbors.js","webpack:///./node_modules/topojson-client/src/untransform.js","webpack:///./node_modules/topojson-client/src/quantize.js","webpack:///./src/legend.ts","webpack:///./node_modules/d3-fetch/src/buffer.js","webpack:///./node_modules/d3-dsv/src/dsv.js","webpack:///./node_modules/d3-dsv/src/csv.js","webpack:///./node_modules/d3-dsv/src/tsv.js","webpack:///./node_modules/d3-fetch/src/text.js","webpack:///./node_modules/d3-fetch/src/dsv.js","webpack:///./node_modules/d3-fetch/src/xml.js","webpack:///./node_modules/d3-scale-chromatic/src/colors.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/category10.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Accent.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Dark2.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Paired.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Pastel1.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Pastel2.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Set1.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Set2.js","webpack:///./node_modules/d3-scale-chromatic/src/categorical/Set3.js","webpack:///./node_modules/d3-scale-chromatic/src/ramp.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/PiYG.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/BrBG.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/PRGn.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/PuOr.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/RdBu.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/RdGy.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js","webpack:///./node_modules/d3-scale-chromatic/src/diverging/Spectral.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-single/Blues.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-single/Greens.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-single/Greys.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-single/Purples.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-single/Reds.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js","webpack:///./node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js","webpack:///./src/index.ts","webpack:///./node_modules/d3-geo-projection/src/math.js","webpack:///./node_modules/d3-geo-projection/src/airy.js","webpack:///./node_modules/d3-geo-projection/src/aitoff.js","webpack:///./node_modules/d3-geo-projection/src/armadillo.js","webpack:///./node_modules/d3-geo-projection/src/august.js","webpack:///./node_modules/d3-geo-projection/src/baker.js","webpack:///./node_modules/d3-geo-projection/src/berghaus.js","webpack:///./node_modules/d3-geo-projection/src/hammer.js","webpack:///./node_modules/d3-geo-projection/src/bertin.js","webpack:///./node_modules/d3-geo-projection/src/mollweide.js","webpack:///./node_modules/d3-geo-projection/src/boggs.js","webpack:///./node_modules/d3-geo-projection/src/parallel1.js","webpack:///./node_modules/d3-geo-projection/src/sinusoidal.js","webpack:///./node_modules/d3-geo-projection/src/bonne.js","webpack:///./node_modules/d3-geo-projection/src/bottomley.js","webpack:///./node_modules/d3-geo-projection/src/bromley.js","webpack:///./node_modules/d3-geo-projection/src/chamberlin.js","webpack:///./node_modules/d3-geo-projection/src/collignon.js","webpack:///./node_modules/d3-geo-projection/src/craig.js","webpack:///./node_modules/d3-geo-projection/src/craster.js","webpack:///./node_modules/d3-geo-projection/src/cylindricalEqualArea.js","webpack:///./node_modules/d3-geo-projection/src/cylindricalStereographic.js","webpack:///./node_modules/d3-geo-projection/src/eckert1.js","webpack:///./node_modules/d3-geo-projection/src/eckert2.js","webpack:///./node_modules/d3-geo-projection/src/eckert3.js","webpack:///./node_modules/d3-geo-projection/src/eckert4.js","webpack:///./node_modules/d3-geo-projection/src/eckert5.js","webpack:///./node_modules/d3-geo-projection/src/eckert6.js","webpack:///./node_modules/d3-geo-projection/src/eisenlohr.js","webpack:///./node_modules/d3-geo-projection/src/fahey.js","webpack:///./node_modules/d3-geo-projection/src/foucaut.js","webpack:///./node_modules/d3-geo-projection/src/gilbert.js","webpack:///./node_modules/d3-geo-projection/src/gingery.js","webpack:///./node_modules/d3-geo-projection/src/ginzburgPolyconic.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg4.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg5.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg6.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg8.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg9.js","webpack:///./node_modules/d3-geo-projection/src/square.js","webpack:///./node_modules/d3-geo-projection/src/gringorten.js","webpack:///./node_modules/d3-geo-projection/src/elliptic.js","webpack:///./node_modules/d3-geo-projection/src/guyou.js","webpack:///./node_modules/d3-geo-projection/src/hammerRetroazimuthal.js","webpack:///./node_modules/d3-geo-projection/src/healpix.js","webpack:///./node_modules/d3-geo-projection/src/hill.js","webpack:///./node_modules/d3-geo-projection/src/sinuMollweide.js","webpack:///./node_modules/d3-geo-projection/src/homolosine.js","webpack:///./node_modules/d3-geo-projection/src/integrate.js","webpack:///./node_modules/d3-geo-projection/src/hyperelliptical.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/index.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/boggs.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/homolosine.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/mollweide.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/mollweideHemispheres.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/sinuMollweide.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/sinusoidal.js","webpack:///./node_modules/d3-geo-projection/src/kavrayskiy7.js","webpack:///./node_modules/d3-geo-projection/src/lagrange.js","webpack:///./node_modules/d3-geo-projection/src/larrivee.js","webpack:///./node_modules/d3-geo-projection/src/laskowski.js","webpack:///./node_modules/d3-geo-projection/src/littrow.js","webpack:///./node_modules/d3-geo-projection/src/loximuthal.js","webpack:///./node_modules/d3-geo-projection/src/miller.js","webpack:///./node_modules/d3-geo-projection/src/modifiedStereographic.js","webpack:///./node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js","webpack:///./node_modules/d3-geo-projection/src/mtFlatPolarQuartic.js","webpack:///./node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js","webpack:///./node_modules/d3-geo-projection/src/naturalEarth2.js","webpack:///./node_modules/d3-geo-projection/src/nellHammer.js","webpack:///./node_modules/d3-geo-projection/src/patterson.js","webpack:///./node_modules/d3-geo-projection/src/polyconic.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/matrix.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/index.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/octahedron.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/butterfly.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/collignon.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/waterman.js","webpack:///./node_modules/d3-geo-projection/src/noop.js","webpack:///./node_modules/d3-geo-projection/src/project/index.js","webpack:///./node_modules/d3-geo-projection/src/project/clockwise.js","webpack:///./node_modules/d3-geo-projection/src/project/contains.js","webpack:///./node_modules/d3-geo-projection/src/quincuncial/index.js","webpack:///./node_modules/d3-geo-projection/src/quincuncial/gringorten.js","webpack:///./node_modules/d3-geo-projection/src/quincuncial/peirce.js","webpack:///./node_modules/d3-geo-projection/src/quantize.js","webpack:///./node_modules/d3-geo-projection/src/rectangularPolyconic.js","webpack:///./node_modules/d3-geo-projection/src/robinson.js","webpack:///./node_modules/d3-geo-projection/src/satellite.js","webpack:///./node_modules/d3-geo-projection/src/stitch.js","webpack:///./node_modules/d3-geo-projection/src/times.js","webpack:///./node_modules/d3-geo-projection/src/twoPoint.js","webpack:///./node_modules/d3-geo-projection/src/twoPointAzimuthal.js","webpack:///./node_modules/d3-geo-projection/src/twoPointEquidistant.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten2.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten3.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten4.js","webpack:///./node_modules/d3-geo-projection/src/wagner4.js","webpack:///./node_modules/d3-geo-projection/src/wagner6.js","webpack:///./node_modules/d3-geo-projection/src/wagner7.js","webpack:///./node_modules/d3-geo-projection/src/wiechel.js","webpack:///./node_modules/d3-geo-projection/src/winkel3.js","webpack:///./node_modules/aframe-geo-projection-component/src/projection.js","webpack:///./node_modules/aframe-geo-projection-component/src/renderContext.js","webpack:///./node_modules/aframe-geo-projection-component/src/renderers.js","webpack:///./node_modules/aframe-geo-projection-component/src/lineBasicMaterial.js","webpack:///./node_modules/aframe-geo-projection-component/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","adder","Adder","this","reset","constructor","t","add","y","temp","valueOf","a","b","x","bv","av","epsilon","pi","Math","PI","halfPi","quarterPi","tau","degrees","radians","abs","atan","atan2","cos","ceil","exp","log","floor","pow","sin","math_sign","sign","sqrt","tan","acos","asin","haversin","noop","streamGeometry","geometry","stream","streamGeometryType","type","streamObjectType","Feature","FeatureCollection","features","length","Sphere","sphere","Point","coordinates","point","MultiPoint","LineString","streamLine","MultiLineString","Polygon","streamPolygon","MultiPolygon","GeometryCollection","geometries","closed","coordinate","lineStart","lineEnd","polygonStart","polygonEnd","area_lambda00","area_phi00","area_lambda0","area_cosPhi0","area_sinPhi0","src_stream","area_areaRingSum","area_areaSum","area_areaStream","area_areaRingStart","area_areaRingEnd","areaRing","area_areaPointFirst","area_areaPoint","lambda","phi","dLambda","sdLambda","adLambda","cosPhi","sinPhi","k","u","v","src_area","cartesian_spherical","cartesian","cartesian_cartesian","spherical","cartesian_cartesianDot","cartesian_cartesianCross","cartesian_cartesianAddInPlace","cartesian_cartesianScale","vector","cartesian_cartesianNormalizeInPlace","bounds_lambda0","bounds_phi0","bounds_lambda1","bounds_phi1","bounds_lambda2","bounds_lambda00","bounds_phi00","bounds_p0","bounds_ranges","bounds_range","bounds_deltaSum","bounds_boundsStream","bounds_boundsPoint","bounds_boundsLineStart","bounds_boundsLineEnd","bounds_boundsRingPoint","bounds_boundsRingStart","bounds_boundsRingEnd","push","bounds_linePoint","normal","inflection","phii","delta","lambdai","antimeridian","bounds_angle","lambda0","lambda1","bounds_rangeCompare","bounds_rangeContains","range","centroid_W0","centroid_W1","centroid_X0","centroid_Y0","centroid_Z0","centroid_X1","centroid_Y1","centroid_Z1","centroid_X2","centroid_Y2","centroid_Z2","centroid_lambda00","centroid_phi00","centroid_x0","centroid_y0","centroid_z0","bounds","feature","merged","deltaMax","Infinity","sort","NaN","centroid_centroidStream","centroid_centroidPoint","centroid_centroidLineStart","centroid_centroidLineEnd","centroid_centroidRingStart","centroid_centroidRingEnd","centroid_centroidPointCartesian","z","centroid_centroidLinePointFirst","centroid_centroidLinePoint","w","centroid_centroidRingPointFirst","centroid_centroidRingPoint","cx","cy","cz","constant","compose","invert","rotation_rotationIdentity","rotation_rotateRadians","deltaLambda","deltaPhi","deltaGamma","rotation_rotationLambda","rotation_rotationPhiGamma","rotation_forwardRotationLambda","rotation","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","src_rotation","rotate","forward","circle_circleStream","radius","direction","t0","t1","cosRadius","sinRadius","step","circle_circleRadius","src_circle","ring","center","precision","circle","apply","arguments","_","buffer","line","lines","rejoin","pop","concat","shift","result","pointEqual","rejoin_Intersection","points","other","entry","e","segments","compareIntersection","startInside","interpolate","subject","clip","forEach","segment","p0","p1","rejoin_link","start","current","isSubject","array","polygonContains_sum","polygonContains","polygon","angle","winding","point0","phi0","sinPhi0","cosPhi0","j","sinPhi1","cosPhi1","point1","phi1","absDelta","arc","intersection","phiArc","src_clip","pointVisible","clipLine","sink","ringBuffer","ringSink","polygonStarted","pointRing","ringStart","ringEnd","d3_array","clip_compareIntersection","pointLine","clean","ringSegments","filter","clip_validSegment","sign0","sign1","sinLambda0Lambda1","antimeridian_clipAntimeridianIntersect","from","to","clip_circle","cr","smallRadius","notHemisphere","visible","intersect","two","n1","n2","n2n2","n1n2","determinant","c1","c2","n1xn2","A","uu","t2","q","polar","q1","code","c0","v0","v00","point2","clip_line","x0","y0","x1","y1","ax","ay","dx","dy","rectangle_clipMax","rectangle_clipMin","rectangle_clipRectangle","a1","corner","comparePoint","ca","cb","x__","y__","v__","x_","y_","v_","first","activeStream","bufferStream","clipStream","linePoint","a0","b0","b1","polygonInside","cleanInside","max","min","length_lambda0","length_sinPhi0","length_cosPhi0","clip_extent","cache","cacheStream","extent","length_lengthSum","length_lengthStream","length_lengthPointFirst","length_lengthLineEnd","length_lengthPoint","cosDelta","src_length","distance_coordinates","distance_object","distance","contains_containsObjectType","contains_containsGeometry","contains_containsGeometryType","contains_containsPoint","contains_containsLine","contains_containsPolygon","ab","map","contains_ringRadians","contains_pointRadians","contains","graticule_graticuleX","graticule_graticuleY","graticule_graticule","X1","X0","Y1","Y0","X","Y","DX","DY","graticule","outline","slice","reverse","extentMajor","extentMinor","stepMajor","stepMinor","graticule_graticule10","area_x00","area_y00","area_x0","area_y0","src_interpolate","cy0","sy0","cy1","sy1","kx0","ky0","kx1","ky1","B","identity","path_area_areaSum","path_area_areaRingSum","path_area_areaStream","path_area_areaRingStart","path_area_areaRingEnd","area","path_area_areaPointFirst","path_area_areaPoint","path_area","bounds_x0","bounds_y0","bounds_x1","bounds_y1","centroid_x00","centroid_y00","path_centroid_x0","path_centroid_y0","path_bounds","path_centroid_X0","path_centroid_Y0","path_centroid_Z0","path_centroid_X1","path_centroid_Y1","path_centroid_Z1","path_centroid_X2","path_centroid_Y2","path_centroid_Z2","path_centroid_centroidStream","path_centroid_centroidPoint","path_centroid_centroidLineStart","path_centroid_centroidLineEnd","path_centroid_centroidRingStart","path_centroid_centroidRingEnd","centroid","centroid_centroidPointFirstLine","centroid_centroidPointLine","centroid_centroidPointFirstRing","centroid_centroidPointRing","path_centroid","context_PathContext","context","_context","_radius","pointRadius","_line","_point","closePath","moveTo","lineTo","measure_lengthRing","measure_x00","measure_y00","measure_x0","measure_y0","measure_lengthSum","measure_lengthStream","measure_lengthPointFirst","measure_lengthPoint","measure","PathString","_string","string_circle","_circle","join","projection","projectionStream","contextStream","path","src_transform","methods","transformer","TransformStream","key","fit_fit","fitBounds","clipExtent","scale","translate","fit_fitExtent","h","fit_fitSize","size","fit_fitWidth","width","fit_fitHeight","height","resample_maxDepth","resample_cosMinDistance","projection_resample","project","delta2","resampleLineTo","depth","d2","phi2","lambda2","x2","y2","dx2","dy2","dz","lambda00","x00","y00","a00","b00","c00","resampleStream","ringPoint","resample_resample","resample_resampleNone","projection_transformRadians","projection_scaleTranslateRotate","alpha","cosAlpha","sinAlpha","ai","bi","ci","fi","transform","projection_projection","projection_projectionMutator","projectAt","projectResample","projectTransform","projectRotateTransform","theta","preclip","clip_antimeridian","postclip","recenter","projection_transformRotate","undefined","clipAngle","fitExtent","fitSize","fitWidth","fitHeight","conic_conicProjection","parallels","conicEqualArea_conicEqualAreaRaw","cylindricalEqualArea_cylindricalEqualAreaRaw","r0","r0y","conicEqualArea","albers","projection_albersUsa","lower48Point","alaskaPoint","hawaiiPoint","lower48","alaska","hawaii","pointStream","albersUsa","streams","azimuthal_azimuthalRaw","azimuthal_azimuthalInvert","sc","cc","azimuthalEqualArea_azimuthalEqualAreaRaw","cxcy","azimuthalEqualArea","azimuthalEquidistant_azimuthalEquidistantRaw","azimuthalEquidistant","mercator_mercatorRaw","mercator","mercator_mercatorProjection","reclip","conicConformal_tany","conicConformal_conicConformalRaw","f","fy","conicConformal","equirectangular_equirectangularRaw","equirectangular","conicEquidistant_conicEquidistantRaw","g","gy","nx","conicEquidistant","gnomonic_gnomonicRaw","gnomonic","identity_scaleTranslate","kx","ky","tx","ty","projection_identity","sx","sy","reflectX","reflectY","naturalEarth1_naturalEarth1Raw","phi4","naturalEarth1","orthographic_orthographicRaw","orthographic","stereographic_stereographicRaw","stereographic","transverseMercator_transverseMercatorRaw","transverseMercator","ascending","bisector","compare","left","lo","hi","mid","right","bisect_ascendingBisect","bisect_bisectRight","bisect_bisectLeft","bisect","pairs","pair","Array","cross","values0","values1","reduce","i0","i1","value0","n0","values","descending","number","variance","valueof","mean","sum","isNaN","deviation","array_array","stop","e10","e5","e2","ticks","count","tickIncrement","isFinite","power","LN10","error","tickStep","step0","step1","sturges","LN2","src_histogram","domain","threshold","histogram","data","xz","tz","isArray","bin","bins","thresholds","quantile","freedmanDiaconis","scott","src_max","src_mean","median","numbers","merge","arrays","src_min","permute","indexes","permutes","scan","xi","xj","shuffle","random","src_sum","src_transpose","matrix","transpose_length","transpose","row","zip","define","factory","extend","parent","definition","create","color_Color","color_reI","color_reN","color_reP","color_reHex3","color_reHex6","color_reRgbInteger","RegExp","color_reRgbPercent","color_reRgbaInteger","color_reRgbaPercent","color_reHslPercent","color_reHslaPercent","color_named","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","color_color","format","trim","toLowerCase","exec","color_Rgb","parseInt","color_rgbn","color_rgba","color_hsla","color_rgbConvert","rgb","opacity","color_rgb","color_Hsl","color_hsl","color_hslConvert","color_hsl2rgb","m1","m2","displayable","toString","brighter","darker","round","deg2rad","rad2deg","lab_Xn","lab_Yn","lab_Zn","lab_t0","lab_t1","lab_t2","lab_t3","lab_labConvert","lab_Lab","lab_Hcl","lab_rgb2xyz","lab_xyz2lab","lab_lab","lab_lab2xyz","lab_xyz2rgb","lab_hcl","lab_hclConvert","cubehelix_C","cubehelix_D","cubehelix_E","cubehelix_ED","cubehelix_EB","cubehelix_BC_DA","cubehelix_cubehelix","cubehelix_Cubehelix","bl","cubehelix_cubehelixConvert","cosh","sinh","basis","v1","v2","v3","t3","src_basis","basisClosed","color_linear","color_hue","color_gamma","color_nogamma","color_exponential","rgbGamma","color","end","d3_color","gamma","rgb_rgbSpline","spline","colors","rgb_rgbBasis","rgb_rgbBasisClosed","nb","na","src_value","date","Date","setTime","string_reA","string_reB","source","parse_cssNode","parse_cssRoot","parse_cssView","parse_svgNode","string","am","bm","bs","lastIndex","index","string_one","string_zero","src_rgb","translateX","translateY","skewX","scaleX","scaleY","decompose","transform_interpolateTransform","parse","pxComma","pxParen","degParen","xa","ya","xb","yb","transform_interpolateTransformCss","document","createElement","documentElement","defaultView","style","getComputedStyle","appendChild","getPropertyValue","removeChild","split","transform_interpolateTransformSvg","createElementNS","setAttribute","baseVal","consolidate","rho","SQRT2","zoom","S","ux0","uy0","w0","ux1","uy1","w1","d1","r1","coshr0","duration","hsl_hsl","hue","src_hsl","hsl_hslLong","hcl_hcl","src_hcl","hcl_hclLong","cubehelixGamma","cubehelix","src_cubehelix","cubehelix_cubehelixLong","quantize","interpolator","samples","formatPrefixAuto_prefixExponent","formatDecimal","toExponential","indexOf","coefficient","src_exponent","formatRounded","exponent","formatTypes","","toPrecision","out","%","toFixed","toUpperCase","formatSpecifier_re","formatSpecifier_formatSpecifier","specifier","formatSpecifier_FormatSpecifier","match","Error","fill","align","symbol","zero","comma","defaultLocale_locale","defaultLocale_format","defaultLocale_formatPrefix","locale_prefixes","src_locale","locale","grouping","thousands","group","substring","currency","decimal","numerals","replace","formatNumerals","percent","newFormat","prefix","test","suffix","formatType","maybeSuffix","valuePrefix","valueSuffix","valueNegative","charCodeAt","padding","formatPrefix","defaultLocale_defaultLocale","precisionFixed","precisionPrefix","precisionRound","Map","each","set","has","remove","clear","keys","entries","empty","src_map","set_Set","set_proto","set_set","array_map","ordinal_implicit","ordinal_ordinal","unknown","copy","band_band","bandwidth","ordinalRange","paddingInner","paddingOuter","rescale","rangeRound","band_point","band_pointish","src_number","continuous_unit","continuous_deinterpolateLinear","continuous_bimap","deinterpolate","reinterpolate","d0","continuous_polymap","continuous_copy","target","clamp","continuous_continuous","piecewise","output","input","d3_interpolate","continuous_deinterpolateClamp","continuous_reinterpolateClamp","src_tickFormat","d3_format","linear_linearish","tickFormat","nice","linear_linear","identity_identity","interval","log_deinterpolate","log_reinterpolate","log_pow10","log_powp","base","E","log_logp","log10","log2","log_reflect","log_log","logs","pows","pow_raise","pow_pow","pow_sqrt","quantile_quantile","invertExtent","quantiles","quantize_quantize","threshold_threshold","newInterval","floori","offseti","field","offset","previous","every","millisecond_millisecond","src_millisecond","duration_durationMinute","duration_durationWeek","second_second","getUTCSeconds","minute_minute","getMinutes","hour_hour","getTimezoneOffset","getHours","src_hour","day_day","setHours","setDate","getDate","src_day","week_weekday","getDay","week_sunday","week_monday","week_tuesday","week_wednesday","week_thursday","week_friday","week_saturday","month_month","setMonth","getMonth","getFullYear","src_month","year_year","setFullYear","src_year","utcMinute_utcMinute","setUTCSeconds","getUTCMinutes","src_utcMinute","utcHour_utcHour","setUTCMinutes","getUTCHours","src_utcHour","utcDay_utcDay","setUTCHours","setUTCDate","getUTCDate","utcWeek_utcWeekday","getUTCDay","utcWeek_utcSunday","utcWeek_utcMonday","utcWeek_utcTuesday","utcWeek_utcWednesday","utcWeek_utcThursday","utcWeek_utcFriday","utcWeek_utcSaturday","utcMonth_utcMonth","setUTCMonth","getUTCMonth","getUTCFullYear","src_utcMonth","utcYear_utcYear","setUTCFullYear","src_utcYear","locale_localDate","H","M","L","locale_utcDate","UTC","locale_newYear","defaultLocale_timeFormat","defaultLocale_utcFormat","defaultLocale_utcParse","locale_pads","-","0","locale_numberRe","locale_percentRe","locale_requoteRe","locale_pad","locale_requote","locale_formatRe","names","locale_formatLookup","locale_parseWeekdayNumberSunday","locale_parseWeekdayNumberMonday","locale_parseWeekNumberSunday","U","locale_parseWeekNumberISO","V","locale_parseWeekNumberMonday","W","locale_parseFullYear","locale_parseYear","locale_parseZone","Z","locale_parseMonthNumber","locale_parseDayOfMonth","locale_parseDayOfYear","locale_parseHour24","locale_parseMinutes","locale_parseSeconds","locale_parseMilliseconds","locale_parseMicroseconds","locale_parseLiteralPercent","locale_parseUnixTimestamp","Q","locale_parseUnixTimestampSeconds","locale_formatDayOfMonth","locale_formatHour24","locale_formatHour12","locale_formatDayOfYear","locale_formatMilliseconds","getMilliseconds","locale_formatMicroseconds","locale_formatMonthNumber","locale_formatMinutes","locale_formatSeconds","getSeconds","locale_formatWeekdayNumberMonday","day","locale_formatWeekNumberSunday","locale_formatWeekNumberISO","locale_formatWeekdayNumberSunday","locale_formatWeekNumberMonday","locale_formatYear","locale_formatFullYear","locale_formatZone","locale_formatUTCDayOfMonth","locale_formatUTCHour24","locale_formatUTCHour12","locale_formatUTCDayOfYear","src_utcDay","locale_formatUTCMilliseconds","getUTCMilliseconds","locale_formatUTCMicroseconds","locale_formatUTCMonthNumber","locale_formatUTCMinutes","locale_formatUTCSeconds","locale_formatUTCWeekdayNumberMonday","dow","locale_formatUTCWeekNumberSunday","locale_formatUTCWeekNumberISO","locale_formatUTCWeekdayNumberSunday","locale_formatUTCWeekNumberMonday","locale_formatUTCYear","locale_formatUTCFullYear","locale_formatUTCZone","locale_formatLiteralPercent","locale_formatUnixTimestamp","locale_formatUnixTimestampSeconds","locale_dateTime","dateTime","locale_date","locale_time","time","locale_periods","periods","locale_weekdays","days","locale_shortWeekdays","shortDays","locale_months","months","locale_shortMonths","shortMonths","periodRe","periodLookup","weekdayRe","weekdayLookup","shortWeekdayRe","shortWeekdayLookup","monthRe","monthLookup","shortMonthRe","shortMonthLookup","formats","I","utcFormats","parses","parseSpecifier","pad","charAt","newParse","newDate","week","utcFormat","utcParse","locale_formatLocale","toISOString","time_durationSecond","time_durationMinute","time_durationHour","time_durationDay","time_durationWeek","time_durationMonth","time_durationYear","time_date","time_number","time_calendar","year","month","hour","minute","second","millisecond","formatMillisecond","formatSecond","formatMinute","formatHour","formatDay","formatWeek","formatMonth","formatYear","tickIntervals","tickInterval","src_minute","src_second","utcTime","sequential_sequential","bbox","topology","bboxPoint","bboxGeometry","arcs","objects","feature_feature","id","properties","feature_object","transformPoint","stitch","stitchedArcs","fragmentByStart","fragmentByEnd","fragments","emptyIndex","flush","dp","ends","fg","unshift","gf","mesh_meshArcs","geom","geomsByArc","extract0","extract1","extract2","geoms","mesh_extractArcs","merge_mergeArcs","polygonsByArc","polygons","groups","extract","merge_planarRingArea","neighbors","ki","src_neighbors","indexesByArc","geometryType","ij","ik","splice","untransform","box","inputs","outputs","quantizePoint","quantizeGeometry","AFRAME","registerComponent","init","el","sceneEl","addEventListener","createLegendColorScale","bind","updateLegendYear","removeEventListener","event","querySelector","detail","colorScale","thresholdsPerColor","acc","curr","midPoint","containerWidth","Number","getAttribute","containerHeight","currXPosition","parentHeight","boxYPos","labelYPos","header","formatter","primitive","label","colorThreshold","EOL","EOF","QUOTE","NEWLINE","RETURN","objectConverter","columns","Function","JSON","stringify","src_dsv","delimiter","reFormat","DELIMITER","parseRows","text","rows","N","eof","eol","token","formatRow","formatValue","convert","customConverter","columnSet","column","inferColumns","formatRows","csv_csv","csv_csvParse","tsv_tsv","tsv_tsvParse","responseText","response","ok","status","statusText","src_text","fetch","then","dsv_dsvParse","dsv_csv","xml_parser","DOMParser","parseFromString","src_colors","src_ramp","scheme","PiYG_scheme","viridis_ramp","src_THREE","THREE","src_processPopDataFile","county","popestimate2010","popestimate2011","popestimate2012","popestimate2013","popestimate2014","popestimate2015","popestimate2016","npopchg2010","estimatesbase2010","npopchg2011","npopchg2012","npopchg2013","npopchg2014","npopchg2015","npopchg2016","src_getPopColumnNameForYear","src_getPopDeltaColumnNameForYear","src_calculateMinMaxExtent","accessor","extentsForAllYears","columnName","extentForYear","dependencies","schema","default","maxExtrudeHeight","geoProjectionComponent","components","ready","csvLoaderPromise","populationData","accum","minMaxPopExtent","minPopDelta","maxPopDelta","d3_scale","allThresholds","emit","console","geoDataLoaderPromise","Promise","resolve","all","render","update","oldData","popColumnName","popDeltaColumnName","extrudeScale","extrudeGeometries","outlineVertices","geoJson","population","populationDelta","extrudeAmount","extrudeSettings","amount","bevelEnabled","mapRenderContext","renderer","renderToContext","countyShapes","toShapes","isCCW","toVertices","extrudedFeatureGeometry","ExtrudeGeometry","extrudeGeometry","material","MeshBasicMaterial","sideMaterial","MeshStandardMaterial","extrudedMap","Mesh","setObject3D","outlineGeometry","BufferGeometry","addAttribute","Float32BufferAttribute","outlineMaterial","LineBasicMaterial","outlineObject3D","LineSegments","math_epsilon","epsilon2","sqrt1_2","SQRT1_2","sqrt2","sqrtPi","airy_airyRaw","beta","tanBeta_2","cosx","cosy","siny","cosz","z_2","cosz_2","sinz_2","tanz_2","lnsecz_2","sinz","airy","d3_geo","aitoff_aitoffRaw","sincia","sinci","sinx","sinx_2","cosx_2","sin_2y","sin2y","cos2y","sin2x_2","fx","dxdx","dxdy","dydx","dydy","aitoff","armadillo_armadilloRaw","sPhi0","tanPhi0","cosLambda","sinLambda","dxdLambda","dxdPhi","dydLambda","dydPhi","denominator","dPhi","armadillo","stream_","parallel","rotateStream","sphereStream","august_augustRaw","tanPhi","sin3Eta","eta","arcosh","arsinh","cosEta","coshXi","august","baker_sqrt8","baker_phi0","baker_bakerRaw","cosPhi_2","tanPhi_2","baker","berghaus_berghausRaw","lobes","theta0","cotAlpha","berghaus","sr","delta0","hammer_hammerRaw","hammer_hammerQuarticAuthalicRaw","src_hammer","bertin_bertin1953Raw","hammer","bertin","mollweide_mollweideBromleyTheta","cp","cpsinPhi","mollweide_mollweideBromleyRaw","mollweide_mollweideRaw","mollweide","boggs_k","boggs_w","boggs_boggsRaw","boggs","parallel1","sinusoidal_sinusoidalRaw","sinusoidal","bonne_bonneRaw","cotPhi0","bonne","bottomley_bottomleyRaw","sinPsi","bottomley","fraction","bromley_bromleyRaw","bromley","chamberlin_distance","s1","s2","cosdLambda","sindPhi","sindLambda","chamberlin_angle","chamberlin_longitude","chamberlin_chamberlinRaw","p2","beta0","beta1","beta2","chamberlin_pointRadians","chamberlin_chamberlinAfrica","chamberlin_chamberlin","R","collignon_collignonRaw","collignon","craig_craigRaw","craig","craster_sqrt3","craster_crasterRaw","craster","cylindricalEqualArea","cylindricalStereographic_cylindricalStereographicRaw","cylindricalStereographic","eckert1_eckert1Raw","eckert1","eckert2_eckert2Raw","eckert2","eckert3_eckert3Raw","eckert3","eckert4_eckert4Raw","eckert4","eckert5_eckert5Raw","eckert5","eckert6_eckert6Raw","eckert6","eisenlohr_eisenlohrK","eisenlohr_eisenlohrRaw","s0","_0","_1","cos1","vm1v","vp1v","deltatDeltaLambda","deltatDeltaPhi","deltacDeltat","deltacDeltaLambda","deltacDeltaPhi","deltavDeltaLambda","deltavDeltaPhi","deltaxDeltaLambda","deltaxDeltaPhi","deltayDeltaLambda","deltayDeltaPhi","eisenlohr","fahey_faheyK","fahey_faheyRaw","fahey","foucaut_foucautRaw","cosk","foucaut","gilbert_gilbertForward","gilbert_gilbertInvert","src_gilbert","projectionType","gilbert","gingery_gingeryRaw","rho2","r2","rhoCosAlpha","k_","s_","gingery_gingeryLength","gingery_gingeryIntegrate","dTheta","x_halfPi","rhosinAlpha","sinRhoCosAlpha","halfPi_RhoCosAlpha","gingery","cRho","sRho","ginzburgPolyconic","xB","yB","dAlphadLambda","xB2","dxBdPhi","dyBdPhi","dmdPhi","mcosAlpha","msinAlpha","dAlphadPhi","ginzburg4_ginzburg4Raw","ginzburg4","ginzburg5_ginzburg5Raw","ginzburg5","ginzburg6_ginzburg6Raw","ginzburg6","ginzburg8_ginzburg8Raw","lambda4","ginzburg8","ginzburg9_ginzburg9Raw","ginzburg9","square","projectSquare","location","gringorten_gringortenRaw","sLambda","sPhi","a2","secPhi","drdPhi","dp2dPhi","mu","nu","zeta","g2","zetaMug","f2","df","gringorten_gringortenHexadecant","gringorten_gringortenHexadecantInvert","gringorten","elliptic_ellipticJ","twon","elliptic_ellipticF","guyou_guyouRaw","K","psi","at","y_1","guyou_guyouComplexAtan","sinhPsi","cscPhi","cotPhi2","cotLambda2","elliptic_ellipticFi","tn","guyou_guyouComplexDivide","guyou","hammerRetroazimuthal_hammerRetroazimuthalRaw","hammerRetroazimuthal_hammerRetroazimuthalRotation","hammerRetroazimuthal","rotate_","healpix_healpixParallel","healpix_healpixLambert","healpix_healpixRaw","dy1","healpix","hill_hillRaw","Bt","rho0","K2","L2","omega","sinTheta","cosTheta","Bt_Bt1","C","hill","ratio","sinuMollweide_sinuMollweidePhi","sinuMollweide_sinuMollweideY","sinuMollweide_sinuMollweideRaw","sinuMollweide","homolosine_homolosineRaw","homolosine","integrate","tol","maxdepth","fa","fm","fb","adsimp","V0","state","nanEncountered","f1","sl","V1","V2","err","maxDepthCount","hyperelliptical_hyperellipticalRaw","elliptic","G","approx","sinphi","rmin","rmax","hyperelliptical","interrupted_pointEqual","interrupted_interpolateLine","resampled","interrupted","lobe","bound","interrupted_interpolateSphere","boggs_lobes","interrupted_boggs","homolosine_lobes","interrupted_homolosine","mollweide_lobes","interrupted_mollweide","mollweideHemispheres_lobes","mollweideHemispheres","sinuMollweide_lobes","interrupted_sinuMollweide","sinusoidal_lobes","interrupted_sinusoidal","kavrayskiy7_kavrayskiy7Raw","kavrayskiy7","lagrange_lagrangeRaw","lagrange","spacing","larrivee_pi_sqrt2","larrivee_larriveeRaw","sqrtcosPhi","sinPhi_2","sinLambda_6","cosLambda_6","f0","df0dPhi","df0dLambda","df1dPhi","df1dLambda","denom","larrivee","laskowski_laskowskiRaw","lambdaPhi","laskowski","littrow_littrowRaw","y2_1","x2_y2_1","littrow","loximuthal_loximuthalRaw","loximuthal","miller_millerRaw","src_miller","modifiedStereographic_modifiedStereographicRaw","zr","zi","ar","br","deltar","deltai","sinc","modifiedStereographic_alaska","modifiedStereographic_gs48","modifiedStereographic_gs50","modifiedStereographic_miller","modifiedStereographic_lee","modifiedStereographic_modifiedStereographicAlaska","modifiedStereographic_modifiedStereographic","modifiedStereographic_modifiedStereographicGs48","modifiedStereographic_modifiedStereographicGs50","modifiedStereographic_modifiedStereographicMiller","modifiedStereographic_modifiedStereographicLee","coefficients","mtFlatPolarParabolic_sqrt6","mtFlatPolarParabolic_sqrt7","mtFlatPolarParabolic_mtFlatPolarParabolicRaw","mtFlatPolarParabolic","mtFlatPolarQuartic_mtFlatPolarQuarticRaw","sinTheta_2","mtFlatPolarQuartic","mtFlatPolarSinusoidal_mtFlatPolarSinusoidalRaw","mtFlatPolarSinusoidal","naturalEarth2_naturalEarth2Raw","phi6","naturalEarth2","nellHammer_nellHammerRaw","nellHammer","patterson_pattersonK1","patterson_pattersonK2","patterson_pattersonK3","patterson_pattersonK4","patterson_pattersonC1","patterson_pattersonC2","patterson_pattersonC3","patterson_pattersonC4","patterson_pattersonRaw","yc","patterson","polyconic_polyconicRaw","polyconic","matrix_subtract","matrix_angle","matrix_length","matrix_multiply","root","face","node","recurse","edges","polyhedral_faceEdges","shared","found","polyhedral_sharedEdge","polyhedral_pointEqual","children","child","polyhedral_hasInverse","faceInvert","faceDegrees","proj","polyhedral_outline","edge","multiPoint","notPoles","inside","some","octahedron","polyhedral_octahedron","butterfly","faceProjection","faces","polyhedral","collignon_kx","collignon_collignonK","polyhedral_collignon","w5","xyz","waterman_cartesian","hexagon","waterman_spherical","cornerNormals","parents","normals","cosphi","waterman_dot","src_project","project_projectFeature","project_projectFeatureCollection","project_projectGeometry","project_projectGeometryCollection","project_sinkPoint","project_sinkLine","project_sinkPolygon","project_points","project_lines","holes","clockwise","hole","yi","pj","yj","quincuncial","projectQuincuncial","quincuncial_gringorten","peirce","digits","quantizePoints","quantizePolygon","quantizeFeature","rectangularPolyconic_rectangularPolyconicRaw","cotPhi","rectangularPolyconic","robinson_K","robinson_robinsonRaw","di","bx","by","yy","robinson","satellite_satelliteRaw","P","vertical","satellite_satelliteVerticalRaw","cosOmega","sinOmega","tilt","epsilonInverse","stitch_x0","x0e","stitch_x1","x1e","stitch_y0","y0e","stitch_y1","y1e","nonempty","normalizePoint","clampPoint","clamped","clampPoints","extractFragments","rings","pointk","xk","yk","fragmentBefore","stitchFragments","fragment","startFragment","endFragment","stitchFeature","stitchGeometry","times_timesRaw","times","twoPoint","raw","twoPointAzimuthal_twoPointAzimuthalRaw","cosd","twoPointAzimuthal_twoPointAzimuthalUsa","twoPointAzimuthal_twoPointAzimuthal","twoPointEquidistant_twoPointEquidistantRaw","z0","lambdaa","lambdab","z02","tanLambda0","za","zb","cosza","coszb","twoPointEquidistant_twoPointEquidistantUsa","twoPointEquidistant_twoPointEquidistant","vanDerGrinten_vanDerGrintenRaw","A2","P2","P2_A2","G_P2","x2_y2","c3","theta1","vanDerGrinten","vanDerGrinten2_vanDerGrinten2Raw","vanDerGrinten2","vanDerGrinten3_vanDerGrinten3Raw","vanDerGrinten3","vanDerGrinten4_vanDerGrinten4Raw","B2","C2","BC","B_C2","B_3C","D","D2","C_","B_C","F_","sqrtF","vanDerGrinten4","wagner4_A","wagner4_B","wagner4_wagner4Raw","wagner4","wagner6_wagner6Raw","wagner6","wagner7_wagner7Raw","wagner7","wiechel_wiechelRaw","sin1_Phi","wiechel","winkel3_winkel3Raw","F","sin_2phi","sin2phi","cos2phi","sinlambda","coslambda_2","sinlambda_2","sin2lambda_2","dxdlambda","dxdphi","dydlambda","dydphi","dlambda","dphi","winkel3","d3","assign","getD3Projection","projectionName","getWorldTransform","scaleLinear","geoTransform","px","py","getFittedProjection","worldTransform","ThreeJSRenderContext","shapePath","beginPath","startAngle","endAngle","currentPath","noHoles","verticesForShape","zVal","subPaths","curves","curve","isLineCurve","getPoints","ShapePath","geoPath","mapPath","createGeometry","createMesh","lineGeometry","vertices","shape","shapes","ShapeBufferGeometry","extrude","extShapes","ExtrudeBufferGeometry","registerShader","blending","NormalBlending","is","depthTest","depthFunc","LessEqualDepth","depthWrite","fog","linewidth","linecap","linejoin","side","FrontSide","transparent","vertexColors","NoColors","utils","flatShading","shader","npot","repeat","clone","renderers","projectionLib","topojson","src","srcType","oneOf","topologyObject","meshType","loader","FileLoader","differences","diff","load","onSrcLoaded","parseGeoJson","json","topologyObjectName","object3D","getObject3D","removeObject3D","GEO_SRC_LOADED_EVENT"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAZ,EAAAmB,EAAA,SAAAjB,GACAY,OAAAC,eAAAb,EAAA,cAAiDkB,OAAA,KAIjDpB,EAAAqB,EAAA,SAAAlB,GACA,IAAAS,EAAAT,KAAAmB,WACA,WAA2B,OAAAnB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAU,EAAAC,GAAsD,OAAAV,OAAAW,UAAAC,eAAAnB,KAAAgB,EAAAC,IAGtDxB,EAAA2B,EAAA,GAIA3B,IAAA4B,EAAA,yCC5DA,IAAAC,EAAA,WACA,WAAAC,GAGA,SAAAA,IACAC,KAAAC,QAGAF,EAAAL,WACAQ,YAAAH,EACAE,MAAA,WACAD,KAAAH,EACAG,KAAAG,EAAA,GAEAC,IAAA,SAAAC,GACAD,EAAAE,EAAAD,EAAAL,KAAAG,GACAC,EAAAJ,KAAAM,EAAAT,EAAAG,KAAAH,GACAG,KAAAH,EAAAG,KAAAG,GAAAG,EAAAH,EACAH,KAAAH,EAAAS,EAAAH,GAEAI,QAAA,WACA,OAAAP,KAAAH,IAIA,IAAAS,EAAA,IAAAP,EAEA,SAAAK,EAAAN,EAAAU,EAAAC,GACA,IAAAC,EAAAZ,EAAAD,EAAAW,EAAAC,EACAE,EAAAD,EAAAF,EACAI,EAAAF,EAAAC,EACAb,EAAAK,EAAAK,EAAAI,GAAAH,EAAAE,GCtCA,IAAAE,EAAA,KAEAC,EAAAC,KAAAC,GACAC,EAAAH,EAAA,EACAI,EAAAJ,EAAA,EACAK,EAAA,EAAAL,EAEAM,EAAA,IAAAN,EACAO,EAAAP,EAAA,IAEAQ,EAAAP,KAAAO,IACAC,EAAAR,KAAAQ,KACAC,EAAAT,KAAAS,MACAC,EAAAV,KAAAU,IACAC,EAAAX,KAAAW,KACAC,EAAAZ,KAAAY,IAEAC,GADAb,KAAAc,MACAd,KAAAa,KACAE,EAAAf,KAAAe,IACAC,EAAAhB,KAAAgB,IACAC,EAAAjB,KAAAkB,MAAA,SAAAvB,GAA4C,OAAAA,EAAA,IAAAA,EAAA,QAC5CwB,EAAAnB,KAAAmB,KACAC,EAAApB,KAAAoB,IAEA,SAAAC,EAAA1B,GACA,OAAAA,EAAA,IAAAA,GAAA,EAAAI,EAAAC,KAAAqB,KAAA1B,GAGA,SAAA2B,EAAA3B,GACA,OAAAA,EAAA,EAAAO,EAAAP,GAAA,GAAAO,EAAAF,KAAAsB,KAAA3B,GAGA,SAAA4B,EAAA5B,GACA,OAAAA,EAAAqB,EAAArB,EAAA,IAAAA,ECjCA,SAAA6B,KCAA,SAAAC,EAAAC,EAAAC,GACAD,GAAAE,EAAAhD,eAAA8C,EAAAG,OACAD,EAAAF,EAAAG,MAAAH,EAAAC,GAIA,IAAAG,GACAC,QAAA,SAAAtD,EAAAkD,GACAF,EAAAhD,EAAAiD,SAAAC,IAEAK,kBAAA,SAAAvD,EAAAkD,GAEA,IADA,IAAAM,EAAAxD,EAAAwD,SAAA3E,GAAA,EAAAiB,EAAA0D,EAAAC,SACA5E,EAAAiB,GAAAkD,EAAAQ,EAAA3E,GAAAoE,SAAAC,KAIAC,GACAO,OAAA,SAAA1D,EAAAkD,GACAA,EAAAS,UAEAC,MAAA,SAAA5D,EAAAkD,GACAlD,IAAA6D,YACAX,EAAAY,MAAA9D,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAEA+D,WAAA,SAAA/D,EAAAkD,GAEA,IADA,IAAAW,EAAA7D,EAAA6D,YAAAhF,GAAA,EAAAiB,EAAA+D,EAAAJ,SACA5E,EAAAiB,GAAAE,EAAA6D,EAAAhF,GAAAqE,EAAAY,MAAA9D,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAEAgE,WAAA,SAAAhE,EAAAkD,GACAe,EAAAjE,EAAA6D,YAAAX,EAAA,IAEAgB,gBAAA,SAAAlE,EAAAkD,GAEA,IADA,IAAAW,EAAA7D,EAAA6D,YAAAhF,GAAA,EAAAiB,EAAA+D,EAAAJ,SACA5E,EAAAiB,GAAAmE,EAAAJ,EAAAhF,GAAAqE,EAAA,IAEAiB,QAAA,SAAAnE,EAAAkD,GACAkB,EAAApE,EAAA6D,YAAAX,IAEAmB,aAAA,SAAArE,EAAAkD,GAEA,IADA,IAAAW,EAAA7D,EAAA6D,YAAAhF,GAAA,EAAAiB,EAAA+D,EAAAJ,SACA5E,EAAAiB,GAAAsE,EAAAP,EAAAhF,GAAAqE,IAEAoB,mBAAA,SAAAtE,EAAAkD,GAEA,IADA,IAAAqB,EAAAvE,EAAAuE,WAAA1F,GAAA,EAAAiB,EAAAyE,EAAAd,SACA5E,EAAAiB,GAAAkD,EAAAuB,EAAA1F,GAAAqE,KAIA,SAAAe,EAAAJ,EAAAX,EAAAsB,GACA,IAAAC,EAAA5F,GAAA,EAAAiB,EAAA+D,EAAAJ,OAAAe,EAEA,IADAtB,EAAAwB,cACA7F,EAAAiB,GAAA2E,EAAAZ,EAAAhF,GAAAqE,EAAAY,MAAAW,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAvB,EAAAyB,UAGA,SAAAP,EAAAP,EAAAX,GACA,IAAArE,GAAA,EAAAiB,EAAA+D,EAAAJ,OAEA,IADAP,EAAA0B,iBACA/F,EAAAiB,GAAAmE,EAAAJ,EAAAhF,GAAAqE,EAAA,GACAA,EAAA2B,aAGA,ICtDAC,EACAC,EACAC,EACAC,EACAC,EDkDAC,EAAA,SAAAnF,EAAAkD,GACAlD,GAAAqD,EAAAlD,eAAAH,EAAAoD,MACAC,EAAArD,EAAAoD,MAAApD,EAAAkD,GAEAF,EAAAhD,EAAAkD,IC7DAkC,EAAA9E,IAEA+E,EAAA/E,IAOAgF,GACAxB,MAAAf,EACA2B,UAAA3B,EACA4B,QAAA5B,EACA6B,aAAA,WACAQ,EAAA3E,QACA6E,EAAAZ,UAAAa,EACAD,EAAAX,QAAAa,GAEAX,WAAA,WACA,IAAAY,GAAAL,EACAC,EAAAzE,IAAA6E,EAAA,EAAA9D,EAAA8D,KACAjF,KAAAkE,UAAAlE,KAAAmE,QAAAnE,KAAAsD,MAAAf,GAEAY,OAAA,WACA0B,EAAAzE,IAAAe,KAIA,SAAA4D,IACAD,EAAAxB,MAAA4B,EAGA,SAAAF,IACAG,EAAAb,EAAAC,GAGA,SAAAW,EAAAE,EAAAC,GACAP,EAAAxB,MAAA6B,EACAb,EAAAc,EAAAb,EAAAc,EAEAb,EADAY,GAAA/D,EACAoD,EAAAhD,EAAA4D,GADAA,GAAAhE,GACA,EAAAH,GAAAwD,EAAA3C,EAAAsD,GAGA,SAAAF,EAAAC,EAAAC,GAEAA,GADAA,GAAAhE,GACA,EAAAH,EAKA,IAAAoE,GANAF,GAAA/D,GAMAmD,EACAe,EAAAD,GAAA,OACAE,EAAAD,EAAAD,EACAG,EAAAhE,EAAA4D,GACAK,EAAA3D,EAAAsD,GACAM,EAAAjB,EAAAgB,EACAE,EAAAnB,EAAAgB,EAAAE,EAAAlE,EAAA+D,GACAK,EAAAF,EAAAJ,EAAAxD,EAAAyD,GACAZ,EAAAxE,IAAAoB,EAAAqE,EAAAD,IAGApB,EAAAY,EAAAX,EAAAgB,EAAAf,EAAAgB,EAGA,IAAAI,EAAA,SAAAtG,GAGA,OAFAqF,EAAA5E,QACA0E,EAAAnF,EAAAsF,GACA,EAAAD,GCtEA,SAAAkB,EAAAC,GACA,OAAAxE,EAAAwE,EAAA,GAAAA,EAAA,IAAA3D,EAAA2D,EAAA,KAGA,SAAAC,EAAAC,GACA,IAAAd,EAAAc,EAAA,GAAAb,EAAAa,EAAA,GAAAT,EAAAhE,EAAA4D,GACA,OAAAI,EAAAhE,EAAA2D,GAAAK,EAAA1D,EAAAqD,GAAArD,EAAAsD,IAGA,SAAAc,EAAA3F,EAAAC,GACA,OAAAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GAGA,SAAA2F,EAAA5F,EAAAC,GACA,OAAAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,IAIA,SAAA4F,EAAA7F,EAAAC,GACAD,EAAA,IAAAC,EAAA,GAAAD,EAAA,IAAAC,EAAA,GAAAD,EAAA,IAAAC,EAAA,GAGA,SAAA6F,GAAAC,EAAAZ,GACA,OAAAY,EAAA,GAAAZ,EAAAY,EAAA,GAAAZ,EAAAY,EAAA,GAAAZ,GAIA,SAAAa,GAAA7H,GACA,IAAAL,EAAA4D,EAAAvD,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAA,EAAA,IAAAL,EAAAK,EAAA,IAAAL,EAAAK,EAAA,IAAAL,ECzBA,IAAAmI,GAAAC,GAAAC,GAAAC,GACAC,GACAC,GAAAC,GACAC,GAEAC,GACAC,GAFAC,GAAArH,IAIAsH,IACA9D,MAAA+D,GACAnD,UAAAoD,GACAnD,QAAAoD,GACAnD,aAAA,WACAgD,GAAA9D,MAAAkE,GACAJ,GAAAlD,UAAAuD,GACAL,GAAAjD,QAAAuD,GACAP,GAAAlH,QACA6E,EAAAV,gBAEAC,WAAA,WACAS,EAAAT,aACA+C,GAAA9D,MAAA+D,GACAD,GAAAlD,UAAAoD,GACAF,GAAAjD,QAAAoD,GACA3C,EAAA,GAAA6B,KAAAE,GAAA,KAAAD,KAAAE,GAAA,KACAO,GAAAtG,EAAA+F,GAAA,GACAO,IAAAtG,IAAA6F,IAAA,IACAQ,GAAA,GAAAT,GAAAS,GAAA,GAAAP,KAIA,SAAAU,GAAAjC,EAAAC,GACA4B,GAAAU,KAAAT,IAAAT,GAAArB,EAAAuB,GAAAvB,IACAC,EAAAqB,QAAArB,GACAA,EAAAuB,QAAAvB,GAGA,SAAAuC,GAAAxC,EAAAC,GACA,IAAAzF,EAAAqG,GAAAb,EAAA/D,EAAAgE,EAAAhE,IACA,GAAA2F,GAAA,CACA,IAAAa,EAAAzB,EAAAY,GAAApH,GAEAkI,EAAA1B,GADAyB,EAAA,IAAAA,EAAA,MACAA,GACArB,GAAAsB,GACAA,EAAA/B,EAAA+B,GACA,IAGAC,EAHAC,EAAA5C,EAAAyB,GACA5E,EAAA+F,EAAA,OACAC,EAAAH,EAAA,GAAA1G,EAAAa,EAEAiG,EAAA5G,EAAA0G,GAAA,IACAE,GAAAjG,EAAA4E,GAAAoB,KAAAhG,EAAAmD,IACA2C,EAAAD,EAAA,GAAA1G,GACAwF,QAAAmB,GACKG,GAAAjG,EAAA4E,IAAAoB,KAAA,eAAAA,EAAAhG,EAAAmD,IACL2C,GAAAD,EAAA,GAAA1G,GACAsF,QAAAqB,IAEA1C,EAAAqB,QAAArB,GACAA,EAAAuB,QAAAvB,IAEA6C,EACA9C,EAAAyB,GACAsB,GAAA1B,GAAArB,GAAA+C,GAAA1B,GAAAE,SAAAvB,GAEA+C,GAAA/C,EAAAuB,IAAAwB,GAAA1B,GAAAE,MAAAF,GAAArB,GAGAuB,IAAAF,IACArB,EAAAqB,QAAArB,GACAA,EAAAuB,QAAAvB,IAEAA,EAAAyB,GACAsB,GAAA1B,GAAArB,GAAA+C,GAAA1B,GAAAE,SAAAvB,GAEA+C,GAAA/C,EAAAuB,IAAAwB,GAAA1B,GAAAE,MAAAF,GAAArB,QAKA6B,GAAAU,KAAAT,IAAAT,GAAArB,EAAAuB,GAAAvB,IAEAC,EAAAqB,QAAArB,GACAA,EAAAuB,QAAAvB,GACA2B,GAAApH,EAAAiH,GAAAzB,EAGA,SAAAkC,KACAF,GAAA9D,MAAAsE,GAGA,SAAAL,KACAL,GAAA,GAAAT,GAAAS,GAAA,GAAAP,GACAS,GAAA9D,MAAA+D,GACAL,GAAA,KAGA,SAAAQ,GAAApC,EAAAC,GACA,GAAA2B,GAAA,CACA,IAAAgB,EAAA5C,EAAAyB,GACAM,GAAA/G,IAAAkB,EAAA0G,GAAA,IAAAA,KAAA,YAAAA,QAEAlB,GAAA1B,EAAA2B,GAAA1B,EAEAP,EAAAxB,MAAA8B,EAAAC,GACAuC,GAAAxC,EAAAC,GAGA,SAAAoC,KACA3C,EAAAZ,YAGA,SAAAwD,KACAF,GAAAV,GAAAC,IACAjC,EAAAX,UACA7C,EAAA6F,IAAAtG,IAAA4F,KAAAE,GAAA,MACAO,GAAA,GAAAT,GAAAS,GAAA,GAAAP,GACAK,GAAA,KAMA,SAAAmB,GAAAC,EAAAC,GACA,OAAAA,GAAAD,GAAA,EAAAC,EAAA,IAAAA,EAGA,SAAAC,GAAA9H,EAAAC,GACA,OAAAD,EAAA,GAAAC,EAAA,GAGA,SAAA8H,GAAAC,EAAA9H,GACA,OAAA8H,EAAA,IAAAA,EAAA,GAAAA,EAAA,IAAA9H,MAAA8H,EAAA,GAAA9H,EAAA8H,EAAA,IAAAA,EAAA,GAAA9H,EAGA,ICxIA+H,GAAAC,GACAC,GAAAC,GAAAC,GACAC,GAAAC,GAAAC,GACAC,GAAAC,GAAAC,GACAC,GAAAC,GACAC,GAAAC,GAAAC,GDmIAC,GAAA,SAAAC,GACA,IAAArL,EAAAiB,EAAAkB,EAAAC,EAAAkJ,EAAAC,EAAA5B,EAOA,GALApB,GAAAD,KAAAF,GAAAC,GAAAmD,KACA5C,MACAtC,EAAA+E,EAAAtC,IAGA9H,EAAA2H,GAAAhE,OAAA,CAIA,IAHAgE,GAAA6C,KAAAxB,IAGAjK,EAAA,EAAAsL,GAAAnJ,EAAAyG,GAAA,IAA4C5I,EAAAiB,IAAOjB,EAEnDkK,GAAA/H,GADAC,EAAAwG,GAAA5I,IACA,KAAAkK,GAAA/H,EAAAC,EAAA,KACA0H,GAAA3H,EAAA,GAAAC,EAAA,IAAA0H,GAAA3H,EAAA,GAAAA,EAAA,MAAAA,EAAA,GAAAC,EAAA,IACA0H,GAAA1H,EAAA,GAAAD,EAAA,IAAA2H,GAAA3H,EAAA,GAAAA,EAAA,MAAAA,EAAA,GAAAC,EAAA,KAEAkJ,EAAAhC,KAAAnH,EAAAC,GAMA,IAAAmJ,GAAAC,IAAAxL,EAAA,EAAAmC,EAAAmJ,EAAArK,EAAAqK,EAAA1G,OAAA,GAA2E5E,GAAAiB,EAAQkB,EAAAC,IAAApC,EACnFoC,EAAAkJ,EAAAtL,IACA2J,EAAAG,GAAA3H,EAAA,GAAAC,EAAA,KAAAmJ,MAAA5B,EAAAvB,GAAAhG,EAAA,GAAAkG,GAAAnG,EAAA,IAMA,OAFAyG,GAAAC,GAAA,KAEAT,KAAAoD,KAAAnD,KAAAmD,MACAE,sBACAtD,GAAAC,KAAAC,GAAAC,MCnKAoD,IACA7G,OAAAZ,EACAe,MAAA2G,GACA/F,UAAAgG,GACA/F,QAAAgG,GACA/F,aAAA,WACA4F,GAAA9F,UAAAkG,GACAJ,GAAA7F,QAAAkG,IAEAhG,WAAA,WACA2F,GAAA9F,UAAAgG,GACAF,GAAA7F,QAAAgG,KAKA,SAAAF,GAAA7E,EAAAC,GACAD,GAAA/D,EACA,IAAAoE,EAAAhE,EADA4D,GAAAhE,GAEAiJ,GAAA7E,EAAAhE,EAAA2D,GAAAK,EAAA1D,EAAAqD,GAAArD,EAAAsD,IAGA,SAAAiF,GAAA5J,EAAAL,EAAAkK,GAEA5B,KAAAjI,EAAAiI,MADAF,GAEAG,KAAAvI,EAAAuI,IAAAH,GACAI,KAAA0B,EAAA1B,IAAAJ,GAGA,SAAAyB,KACAF,GAAA1G,MAAAkH,GAGA,SAAAA,GAAApF,EAAAC,GACAD,GAAA/D,EACA,IAAAoE,EAAAhE,EADA4D,GAAAhE,GAEAiI,GAAA7D,EAAAhE,EAAA2D,GACAmE,GAAA9D,EAAA1D,EAAAqD,GACAoE,GAAAzH,EAAAsD,GACA2E,GAAA1G,MAAAmH,GACAH,GAAAhB,GAAAC,GAAAC,IAGA,SAAAiB,GAAArF,EAAAC,GACAD,GAAA/D,EACA,IAAAoE,EAAAhE,EADA4D,GAAAhE,GAEAX,EAAA+E,EAAAhE,EAAA2D,GACA/E,EAAAoF,EAAA1D,EAAAqD,GACAmF,EAAAxI,EAAAsD,GACAqF,EAAAlJ,EAAAU,GAAAwI,EAAAnB,GAAAgB,EAAAf,GAAAnJ,GAAAqK,KAAAlB,GAAA9I,EAAA4I,GAAAiB,GAAAG,KAAApB,GAAAjJ,EAAAkJ,GAAA7I,GAAAgK,GAAApB,GAAA5I,EAAA6I,GAAAlJ,EAAAmJ,GAAAe,GACA7B,IAAAgC,EACA5B,IAAA4B,GAAApB,OAAA5I,IACAqI,IAAA2B,GAAAnB,OAAAlJ,IACA2I,IAAA0B,GAAAlB,OAAAe,IACAD,GAAAhB,GAAAC,GAAAC,IAGA,SAAAW,KACAH,GAAA1G,MAAA2G,GAKA,SAAAG,KACAJ,GAAA1G,MAAAqH,GAGA,SAAAN,KACAO,GAAAxB,GAAAC,IACAW,GAAA1G,MAAA2G,GAGA,SAAAU,GAAAvF,EAAAC,GACA+D,GAAAhE,EAAAiE,GAAAhE,EACAD,GAAA/D,EAAAgE,GAAAhE,EACA2I,GAAA1G,MAAAsH,GACA,IAAAnF,EAAAhE,EAAA4D,GACAiE,GAAA7D,EAAAhE,EAAA2D,GACAmE,GAAA9D,EAAA1D,EAAAqD,GACAoE,GAAAzH,EAAAsD,GACAiF,GAAAhB,GAAAC,GAAAC,IAGA,SAAAoB,GAAAxF,EAAAC,GACAD,GAAA/D,EACA,IAAAoE,EAAAhE,EADA4D,GAAAhE,GAEAX,EAAA+E,EAAAhE,EAAA2D,GACA/E,EAAAoF,EAAA1D,EAAAqD,GACAmF,EAAAxI,EAAAsD,GACAwF,EAAAtB,GAAAgB,EAAAf,GAAAnJ,EACAyK,EAAAtB,GAAA9I,EAAA4I,GAAAiB,EACAQ,EAAAzB,GAAAjJ,EAAAkJ,GAAA7I,EACAjC,EAAAyD,EAAA2I,IAAAC,IAAAC,KACAL,EAAArI,EAAA5D,GACAoH,EAAApH,IAAAiM,EAAAjM,EACAwK,IAAApD,EAAAgF,EACA3B,IAAArD,EAAAiF,EACA3B,IAAAtD,EAAAkF,EACArC,IAAAgC,EACA5B,IAAA4B,GAAApB,OAAA5I,IACAqI,IAAA2B,GAAAnB,OAAAlJ,IACA2I,IAAA0B,GAAAlB,OAAAe,IACAD,GAAAhB,GAAAC,GAAAC,oBAGAhK,GACAiJ,GAAAC,GACAC,GAAAC,GAAAC,GACAC,GAAAC,GAAAC,GACAC,GAAAC,GAAAC,GAAA,EACAxE,EAAAnF,EAAAwK,IAEA,IAAAtJ,EAAAuI,GACA5I,EAAA6I,GACAqB,EAAApB,GACA1K,EAAAiC,IAAAL,IAAAkK,IAGA,OAAA9L,ENhIA,QMiIAiC,EAAAoI,GAAAzI,EAAA0I,GAAAwB,EAAAvB,GAEAN,GAAA7H,IAAAH,EAAAiI,GAAAtI,EAAAuI,GAAA2B,EAAA1B,KACApK,EAAAiC,IAAAL,IAAAkK,KNpIA,QMsIAR,UAGAvI,EAAAnB,EAAAK,GAAAU,EAAAiB,EAAAkI,EAAArI,EAAAzD,IAAA2C,IC1IA4J,GAAA,SAAAtK,GACA,kBACA,OAAAA,ICFAuK,GAAA,SAAAzK,EAAAC,GAEA,SAAAwK,EAAAvK,EAAAL,GACA,OAAAK,EAAAF,EAAAE,EAAAL,GAAAI,EAAAC,EAAA,GAAAA,EAAA,IAOA,OAJAF,EAAA0K,QAAAzK,EAAAyK,SAAAD,EAAAC,OAAA,SAAAxK,EAAAL,GACA,OAAAK,EAAAD,EAAAyK,OAAAxK,EAAAL,KAAAG,EAAA0K,OAAAxK,EAAA,GAAAA,EAAA,MAGAuK,GCPA,SAAAE,GAAA/F,EAAAC,GACA,OAAAD,EAAAtE,EAAAsE,EAAAjE,EAAAiE,GAAAtE,EAAAsE,EAAAjE,EAAAiE,EAAAC,GAKA,SAAA+F,GAAAC,EAAAC,EAAAC,GACA,OAAAF,GAAAlK,GAAAmK,GAAAC,EAAAN,GAAAO,GAAAH,GAAAI,GAAAH,EAAAC,IACAC,GAAAH,GACAC,GAAAC,EAAAE,GAAAH,EAAAC,GACAJ,GAGA,SAAAO,GAAAL,GACA,gBAAAjG,EAAAC,GACA,QAAAD,GAAAiG,GAAAvK,EAAAsE,EAAAjE,EAAAiE,GAAAtE,EAAAsE,EAAAjE,EAAAiE,EAAAC,IAIA,SAAAmG,GAAAH,GACA,IAAAM,EAAAD,GAAAL,GAEA,OADAM,EAAAT,OAAAQ,IAAAL,GACAM,EAGA,SAAAF,GAAAH,EAAAC,GACA,IAAAK,EAAAnK,EAAA6J,GACAO,EAAA9J,EAAAuJ,GACAQ,EAAArK,EAAA8J,GACAQ,EAAAhK,EAAAwJ,GAEA,SAAAI,EAAAvG,EAAAC,GACA,IAAAI,EAAAhE,EAAA4D,GACA3E,EAAAe,EAAA2D,GAAAK,EACApF,EAAA0B,EAAAqD,GAAAK,EACA8E,EAAAxI,EAAAsD,GACAM,EAAA4E,EAAAqB,EAAAlL,EAAAmL,EACA,OACArK,EAAAnB,EAAAyL,EAAAnG,EAAAoG,EAAArL,EAAAkL,EAAArB,EAAAsB,GACAxJ,EAAAsD,EAAAmG,EAAAzL,EAAA0L,IAgBA,OAZAJ,EAAAT,OAAA,SAAA9F,EAAAC,GACA,IAAAI,EAAAhE,EAAA4D,GACA3E,EAAAe,EAAA2D,GAAAK,EACApF,EAAA0B,EAAAqD,GAAAK,EACA8E,EAAAxI,EAAAsD,GACAM,EAAA4E,EAAAuB,EAAAzL,EAAA0L,EACA,OACAvK,EAAAnB,EAAAyL,EAAAvB,EAAAwB,EAAArL,EAAAkL,EAAAjG,EAAAkG,GACAxJ,EAAAsD,EAAAiG,EAAAlL,EAAAmL,KAIAF,EAnDAR,GAAAD,OAAAC,GAsDA,IAAAa,GAAA,SAAAC,GAGA,SAAAC,EAAA7I,GAEA,OADAA,EAAA4I,EAAA5I,EAAA,GAAAhC,EAAAgC,EAAA,GAAAhC,IACA,IAAAD,EAAAiC,EAAA,IAAAjC,EAAAiC,EAQA,OAZA4I,EAAAb,GAAAa,EAAA,GAAA5K,EAAA4K,EAAA,GAAA5K,EAAA4K,EAAAhJ,OAAA,EAAAgJ,EAAA,GAAA5K,EAAA,GAOA6K,EAAAhB,OAAA,SAAA7H,GAEA,OADAA,EAAA4I,EAAAf,OAAA7H,EAAA,GAAAhC,EAAAgC,EAAA,GAAAhC,IACA,IAAAD,EAAAiC,EAAA,IAAAjC,EAAAiC,GAGA6I,GCpEA,SAAAC,GAAAzJ,EAAA0J,EAAApE,EAAAqE,EAAAC,EAAAC,GACA,GAAAvE,EAAA,CACA,IAAAwE,EAAA/K,EAAA2K,GACAK,EAAA1K,EAAAqK,GACAM,EAAAL,EAAArE,EACA,MAAAsE,GACAA,EAAAF,EAAAC,EAAAlL,EACAoL,EAAAH,EAAAM,EAAA,IAEAJ,EAAAK,GAAAH,EAAAF,GACAC,EAAAI,GAAAH,EAAAD,IACAF,EAAA,EAAAC,EAAAC,EAAAD,EAAAC,KAAAD,GAAAD,EAAAlL,IAEA,QAAAmC,EAAAnD,EAAAmM,EAAyBD,EAAA,EAAAlM,EAAAoM,EAAApM,EAAAoM,EAAiCpM,GAAAuM,EAC1DpJ,EAAAyC,GAAAyG,GAAAC,EAAAhL,EAAAtB,IAAAsM,EAAA1K,EAAA5B,KACAuC,EAAAY,QAAA,GAAAA,EAAA,KAKA,SAAAqJ,GAAAH,EAAAlJ,IACAA,EAAA2C,EAAA3C,IAAA,IAAAkJ,EACAhG,GAAAlD,GACA,IAAA8I,EAAAhK,GAAAkB,EAAA,IACA,SAAAA,EAAA,MAAA8I,KAAAjL,EAAAN,GAAAM,EAGA,IAAAyL,GAAA,WACA,IAGAC,EACAZ,EAJAa,EAAA9B,IAAA,MACAoB,EAAApB,GAAA,IACA+B,EAAA/B,GAAA,GAGAtI,GAAgBY,MAEhB,SAAA5C,EAAAL,GACAwM,EAAAlF,KAAAjH,EAAAuL,EAAAvL,EAAAL,IACAK,EAAA,IAAAU,EAAAV,EAAA,IAAAU,IAGA,SAAA4L,IACA,IAAAtO,EAAAoO,EAAAG,MAAAjN,KAAAkN,WACA9N,EAAAgN,EAAAa,MAAAjN,KAAAkN,WAAA7L,EACAzB,EAAAmN,EAAAE,MAAAjN,KAAAkN,WAAA7L,EAMA,OALAwL,KACAZ,EAAAb,IAAA1M,EAAA,GAAA2C,GAAA3C,EAAA,GAAA2C,EAAA,GAAA6J,OACAiB,GAAAzJ,EAAAtD,EAAAQ,EAAA,GACAlB,GAASkE,KAAA,UAAAS,aAAAwJ,IACTA,EAAAZ,EAAA,KACAvN,EAeA,OAZAsO,EAAAF,OAAA,SAAAK,GACA,OAAAD,UAAAjK,QAAA6J,EAAA,mBAAAK,IAAAnC,KAAAmC,EAAA,IAAAA,EAAA,KAAAH,GAAAF,GAGAE,EAAAZ,OAAA,SAAAe,GACA,OAAAD,UAAAjK,QAAAmJ,EAAA,mBAAAe,IAAAnC,IAAAmC,GAAAH,GAAAZ,GAGAY,EAAAD,UAAA,SAAAI,GACA,OAAAD,UAAAjK,QAAA8J,EAAA,mBAAAI,IAAAnC,IAAAmC,GAAAH,GAAAD,GAGAC,GCpEAI,GAAA,WACA,IACAC,EADAC,KAEA,OACAhK,MAAA,SAAA5C,EAAAL,GACAgN,EAAA1F,MAAAjH,EAAAL,KAEA6D,UAAA,WACAoJ,EAAA3F,KAAA0F,OAEAlJ,QAAA5B,EACAgL,OAAA,WACAD,EAAArK,OAAA,GAAAqK,EAAA3F,KAAA2F,EAAAE,MAAAC,OAAAH,EAAAI,WAEAC,OAAA,WACA,IAAAA,EAAAL,EAGA,OAFAA,KACAD,EAAA,KACAM,KClBAC,GAAA,SAAApN,EAAAC,GACA,OAAAa,EAAAd,EAAA,GAAAC,EAAA,IAAAI,GAAAS,EAAAd,EAAA,GAAAC,EAAA,IAAAI,GCDA,SAAAgN,GAAAvK,EAAAwK,EAAAC,EAAAC,GACAhO,KAAAU,EAAA4C,EACAtD,KAAAuK,EAAAuD,EACA9N,KAAAlB,EAAAiP,EACA/N,KAAAiO,EAAAD,EACAhO,KAAA6F,GAAA,EACA7F,KAAAV,EAAAU,KAAAJ,EAAA,KAMA,IAAA2N,GAAA,SAAAW,EAAAC,EAAAC,EAAAC,EAAA3L,GACA,IAEArE,EACAiB,EAHAgP,KACAC,KAwBA,GApBAL,EAAAM,QAAA,SAAAC,GACA,MAAAnP,EAAAmP,EAAAxL,OAAA,QACA,IAAA3D,EAAAoB,EAAAgO,EAAAD,EAAA,GAAAE,EAAAF,EAAAnP,GAKA,GAAAsO,GAAAc,EAAAC,GAAA,CAEA,IADAjM,EAAAwB,YACA7F,EAAA,EAAiBA,EAAAiB,IAAOjB,EAAAqE,EAAAY,OAAAoL,EAAAD,EAAApQ,IAAA,GAAAqQ,EAAA,IACxBhM,EAAAyB,eAIAmK,EAAA3G,KAAAjH,EAAA,IAAAmN,GAAAa,EAAAD,EAAA,UACAF,EAAA5G,KAAAjH,EAAA5B,EAAA,IAAA+O,GAAAa,EAAA,KAAAhO,GAAA,IACA4N,EAAA3G,KAAAjH,EAAA,IAAAmN,GAAAc,EAAAF,EAAA,UACAF,EAAA5G,KAAAjH,EAAA5B,EAAA,IAAA+O,GAAAc,EAAA,KAAAjO,GAAA,OAGA4N,EAAArL,OAAA,CAMA,IAJAsL,EAAAzE,KAAAqE,GACAS,GAAAN,GACAM,GAAAL,GAEAlQ,EAAA,EAAAiB,EAAAiP,EAAAtL,OAA8B5E,EAAAiB,IAAOjB,EACrCkQ,EAAAlQ,GAAA4P,EAAAG,KAOA,IAJA,IACAN,EACAxK,EAFAuL,EAAAP,EAAA,KAIA,CAIA,IAFA,IAAAQ,EAAAD,EACAE,GAAA,EACAD,EAAAjJ,GAAA,IAAAiJ,IAAAxP,KAAAuP,EAAA,OACAf,EAAAgB,EAAAvE,EACA7H,EAAAwB,YACA,GAEA,GADA4K,EAAAjJ,EAAAiJ,EAAAhQ,EAAA+G,GAAA,EACAiJ,EAAAb,EAAA,CACA,GAAAc,EACA,IAAA1Q,EAAA,EAAAiB,EAAAwO,EAAA7K,OAAwC5E,EAAAiB,IAAOjB,EAAAqE,EAAAY,SAAAwK,EAAAzP,IAAA,GAAAiF,EAAA,SAE/C+K,EAAAS,EAAApO,EAAAoO,EAAAxP,EAAAoB,EAAA,EAAAgC,GAEAoM,IAAAxP,MACO,CACP,GAAAyP,EAEA,IADAjB,EAAAgB,EAAAlP,EAAA2K,EACAlM,EAAAyP,EAAA7K,OAAA,EAAqC5E,GAAA,IAAQA,EAAAqE,EAAAY,SAAAwK,EAAAzP,IAAA,GAAAiF,EAAA,SAE7C+K,EAAAS,EAAApO,EAAAoO,EAAAlP,EAAAc,GAAA,EAAAgC,GAEAoM,IAAAlP,EAGAkO,GADAgB,IAAAhQ,GACAyL,EACAwE,YACKD,EAAAjJ,GACLnD,EAAAyB,aAIA,SAAAyK,GAAAI,GACA,GAAA1P,EAAA0P,EAAA/L,OAAA,CAKA,IAJA,IAAA3D,EAGAmB,EAFApC,EAAA,EACAmC,EAAAwO,EAAA,KAEA3Q,EAAAiB,GACAkB,EAAAlB,EAAAmB,EAAAuO,EAAA3Q,GACAoC,EAAAb,EAAAY,EACAA,EAAAC,EAEAD,EAAAlB,EAAAmB,EAAAuO,EAAA,GACAvO,EAAAb,EAAAY,GC/FA,IAAAyO,GAAAnP,IAEAoP,GAAA,SAAAC,EAAA7L,GACA,IAAA8B,EAAA9B,EAAA,GACA+B,EAAA/B,EAAA,GACAoC,EAAA3D,EAAAsD,GACAwC,GAAA9F,EAAAqD,IAAA3D,EAAA2D,GAAA,GACAgK,EAAA,EACAC,EAAA,EAEAJ,GAAAhP,QAEA,IAAAyF,EAAAL,EAAApE,EAAAJ,GACA,IAAA6E,IAAAL,GAAApE,EAAAJ,GAEA,QAAAxC,EAAA,EAAAiB,EAAA6P,EAAAlM,OAAqC5E,EAAAiB,IAAOjB,EAC5C,GAAAI,GAAAoO,EAAAsC,EAAA9Q,IAAA4E,OASA,IARA,IAAA4J,EACApO,EACA6Q,EAAAzC,EAAApO,EAAA,GACA2J,EAAAkH,EAAA,GACAC,EAAAD,EAAA,KAAApO,EACAsO,EAAAzN,EAAAwN,GACAE,EAAAhO,EAAA8N,GAEAG,EAAA,EAAmBA,EAAAjR,IAAOiR,EAAAtH,EAAAC,EAAAmH,EAAAG,EAAAF,EAAAG,EAAAN,EAAAO,EAAA,CAC1B,IAAAA,EAAAhD,EAAA6C,GACArH,EAAAwH,EAAA,GACAC,EAAAD,EAAA,KAAA3O,EACAyO,EAAA5N,EAAA+N,GACAF,EAAAnO,EAAAqO,GACA9H,EAAAK,EAAAD,EACAnG,EAAA+F,GAAA,OACA+H,EAAA9N,EAAA+F,EACAE,EAAA6H,EAAAjP,EACA6E,EAAA6J,EAAAG,EAOA,GALAV,GAAA7O,IAAAoB,EAAAmE,EAAA1D,EAAAF,EAAAgO,GAAAN,EAAAG,EAAAjK,EAAAlE,EAAAsO,KACAX,GAAAlH,EAAAF,EAAA/F,EAAAd,EAAA6G,EAIAE,EAAAE,GAAAhD,EAAAiD,GAAAjD,EAAA,CACA,IAAA4K,EAAA5J,EAAAH,EAAAqJ,GAAArJ,EAAA4J,IACArJ,GAAAwJ,GACA,IAAAC,EAAA7J,EAAAyB,EAAAmI,GACAxJ,GAAAyJ,GACA,IAAAC,GAAAhI,EAAAF,GAAA,QAAA3F,EAAA4N,EAAA,KACA5K,EAAA6K,GAAA7K,IAAA6K,IAAAF,EAAA,IAAAA,EAAA,OACAX,GAAAnH,EAAAF,GAAA,SAiBA,OAAAoH,GAAAvO,GAAAuO,EAAAvO,GAAAoO,IAAApO,GAAA,EAAAwO,WChEAc,GAAA,SAAAC,EAAAC,EAAAhC,EAAAQ,GACA,gBAAAyB,GACA,IAIAnB,EACAjB,EACArB,EANAQ,EAAAgD,EAAAC,GACAC,EAAAnD,KACAoD,EAAAH,EAAAE,GACAE,GAAA,EAKAlC,GACAjL,QACAY,YACAC,UACAC,aAAA,WACAmK,EAAAjL,MAAAoN,EACAnC,EAAArK,UAAAyM,EACApC,EAAApK,QAAAyM,EACA1C,KACAiB,MAEA9K,WAAA,WACAkK,EAAAjL,QACAiL,EAAArK,YACAqK,EAAApK,UACA+J,EAAAnP,OAAA8R,GAAA,EAAA9R,CAAAmP,GACA,IAAAE,EAAAc,GAAAC,EAAAN,GACAX,EAAAjL,QACAwN,IAAAH,EAAAlM,eAAAqM,GAAA,GACAlD,GAAAW,EAAA4C,GAAA1C,EAAAC,EAAAiC,IACSlC,IACTqC,IAAAH,EAAAlM,eAAAqM,GAAA,GACAH,EAAApM,YACAmK,EAAA,YAAAiC,GACAA,EAAAnM,WAEAsM,IAAAH,EAAAjM,aAAAoM,GAAA,GACAvC,EAAAiB,EAAA,MAEAhM,OAAA,WACAmN,EAAAlM,eACAkM,EAAApM,YACAmK,EAAA,YAAAiC,GACAA,EAAAnM,UACAmM,EAAAjM,eAIA,SAAAf,EAAA8B,EAAAC,GACA+K,EAAAhL,EAAAC,IAAAiL,EAAAhN,MAAA8B,EAAAC,GAGA,SAAA0L,EAAA3L,EAAAC,GACAgI,EAAA/J,MAAA8B,EAAAC,GAGA,SAAAnB,IACAqK,EAAAjL,MAAAyN,EACA1D,EAAAnJ,YAGA,SAAAC,IACAoK,EAAAjL,QACA+J,EAAAlJ,UAGA,SAAAuM,EAAAtL,EAAAC,GACAwH,EAAAlF,MAAAvC,EAAAC,IACAmL,EAAAlN,MAAA8B,EAAAC,GAGA,SAAAsL,IACAH,EAAAtM,YACA2I,KAGA,SAAA+D,IACAF,EAAA7D,EAAA,MAAAA,EAAA,OACA2D,EAAArM,UAEA,IAEA9F,EAAAI,EACAgQ,EACAnL,EAJA0N,EAAAR,EAAAQ,QACAC,EAAAV,EAAA5C,SACArO,EAAA2R,EAAAhO,OAQA,GAJA4J,EAAAW,MACA2B,EAAAxH,KAAAkF,GACAA,EAAA,KAEAvN,EAGA,KAAA0R,GAEA,IAAAvS,GADAgQ,EAAAwC,EAAA,IACAhO,OAAA,MAGA,IAFAwN,IAAAH,EAAAlM,eAAAqM,GAAA,GACAH,EAAApM,YACA7F,EAAA,EAAqBA,EAAAI,IAAOJ,EAAAiS,EAAAhN,SAAAmL,EAAApQ,IAAA,GAAAiF,EAAA,IAC5BgN,EAAAnM,gBAOA7E,EAAA,KAAA0R,GAAAC,EAAAtJ,KAAAsJ,EAAAzD,MAAAC,OAAAwD,EAAAvD,UAEAQ,EAAAvG,KAAAsJ,EAAAC,OAAAC,KAGA,OAAA5C,IAIA,SAAA4C,GAAA1C,GACA,OAAAA,EAAAxL,OAAA,EAKA,SAAA6N,GAAAtQ,EAAAC,GACA,QAAAD,IAAAE,GAAA,KAAAF,EAAA,GAAAS,EAAAJ,EAAAI,EAAAT,EAAA,MACAC,IAAAC,GAAA,KAAAD,EAAA,GAAAQ,EAAAJ,EAAAI,EAAAR,EAAA,WC9HA0P,GACA,WAAc,UASd,SAAAzN,GACA,IAGAsO,EAHA5I,EAAA2B,IACAwF,EAAAxF,IACAqH,EAAArH,IAGA,OACA7F,UAAA,WACAxB,EAAAwB,YACA8M,EAAA,GAEA1N,MAAA,SAAA+E,EAAAyH,GACA,IAAAuB,EAAAhJ,EAAA,EAAAvH,KACAkH,EAAA1G,EAAA+G,EAAAD,GACA9G,EAAA0G,EAAAlH,GAAAD,GACA6B,EAAAY,MAAA8E,EAAAmH,KAAAO,GAAA,IAAA7O,MACAyB,EAAAY,MAAA8N,EAAA7B,GACA7M,EAAAyB,UACAzB,EAAAwB,YACAxB,EAAAY,MAAA+N,EAAA9B,GACA7M,EAAAY,MAAA+E,EAAAkH,GACAyB,EAAA,GACOI,IAAAC,GAAArJ,GAAAlH,IACPQ,EAAA8G,EAAAgJ,GAAAvQ,IAAAuH,GAAAgJ,EAAAvQ,GACAS,EAAA+G,EAAAgJ,GAAAxQ,IAAAwH,GAAAgJ,EAAAxQ,GACA0O,EAoBA,SAAAnH,EAAAmH,EAAAlH,EAAAyH,GACA,IAAAL,EACAG,EACA0B,EAAAvP,EAAAqG,EAAAC,GACA,OAAA/G,EAAAgQ,GAAAzQ,EACAU,GAAAQ,EAAAwN,IAAAK,EAAAnO,EAAAqO,IAAA/N,EAAAsG,GACAtG,EAAA+N,IAAAL,EAAAhO,EAAA8N,IAAAxN,EAAAqG,KACAqH,EAAAG,EAAA0B,KACA/B,EAAAO,GAAA,EA5BAyB,CAAAnJ,EAAAmH,EAAAlH,EAAAyH,GACApN,EAAAY,MAAA8N,EAAA7B,GACA7M,EAAAyB,UACAzB,EAAAwB,YACAxB,EAAAY,MAAA+N,EAAA9B,GACAyB,EAAA,GAEAtO,EAAAY,MAAA8E,EAAAC,EAAAkH,EAAAO,GACAsB,EAAAC,GAEAlN,QAAA,WACAzB,EAAAyB,UACAiE,EAAAmH,EAAAxF,KAEAiH,MAAA,WACA,SAAAA,KAgBA,SAAAQ,EAAAC,EAAApF,EAAA3J,GACA,IAAA2C,EACA,SAAAmM,EACAnM,EAAAgH,EAAApL,EACAyB,EAAAY,OAAAxC,EAAAuE,GACA3C,EAAAY,MAAA,EAAA+B,GACA3C,EAAAY,MAAAxC,EAAAuE,GACA3C,EAAAY,MAAAxC,EAAA,GACA4B,EAAAY,MAAAxC,GAAAuE,GACA3C,EAAAY,MAAA,GAAA+B,GACA3C,EAAAY,OAAAxC,GAAAuE,GACA3C,EAAAY,OAAAxC,EAAA,GACA4B,EAAAY,OAAAxC,EAAAuE,QACG,GAAA/D,EAAAkQ,EAAA,GAAAC,EAAA,IAAA5Q,EAAA,CACH,IAAAuE,EAAAoM,EAAA,GAAAC,EAAA,GAAA3Q,KACAuE,EAAAgH,EAAAjH,EAAA,EACA1C,EAAAY,OAAA8B,EAAAC,GACA3C,EAAAY,MAAA,EAAA+B,GACA3C,EAAAY,MAAA8B,EAAAC,QAEA3C,EAAAY,MAAAmO,EAAA,GAAAA,EAAA,OAlFA3Q,GAAAG,ICDA,IAAAyQ,GAAA,SAAAtF,GACA,IAAAuF,EAAAlQ,EAAA2K,GACApE,EAAA,EAAA3G,EACAuQ,EAAAD,EAAA,EACAE,EAAAvQ,EAAAqQ,GAAA9Q,EAMA,SAAAiR,EAAA1M,EAAAC,GACA,OAAA5D,EAAA2D,GAAA3D,EAAA4D,GAAAsM,EAuFA,SAAAI,EAAAvR,EAAAC,EAAAuR,GACA,IAKAC,GAAA,OACAC,EAAA9L,EANAH,EAAAzF,GACAyF,EAAAxF,IAMA0R,EAAAhM,EAAA+L,KACAE,EAAAF,EAAA,GACAG,EAAAF,EAAAC,IAGA,IAAAC,EAAA,OAAAL,GAAAxR,EAEA,IAAA8R,EAAAX,EAAAQ,EAAAE,EACAE,GAAAZ,EAAAS,EAAAC,EACAG,EAAApM,EAAA6L,EAAAC,GACAO,EAAAnM,GAAA2L,EAAAK,GAEAjM,EAAAoM,EADAnM,GAAA4L,EAAAK,IAIA,IAAA3M,EAAA4M,EACA9H,EAAAvE,EAAAsM,EAAA7M,GACA8M,EAAAvM,EAAAP,KACA+M,EAAAjI,IAAAgI,GAAAvM,EAAAsM,KAAA,GAEA,KAAAE,EAAA,IAEA,IAAAxS,EAAA+B,EAAAyQ,GACAC,EAAAtM,GAAAV,IAAA8E,EAAAvK,GAAAuS,GAIA,GAHArM,EAAAuM,EAAAH,GACAG,EAAA7M,EAAA6M,IAEAZ,EAAA,OAAAY,EAGA,IAIArI,EAJAnC,EAAA5H,EAAA,GACA6H,EAAA5H,EAAA,GACA8O,EAAA/O,EAAA,GACAsP,EAAArP,EAAA,GAGA4H,EAAAD,IAAAmC,EAAAnC,IAAAC,IAAAkC,GAEA,IAAAvC,EAAAK,EAAAD,EACAyK,EAAAvR,EAAA0G,EAAAlH,GAAAD,EAMA,IAHAgS,GAAA/C,EAAAP,IAAAhF,EAAAgF,IAAAO,IAAAvF,GAFAsI,GAAA7K,EAAAnH,EAMAgS,EACAtD,EAAAO,EAAA,EAAA8C,EAAA,IAAAtR,EAAAsR,EAAA,GAAAxK,GAAAvH,EAAA0O,EAAAO,GACAP,GAAAqD,EAAA,IAAAA,EAAA,IAAA9C,EACA9H,EAAAlH,GAAAsH,GAAAwK,EAAA,IAAAA,EAAA,IAAAvK,GAAA,CACA,IAAAyK,EAAAxM,GAAAV,IAAA8E,EAAAvK,GAAAuS,GAEA,OADArM,EAAAyM,EAAAL,IACAG,EAAA7M,EAAA+M,MAMA,SAAAC,EAAA3N,EAAAC,GACA,IAAAjG,EAAAwS,EAAAxF,EAAAtL,EAAAsL,EACA2G,EAAA,EAKA,OAJA3N,GAAAhG,EAAA2T,GAAA,EACA3N,EAAAhG,IAAA2T,GAAA,GACA1N,GAAAjG,EAAA2T,GAAA,EACA1N,EAAAjG,IAAA2T,GAAA,GACAA,EAGA,OAAA5C,GAAA2B,EA5JA,SAAApP,GACA,IAAA4M,EACA0D,EACAC,EACAC,EACAlC,EACA,OACA9M,UAAA,WACAgP,EAAAD,GAAA,EACAjC,EAAA,GAEA1N,MAAA,SAAA8B,EAAAC,GACA,IACA8N,EADAtD,GAAAzK,EAAAC,GAEAQ,EAAAiM,EAAA1M,EAAAC,GACA3G,EAAAkT,EACA/L,EAAA,EAAAkN,EAAA3N,EAAAC,GACAQ,EAAAkN,EAAA3N,KAAA,EAAAtE,MAAAuE,GAAA,EAYA,IAXAiK,IAAA4D,EAAAD,EAAApN,IAAAnD,EAAAwB,YAGA2B,IAAAoN,MACAE,EAAApB,EAAAzC,EAAAO,KACAjC,GAAA0B,EAAA6D,IAAAvF,GAAAiC,EAAAsD,MACAtD,EAAA,IAAAhP,EACAgP,EAAA,IAAAhP,EACAgF,EAAAiM,EAAAjC,EAAA,GAAAA,EAAA,KAGAhK,IAAAoN,EACAjC,EAAA,EACAnL,GAEAnD,EAAAwB,YACAiP,EAAApB,EAAAlC,EAAAP,GACA5M,EAAAY,MAAA6P,EAAA,GAAAA,EAAA,MAGAA,EAAApB,EAAAzC,EAAAO,GACAnN,EAAAY,MAAA6P,EAAA,GAAAA,EAAA,IACAzQ,EAAAyB,WAEAmL,EAAA6D,OACS,GAAAtB,GAAAvC,GAAAsC,EAAA/L,EAAA,CACT,IAAA1F,EAGAzB,EAAAsU,KAAA7S,EAAA4R,EAAAlC,EAAAP,GAAA,MACA0B,EAAA,EACAY,GACAlP,EAAAwB,YACAxB,EAAAY,MAAAnD,EAAA,MAAAA,EAAA,OACAuC,EAAAY,MAAAnD,EAAA,MAAAA,EAAA,OACAuC,EAAAyB,YAEAzB,EAAAY,MAAAnD,EAAA,MAAAA,EAAA,OACAuC,EAAAyB,UACAzB,EAAAwB,YACAxB,EAAAY,MAAAnD,EAAA,MAAAA,EAAA,UAIA0F,GAAAyJ,GAAA1B,GAAA0B,EAAAO,IACAnN,EAAAY,MAAAuM,EAAA,GAAAA,EAAA,IAEAP,EAAAO,EAAAoD,EAAApN,EAAAmN,EAAAtU,GAEAyF,QAAA,WACA8O,GAAAvQ,EAAAyB,UACAmL,EAAA,MAIA0B,MAAA,WACA,OAAAA,GAAAkC,GAAAD,IAAA,KAtFA,SAAAzB,EAAAC,EAAApF,EAAA3J,GACAyJ,GAAAzJ,EAAA0J,EAAApE,EAAAqE,EAAAmF,EAAAC,IAuKAG,GAAA,GAAAxF,KAAAtL,EAAAsL,EAAAtL,KCpLAsS,GAAA,SAAA5S,EAAAC,EAAA4S,EAAAC,EAAAC,EAAAC,GACA,IAQApU,EARAqU,EAAAjT,EAAA,GACAkT,EAAAlT,EAAA,GAGA8L,EAAA,EACAC,EAAA,EACAoH,EAJAlT,EAAA,GAIAgT,EACAG,EAJAnT,EAAA,GAIAiT,EAIA,GADAtU,EAAAiU,EAAAI,EACAE,KAAAvU,EAAA,IAEA,GADAA,GAAAuU,EACAA,EAAA,GACA,GAAAvU,EAAAkN,EAAA,OACAlN,EAAAmN,MAAAnN,QACG,GAAAuU,EAAA,GACH,GAAAvU,EAAAmN,EAAA,OACAnN,EAAAkN,MAAAlN,GAIA,GADAA,EAAAmU,EAAAE,EACAE,KAAAvU,EAAA,IAEA,GADAA,GAAAuU,EACAA,EAAA,GACA,GAAAvU,EAAAmN,EAAA,OACAnN,EAAAkN,MAAAlN,QACG,GAAAuU,EAAA,GACH,GAAAvU,EAAAkN,EAAA,OACAlN,EAAAmN,MAAAnN,GAIA,GADAA,EAAAkU,EAAAI,EACAE,KAAAxU,EAAA,IAEA,GADAA,GAAAwU,EACAA,EAAA,GACA,GAAAxU,EAAAkN,EAAA,OACAlN,EAAAmN,MAAAnN,QACG,GAAAwU,EAAA,GACH,GAAAxU,EAAAmN,EAAA,OACAnN,EAAAkN,MAAAlN,GAIA,GADAA,EAAAoU,EAAAE,EACAE,KAAAxU,EAAA,IAEA,GADAA,GAAAwU,EACAA,EAAA,GACA,GAAAxU,EAAAmN,EAAA,OACAnN,EAAAkN,MAAAlN,QACG,GAAAwU,EAAA,GACH,GAAAxU,EAAAkN,EAAA,OACAlN,EAAAmN,MAAAnN,GAKA,OAFAkN,EAAA,IAAA9L,EAAA,GAAAiT,EAAAnH,EAAAqH,EAAAnT,EAAA,GAAAkT,EAAApH,EAAAsH,GACArH,EAAA,IAAA9L,EAAA,GAAAgT,EAAAlH,EAAAoH,EAAAlT,EAAA,GAAAiT,EAAAnH,EAAAqH,IACA,OCnDAC,GAAA,IAAAC,IAAAD,GAKA,SAAAE,GAAAV,EAAAC,EAAAC,EAAAC,GAEA,SAAA1B,EAAApR,EAAAL,GACA,OAAAgT,GAAA3S,MAAA6S,GAAAD,GAAAjT,MAAAmT,EAGA,SAAAnF,EAAAmD,EAAAC,EAAApF,EAAA3J,GACA,IAAAlC,EAAA,EAAAwT,EAAA,EACA,SAAAxC,IACAhR,EAAAyT,EAAAzC,EAAAnF,OAAA2H,EAAAC,EAAAxC,EAAApF,KACA6H,EAAA1C,EAAAC,GAAA,EAAApF,EAAA,EACA,GAAA3J,EAAAY,MAAA,IAAA9C,GAAA,IAAAA,EAAA6S,EAAAE,EAAA/S,EAAA,EAAAgT,EAAAF,UACA9S,KAAA6L,EAAA,QAAA2H,QAEAtR,EAAAY,MAAAmO,EAAA,GAAAA,EAAA,IAIA,SAAAwC,EAAArU,EAAAyM,GACA,OAAA/K,EAAA1B,EAAA,GAAAyT,GAAAxS,EAAAwL,EAAA,MACA/K,EAAA1B,EAAA,GAAA2T,GAAA1S,EAAAwL,EAAA,MACA/K,EAAA1B,EAAA,GAAA0T,GAAAzS,EAAAwL,EAAA,MACAA,EAAA,MAGA,SAAA8B,EAAA3N,EAAAC,GACA,OAAAyT,EAAA1T,EAAAE,EAAAD,EAAAC,GAGA,SAAAwT,EAAA1T,EAAAC,GACA,IAAA0T,EAAAF,EAAAzT,EAAA,GACA4T,EAAAH,EAAAxT,EAAA,GACA,OAAA0T,IAAAC,EAAAD,EAAAC,EACA,IAAAD,EAAA1T,EAAA,GAAAD,EAAA,GACA,IAAA2T,EAAA3T,EAAA,GAAAC,EAAA,GACA,IAAA0T,EAAA3T,EAAA,GAAAC,EAAA,GACAA,EAAA,GAAAD,EAAA,GAGA,gBAAAkC,GACA,IAEAwL,EACAiB,EACAtC,EACAwH,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EACAC,EACA3D,EARA4D,EAAAlS,EACAmS,EAAAzH,KASA0H,GACAxR,QACAY,UAgDA,WACA4Q,EAAAxR,MAAAyR,EACA5F,KAAAxH,KAAAkF,MACA8H,GAAA,EACAD,GAAA,EACAF,EAAAC,EAAA1K,KApDA5F,QA0DA,WACA+J,IACA6G,EAAAV,EAAAC,GACAC,GAAAG,GAAAG,EAAAtH,SACAW,EAAAvG,KAAAkN,EAAAlH,WAEAmH,EAAAxR,QACAoR,GAAAE,EAAAzQ,WAhEAC,aAuBA,WACAwQ,EAAAC,EAAA3G,KAAAiB,KAAA6B,GAAA,GAvBA3M,WA0BA,WACA,IAAA+J,EApBA,WAGA,IAFA,IAAAiB,EAAA,EAEAhR,EAAA,EAAAiB,EAAA6P,EAAAlM,OAAyC5E,EAAAiB,IAAOjB,EAChD,QAAA2W,EAAAhB,EAAAnH,EAAAsC,EAAA9Q,GAAAqR,EAAA,EAAAjR,EAAAoO,EAAA5J,OAAAK,EAAAuJ,EAAA,GAAAoI,EAAA3R,EAAA,GAAA4R,EAAA5R,EAAA,GAAkHoM,EAAAjR,IAAOiR,EACzHsF,EAAAC,EAAAjB,EAAAkB,EAAA5R,EAAAuJ,EAAA6C,GAAAuF,EAAA3R,EAAA,GAAA4R,EAAA5R,EAAA,GACA0Q,GAAAR,EAAyB0B,EAAA1B,IAAAyB,EAAAD,IAAAxB,EAAAQ,IAAAkB,EAAAlB,IAAAX,EAAA2B,MAAA3F,EACT6F,GAAA1B,IAAAyB,EAAAD,IAAAxB,EAAAQ,IAAAkB,EAAAlB,IAAAX,EAAA2B,MAAA3F,EAIhB,OAAAA,EASA8F,GACAC,EAAApE,GAAA5C,EACA0D,GAAA5D,EAAAnP,OAAA8R,GAAA,EAAA9R,CAAAmP,IAAAjL,QACAmS,GAAAtD,KACApP,EAAA0B,eACAgR,IACA1S,EAAAwB,YACAmK,EAAA,YAAA3L,GACAA,EAAAyB,WAEA2N,GACAvE,GAAAW,EAAAC,EAAAC,EAAAC,EAAA3L,GAEAA,EAAA2B,cAEAuQ,EAAAlS,EAAAwL,EAAAiB,EAAAtC,EAAA,OAvCA,SAAAvJ,EAAA5C,EAAAL,GACAyR,EAAApR,EAAAL,IAAAuU,EAAAtR,MAAA5C,EAAAL,GA8DA,SAAA0U,EAAArU,EAAAL,GACA,IAAAwF,EAAAiM,EAAApR,EAAAL,GAEA,GADA8O,GAAAtC,EAAAlF,MAAAjH,EAAAL,IACAsU,EACAN,EAAA3T,EAAA4T,EAAAjU,EAAAkU,EAAA1O,EACA8O,GAAA,EACA9O,IACA+O,EAAA1Q,YACA0Q,EAAAtR,MAAA5C,EAAAL,SAGA,GAAAwF,GAAA6O,EAAAE,EAAAtR,MAAA5C,EAAAL,OACA,CACA,IAAAG,GAAAgU,EAAAzT,KAAAsU,IAAAvB,GAAA/S,KAAAuU,IAAAzB,GAAAW,IAAAC,EAAA1T,KAAAsU,IAAAvB,GAAA/S,KAAAuU,IAAAzB,GAAAY,KACAhU,GAAAC,EAAAK,KAAAsU,IAAAvB,GAAA/S,KAAAuU,IAAAzB,GAAAnT,IAAAL,EAAAU,KAAAsU,IAAAvB,GAAA/S,KAAAuU,IAAAzB,GAAAxT,KACA+S,GAAA5S,EAAAC,EAAA4S,EAAAC,EAAAC,EAAAC,IACAkB,IACAE,EAAA1Q,YACA0Q,EAAAtR,MAAA9C,EAAA,GAAAA,EAAA,KAEAoU,EAAAtR,MAAA7C,EAAA,GAAAA,EAAA,IACAoF,GAAA+O,EAAAzQ,UACA6M,GAAA,GACWnL,IACX+O,EAAA1Q,YACA0Q,EAAAtR,MAAA5C,EAAAL,GACA2Q,GAAA,GAIAwD,EAAA9T,EAAA+T,EAAApU,EAAAqU,EAAA7O,EAGA,OAAAiP,GCnKA,ICIAS,GACAC,GACAC,GDNAC,GAAA,WACA,IAIAC,EACAC,EACArH,EANA8E,EAAA,EACAC,EAAA,EACAC,EAAA,IACAC,EAAA,IAKA,OAAAjF,GACA7L,OAAA,SAAAA,GACA,OAAAiT,GAAAC,IAAAlT,EAAAiT,IAAA5B,GAAAV,EAAAC,EAAAC,EAAAC,EAAAO,CAAA6B,EAAAlT,IAEAmT,OAAA,SAAA1I,GACA,OAAAD,UAAAjK,QAAAoQ,GAAAlG,EAAA,MAAAmG,GAAAnG,EAAA,MAAAoG,GAAApG,EAAA,MAAAqG,GAAArG,EAAA,MAAAwI,EAAAC,EAAA,KAAArH,KAAA8E,EAAAC,IAAAC,EAAAC,OCXAsC,GAAAhW,IAKAiW,IACA5S,OAAAZ,EACAe,MAAAf,EACA2B,UAMA,WACA6R,GAAAzS,MAAA0S,GACAD,GAAA5R,QAAA8R,IAPA9R,QAAA5B,EACA6B,aAAA7B,EACA8B,WAAA9B,GAQA,SAAA0T,KACAF,GAAAzS,MAAAyS,GAAA5R,QAAA5B,EAGA,SAAAyT,GAAA5Q,EAAAC,GAEAkQ,GADAnQ,GAAA/D,EACAmU,GAAAzT,EADAsD,GAAAhE,GACAoU,GAAAhU,EAAA4D,GACA0Q,GAAAzS,MAAA4S,GAGA,SAAAA,GAAA9Q,EAAAC,GACAD,GAAA/D,EACA,IAAAqE,EAAA3D,EADAsD,GAAAhE,GAEAoE,EAAAhE,EAAA4D,GACA2C,EAAA1G,EAAA8D,EAAAmQ,IACAY,EAAA1U,EAAAuG,GAEAtH,EAAA+E,EADA1D,EAAAiG,GAEA3H,EAAAoV,GAAA/P,EAAA8P,GAAA/P,EAAA0Q,EACA5L,EAAAiL,GAAA9P,EAAA+P,GAAAhQ,EAAA0Q,EACAL,GAAA1V,IAAAoB,EAAAU,EAAAxB,IAAAL,KAAAkK,IACAgL,GAAAnQ,EAAAoQ,GAAA9P,EAAA+P,GAAAhQ,EAGA,IAAA2Q,GAAA,SAAA5W,GAGA,OAFAsW,GAAA7V,QACA0E,EAAAnF,EAAAuW,KACAD,ICjDAO,IAAA,WACAC,IAAc1T,KAAA,aAAAS,YAAAgT,IAEdE,GAAA,SAAA/V,EAAAC,GAGA,OAFA4V,GAAA,GAAA7V,EACA6V,GAAA,GAAA5V,EACA2V,GAAAE,KCJAE,IACA1T,QAAA,SAAAtD,EAAA8D,GACA,OAAAmT,GAAAjX,EAAAiD,SAAAa,IAEAP,kBAAA,SAAAvD,EAAA8D,GAEA,IADA,IAAAN,EAAAxD,EAAAwD,SAAA3E,GAAA,EAAAiB,EAAA0D,EAAAC,SACA5E,EAAAiB,GAAA,GAAAmX,GAAAzT,EAAA3E,GAAAoE,SAAAa,GAAA,SACA,WAIAoT,IACAxT,OAAA,WACA,UAEAE,MAAA,SAAA5D,EAAA8D,GACA,OAAAqT,GAAAnX,EAAA6D,YAAAC,IAEAC,WAAA,SAAA/D,EAAA8D,GAEA,IADA,IAAAD,EAAA7D,EAAA6D,YAAAhF,GAAA,EAAAiB,EAAA+D,EAAAJ,SACA5E,EAAAiB,GAAA,GAAAqX,GAAAtT,EAAAhF,GAAAiF,GAAA,SACA,UAEAE,WAAA,SAAAhE,EAAA8D,GACA,OAAAsT,GAAApX,EAAA6D,YAAAC,IAEAI,gBAAA,SAAAlE,EAAA8D,GAEA,IADA,IAAAD,EAAA7D,EAAA6D,YAAAhF,GAAA,EAAAiB,EAAA+D,EAAAJ,SACA5E,EAAAiB,GAAA,GAAAsX,GAAAvT,EAAAhF,GAAAiF,GAAA,SACA,UAEAK,QAAA,SAAAnE,EAAA8D,GACA,OAAAuT,GAAArX,EAAA6D,YAAAC,IAEAO,aAAA,SAAArE,EAAA8D,GAEA,IADA,IAAAD,EAAA7D,EAAA6D,YAAAhF,GAAA,EAAAiB,EAAA+D,EAAAJ,SACA5E,EAAAiB,GAAA,GAAAuX,GAAAxT,EAAAhF,GAAAiF,GAAA,SACA,UAEAQ,mBAAA,SAAAtE,EAAA8D,GAEA,IADA,IAAAS,EAAAvE,EAAAuE,WAAA1F,GAAA,EAAAiB,EAAAyE,EAAAd,SACA5E,EAAAiB,GAAA,GAAAmX,GAAA1S,EAAA1F,GAAAiF,GAAA,SACA,WAIA,SAAAmT,GAAAhU,EAAAa,GACA,SAAAb,IAAAiU,GAAA/W,eAAA8C,EAAAG,QACA8T,GAAAjU,EAAAG,MAAAH,EAAAa,GAIA,SAAAqT,GAAAtT,EAAAC,GACA,WAAAiT,GAAAlT,EAAAC,GAGA,SAAAsT,GAAAvT,EAAAC,GACA,IAAAwT,EAAAP,GAAAlT,EAAA,GAAAA,EAAA,IAGA,OAFAkT,GAAAlT,EAAA,GAAAC,GACAiT,GAAAjT,EAAAD,EAAA,KACAyT,EAAAjW,EAGA,SAAAgW,GAAAxT,EAAAC,GACA,QAAA4L,GAAA7L,EAAA0T,IAAAC,IAAAC,GAAA3T,IAGA,SAAA0T,GAAAnK,GACA,OAAAA,IAAAkK,IAAAE,KAAAzJ,MAAAX,EAGA,SAAAoK,GAAA3T,GACA,OAAAA,EAAA,GAAAjC,EAAAiC,EAAA,GAAAjC,GAGA,IAAA6V,GAAA,SAAA1X,EAAA8D,GACA,OAAA9D,GAAAgX,GAAA7W,eAAAH,EAAAoD,MACA4T,GAAAhX,EAAAoD,MACA6T,IAAAjX,EAAA8D,IC/EA,SAAA6T,GAAA7D,EAAAE,EAAAI,GACA,IAAAvT,EAAAtB,OAAA8R,GAAA,EAAA9R,CAAAuU,EAAAE,EAAA3S,EAAA+S,GAAAnG,OAAA+F,GACA,gBAAA9S,GAAsB,OAAAL,EAAA0W,IAAA,SAAA1W,GAA2B,OAAAK,EAAAL,MAGjD,SAAA+W,GAAA/D,EAAAE,EAAAI,GACA,IAAAjT,EAAA3B,OAAA8R,GAAA,EAAA9R,CAAAsU,EAAAE,EAAA1S,EAAA8S,GAAAlG,OAAA8F,GACA,gBAAAlT,GAAsB,OAAAK,EAAAqW,IAAA,SAAArW,GAA2B,OAAAA,EAAAL,MAGjD,SAAAgX,KACA,IAAA9D,EAAAF,EAAAiE,EAAAC,EACA/D,EAAAF,EAAAkE,EAAAC,EAEA/W,EAAAL,EAAAqX,EAAAC,EADAhE,EAAA,GAAAC,EAAAD,EAAAiE,EAAA,GAAAC,EAAA,IAEA9K,EAAA,IAEA,SAAA+K,IACA,OAAYlV,KAAA,kBAAAS,YAAAiK,KAGZ,SAAAA,IACA,OAAAvO,OAAA8R,GAAA,EAAA9R,CAAA2C,EAAA6V,EAAAK,KAAAN,EAAAM,GAAAb,IAAAW,GACAjK,OAAA1O,OAAA8R,GAAA,EAAA9R,CAAA2C,EAAA+V,EAAAI,KAAAL,EAAAK,GAAAd,IAAAY,IACAlK,OAAA1O,OAAA8R,GAAA,EAAA9R,CAAA2C,EAAA2R,EAAAM,KAAAJ,EAAAI,GAAAzC,OAAA,SAAAxQ,GAAsE,OAAAY,EAAAZ,EAAAkX,GAAA/W,IAAgCkW,IAAArW,IACtG+M,OAAA1O,OAAA8R,GAAA,EAAA9R,CAAA2C,EAAA4R,EAAAM,KAAAJ,EAAAI,GAAA1C,OAAA,SAAA7Q,GAAsE,OAAAiB,EAAAjB,EAAAwX,GAAAhX,IAAgCkW,IAAA1W,IAqEtG,OAlEAyX,EAAAxK,MAAA,WACA,OAAAA,IAAAyJ,IAAA,SAAA1T,GAA8C,OAAST,KAAA,aAAAS,kBAGvDyU,EAAAC,QAAA,WACA,OACAnV,KAAA,UACAS,aACAqU,EAAAH,GAAA9J,OACAkK,EAAAH,GAAAQ,MAAA,GACAN,EAAAJ,GAAAW,UAAAD,MAAA,GACAL,EAAAF,GAAAQ,UAAAD,MAAA,OAKAF,EAAAjC,OAAA,SAAA1I,GACA,OAAAD,UAAAjK,OACA6U,EAAAI,YAAA/K,GAAAgL,YAAAhL,GADA2K,EAAAK,eAIAL,EAAAI,YAAA,SAAA/K,GACA,OAAAD,UAAAjK,QACAsU,GAAApK,EAAA,MAAAmK,GAAAnK,EAAA,MACAsK,GAAAtK,EAAA,MAAAqK,GAAArK,EAAA,MACAoK,EAAAD,IAAAnK,EAAAoK,IAAAD,IAAAnK,GACAsK,EAAAD,IAAArK,EAAAsK,IAAAD,IAAArK,GACA2K,EAAA/K,gBALAwK,EAAAE,IAAAH,EAAAE,KAQAM,EAAAK,YAAA,SAAAhL,GACA,OAAAD,UAAAjK,QACAoQ,GAAAlG,EAAA,MAAAoG,GAAApG,EAAA,MACAmG,GAAAnG,EAAA,MAAAqG,GAAArG,EAAA,MACAkG,EAAAE,IAAApG,EAAAkG,IAAAE,IAAApG,GACAmG,EAAAE,IAAArG,EAAAmG,IAAAE,IAAArG,GACA2K,EAAA/K,gBALAsG,EAAAC,IAAAC,EAAAC,KAQAsE,EAAApL,KAAA,SAAAS,GACA,OAAAD,UAAAjK,OACA6U,EAAAM,UAAAjL,GAAAkL,UAAAlL,GADA2K,EAAAO,aAIAP,EAAAM,UAAA,SAAAjL,GACA,OAAAD,UAAAjK,QACA2U,GAAAzK,EAAA,GAAA0K,GAAA1K,EAAA,GACA2K,IAFAF,EAAAC,IAKAC,EAAAO,UAAA,SAAAlL,GACA,OAAAD,UAAAjK,QACA0Q,GAAAxG,EAAA,GAAAyG,GAAAzG,EAAA,GACA2K,IAFAnE,EAAAC,IAKAkE,EAAA/K,UAAA,SAAAI,GACA,OAAAD,UAAAjK,QACA8J,GAAAI,EACAzM,EAAAyW,GAAA7D,EAAAE,EAAA,IACAnT,EAAA+W,GAAA/D,EAAAE,EAAAxG,GACA2K,EAAAP,GAAAM,EAAAD,EAAA,IACAG,EAAAP,GAAAG,EAAAD,EAAAvK,GACA+K,GANA/K,GASA+K,EACAI,eAAA,QAAArX,IAAA,OAAAA,KACAsX,eAAA,QAAAtX,IAAA,OAAAA,KAGA,SAAAyX,KACA,OAAAjB,OCrGA,ICIAkB,GACAC,GACAC,GACAC,GDPAC,GAAA,SAAAnY,EAAAC,GACA,IAAA4S,EAAA7S,EAAA,GAAAa,EACAiS,EAAA9S,EAAA,GAAAa,EACAkS,EAAA9S,EAAA,GAAAY,EACAmS,EAAA/S,EAAA,GAAAY,EACAuX,EAAAnX,EAAA6R,GACAuF,EAAA9W,EAAAuR,GACAwF,EAAArX,EAAA+R,GACAuF,EAAAhX,EAAAyR,GACAwF,EAAAJ,EAAAnX,EAAA4R,GACA4F,EAAAL,EAAA7W,EAAAsR,GACA6F,EAAAJ,EAAArX,EAAA8R,GACA4F,EAAAL,EAAA/W,EAAAwR,GACA5U,EAAA,EAAA0D,EAAAH,EAAAI,EAAAkR,EAAAF,GAAAsF,EAAAE,EAAAxW,EAAAiR,EAAAF,KACA1N,EAAA5D,EAAApD,GAEA0P,EAAA1P,EAAA,SAAAwB,GACA,IAAAiZ,EAAArX,EAAA5B,GAAAxB,GAAAgH,EACA8M,EAAA1Q,EAAApD,EAAAwB,GAAAwF,EACAjF,EAAA+R,EAAAuG,EAAAI,EAAAF,EACA7Y,EAAAoS,EAAAwG,EAAAG,EAAAD,EACA5O,EAAAkI,EAAAoG,EAAAO,EAAAL,EACA,OACAvX,EAAAnB,EAAAK,GAAAU,EACAI,EAAA+I,EAAArI,EAAAxB,IAAAL,MAAAe,IAEG,WACH,OAAAiS,EAAAjS,EAAAkS,EAAAlS,IAKA,OAFAiN,EAAAkI,SAAA5X,EAEA0P,GElCAgL,GAAA,SAAA3Y,GACA,OAAAA,GDGA4Y,GAAAxZ,IACAyZ,GAAAzZ,IAMA0Z,IACAlW,MAAAf,EACA2B,UAAA3B,EACA4B,QAAA5B,EACA6B,aAAA,WACAoV,GAAAtV,UAAAuV,GACAD,GAAArV,QAAAuV,IAEArV,WAAA,WACAmV,GAAAtV,UAAAsV,GAAArV,QAAAqV,GAAAlW,MAAAf,EACA+W,GAAAlZ,IAAAkB,EAAAiY,KACAA,GAAAtZ,SAEA0N,OAAA,WACA,IAAAgM,EAAAL,GAAA,EAEA,OADAA,GAAArZ,QACA0Z,IAIA,SAAAF,KACAD,GAAAlW,MAAAsW,GAGA,SAAAA,GAAAlZ,EAAAL,GACAmZ,GAAAlW,MAAAuW,GACAtB,GAAAE,GAAA/X,EAAA8X,GAAAE,GAAArY,EAGA,SAAAwZ,GAAAnZ,EAAAL,GACAkZ,GAAAnZ,IAAAsY,GAAAhY,EAAA+X,GAAApY,GACAoY,GAAA/X,EAAAgY,GAAArY,EAGA,SAAAqZ,KACAG,GAAAtB,GAAAC,IAGA,IAAAsB,GAAA,GE/CAC,GAAAlQ,IACAmQ,GAAAD,GACAE,IAAAF,GACAG,GAAAD,GAsBA,ICdAE,GACAC,GACAC,GACAC,GDWAC,IAnBAjX,MAYA,SAAA5C,EAAAL,GACAK,EAAAqZ,QAAArZ,GACAA,EAAAuZ,QAAAvZ,GACAL,EAAA2Z,QAAA3Z,GACAA,EAAA6Z,QAAA7Z,IAfA6D,UAAA3B,EACA4B,QAAA5B,EACA6B,aAAA7B,EACA8B,WAAA9B,EACAoL,OAAA,WACA,IAAAlE,IAAAsQ,GAAAC,KAAAC,GAAAC,KAEA,OADAD,GAAAC,KAAAF,GAAAD,GAAAlQ,KACAJ,ICZA+Q,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EAMAC,IACA3X,MAAA4X,GACAhX,UAAAiX,GACAhX,QAAAiX,GACAhX,aAAA,WACA6W,GAAA/W,UAAAmX,GACAJ,GAAA9W,QAAAmX,IAEAjX,WAAA,WACA4W,GAAA3X,MAAA4X,GACAD,GAAA/W,UAAAiX,GACAF,GAAA9W,QAAAiX,IAEAzN,OAAA,WACA,IAAA4N,EAAAP,IAAAF,GAAAE,GAAAD,GAAAC,IACAH,IAAAF,GAAAE,GAAAD,GAAAC,IACAH,IAAAF,GAAAE,GAAAD,GAAAC,KACA3Q,SAIA,OAHAyQ,GAAAC,GAAAC,GACAC,GAAAC,GAAAC,GACAC,GAAAC,GAAAC,GAAA,EACAO,IAIA,SAAAL,GAAAxa,EAAAL,GACAma,IAAA9Z,EACA+Z,IAAApa,IACAqa,GAGA,SAAAS,KACAF,GAAA3X,MAAAkY,GAGA,SAAAA,GAAA9a,EAAAL,GACA4a,GAAA3X,MAAAmY,GACAP,GAAAb,GAAA3Z,EAAA4Z,GAAAja,GAGA,SAAAob,GAAA/a,EAAAL,GACA,IAAAsT,EAAAjT,EAAA2Z,GAAAzG,EAAAvT,EAAAia,GAAA/P,EAAArI,EAAAyR,IAAAC,KACA+G,IAAApQ,GAAA8P,GAAA3Z,GAAA,EACAka,IAAArQ,GAAA+P,GAAAja,GAAA,EACAwa,IAAAtQ,EACA2Q,GAAAb,GAAA3Z,EAAA4Z,GAAAja,GAGA,SAAA+a,KACAH,GAAA3X,MAAA4X,GAGA,SAAAG,KACAJ,GAAA3X,MAAAoY,GAGA,SAAAJ,KACAK,GAAAxB,GAAAC,IAGA,SAAAsB,GAAAhb,EAAAL,GACA4a,GAAA3X,MAAAqY,GACAT,GAAAf,GAAAE,GAAA3Z,EAAA0Z,GAAAE,GAAAja,GAGA,SAAAsb,GAAAjb,EAAAL,GACA,IAAAsT,EAAAjT,EAAA2Z,GACAzG,EAAAvT,EAAAia,GACA/P,EAAArI,EAAAyR,IAAAC,KAEA+G,IAAApQ,GAAA8P,GAAA3Z,GAAA,EACAka,IAAArQ,GAAA+P,GAAAja,GAAA,EACAwa,IAAAtQ,EAGAuQ,KADAvQ,EAAA+P,GAAA5Z,EAAA2Z,GAAAha,IACAga,GAAA3Z,GACAqa,IAAAxQ,GAAA+P,GAAAja,GACA2a,IAAA,EAAAzQ,EACA2Q,GAAAb,GAAA3Z,EAAA4Z,GAAAja,GAGA,IAAAub,GAAA,GChGA,SAAAC,GAAAC,GACA9b,KAAA+b,SAAAD,EAGAD,GAAAnc,WACAsc,QAAA,IACAC,YAAA,SAAA9O,GACA,OAAAnN,KAAAgc,QAAA7O,EAAAnN,MAEAoE,aAAA,WACApE,KAAAkc,MAAA,GAEA7X,WAAA,WACArE,KAAAkc,MAAAnS,KAEA7F,UAAA,WACAlE,KAAAmc,OAAA,GAEAhY,QAAA,WACA,IAAAnE,KAAAkc,OAAAlc,KAAA+b,SAAAK,YACApc,KAAAmc,OAAApS,KAEAzG,MAAA,SAAA5C,EAAAL,GACA,OAAAL,KAAAmc,QACA,OACAnc,KAAA+b,SAAAM,OAAA3b,EAAAL,GACAL,KAAAmc,OAAA,EACA,MAEA,OACAnc,KAAA+b,SAAAO,OAAA5b,EAAAL,GACA,MAEA,QACAL,KAAA+b,SAAAM,OAAA3b,EAAAV,KAAAgc,QAAA3b,GACAL,KAAA+b,SAAA/L,IAAAtP,EAAAL,EAAAL,KAAAgc,QAAA,EAAA7a,KAKAwM,OAAApL,GCvCA,IACAga,GACAC,GACAC,GACAC,GACAC,GALAC,GAAA9c,IAOA+c,IACAvZ,MAAAf,EACA2B,UAAA,WACA2Y,GAAAvZ,MAAAwZ,IAEA3Y,QAAA,WACAoY,IAAAQ,GAAAP,GAAAC,IACAI,GAAAvZ,MAAAf,GAEA6B,aAAA,WACAmY,IAAA,GAEAlY,WAAA,WACAkY,GAAA,MAEA5O,OAAA,WACA,IAAA1K,GAAA2Z,GAEA,OADAA,GAAA3c,QACAgD,IAIA,SAAA6Z,GAAApc,EAAAL,GACAwc,GAAAvZ,MAAAyZ,GACAP,GAAAE,GAAAhc,EAAA+b,GAAAE,GAAAtc,EAGA,SAAA0c,GAAArc,EAAAL,GACAqc,IAAAhc,EAAAic,IAAAtc,EACAuc,GAAAxc,IAAA8B,EAAAwa,MAAAC,QACAD,GAAAhc,EAAAic,GAAAtc,EAGA,IAAA2c,GAAA,GC5CA,SAAAC,KACAjd,KAAAkd,WAoDA,SAAAC,GAAA/Q,GACA,YAAAA,EACA,IAAAA,EAAA,IAAAA,EAAA,eAAAA,EACA,IAAAA,EAAA,IAAAA,EAAA,cAAAA,EACA,IArDA6Q,GAAAvd,WACAsc,QAAA,IACAoB,QAAAD,GAAA,KACAlB,YAAA,SAAA9O,GAEA,OADAA,QAAAnN,KAAAgc,UAAAhc,KAAAgc,QAAA7O,EAAAnN,KAAAod,QAAA,MACApd,MAEAoE,aAAA,WACApE,KAAAkc,MAAA,GAEA7X,WAAA,WACArE,KAAAkc,MAAAnS,KAEA7F,UAAA,WACAlE,KAAAmc,OAAA,GAEAhY,QAAA,WACA,IAAAnE,KAAAkc,OAAAlc,KAAAkd,QAAAvV,KAAA,KACA3H,KAAAmc,OAAApS,KAEAzG,MAAA,SAAA5C,EAAAL,GACA,OAAAL,KAAAmc,QACA,OACAnc,KAAAkd,QAAAvV,KAAA,IAAAjH,EAAA,IAAAL,GACAL,KAAAmc,OAAA,EACA,MAEA,OACAnc,KAAAkd,QAAAvV,KAAA,IAAAjH,EAAA,IAAAL,GACA,MAEA,QACA,MAAAL,KAAAod,UAAApd,KAAAod,QAAAD,GAAAnd,KAAAgc,UACAhc,KAAAkd,QAAAvV,KAAA,IAAAjH,EAAA,IAAAL,EAAAL,KAAAod,WAKAzP,OAAA,WACA,GAAA3N,KAAAkd,QAAAja,OAAA,CACA,IAAA0K,EAAA3N,KAAAkd,QAAAG,KAAA,IAEA,OADArd,KAAAkd,WACAvP,EAEA,8BCvCA2P,EAAAxB,GACA,IACAyB,EACAC,EAFAvB,EAAA,IAIA,SAAAwB,EAAAje,GAKA,OAJAA,IACA,mBAAAyc,GAAAuB,EAAAvB,eAAAhP,MAAAjN,KAAAkN,YACAvI,EAAAnF,EAAA+d,EAAAC,KAEAA,EAAA7P,SAwCA,OArCA8P,EAAA9D,KAAA,SAAAna,GAEA,OADAmF,EAAAnF,EAAA+d,EAAAzD,KACAA,GAAAnM,UAGA8P,EAAAT,QAAA,SAAAxd,GAEA,OADAmF,EAAAnF,EAAA+d,EAAAP,KACAA,GAAArP,UAGA8P,EAAAhU,OAAA,SAAAjK,GAEA,OADAmF,EAAAnF,EAAA+d,EAAAhD,KACAA,GAAA5M,UAGA8P,EAAAlC,SAAA,SAAA/b,GAEA,OADAmF,EAAAnF,EAAA+d,EAAA3B,KACAA,GAAAjO,UAGA8P,EAAAH,WAAA,SAAAnQ,GACA,OAAAD,UAAAjK,QAAAsa,EAAA,MAAApQ,GAAAmQ,EAAA,KAAAjE,KAAAiE,EAAAnQ,GAAAzK,OAAA+a,GAAAH,GAGAG,EAAA3B,QAAA,SAAA3O,GACA,OAAAD,UAAAjK,QACAua,EAAA,MAAArQ,GAAA2O,EAAA,SAAAmB,IAAA,IAAApB,GAAAC,EAAA3O,GACA,mBAAA8O,GAAAuB,EAAAvB,eACAwB,GAHA3B,GAMA2B,EAAAxB,YAAA,SAAA9O,GACA,OAAAD,UAAAjK,QACAgZ,EAAA,mBAAA9O,KAAAqQ,EAAAvB,aAAA9O,OACAsQ,GAFAxB,GAKAwB,EAAAH,cAAAxB,YC3DA4B,GAAA,SAAAC,GACA,OACAjb,OAAAkb,GAAAD,KAIA,SAAAC,GAAAD,GACA,gBAAAjb,GACA,IAAA7C,EAAA,IAAAge,GACA,QAAAC,KAAAH,EAAA9d,EAAAie,GAAAH,EAAAG,GAEA,OADAje,EAAA6C,SACA7C,GAIA,SAAAge,MCZA,SAAAE,GAAAT,EAAAU,EAAAxe,GACA,IAAA+O,EAAA+O,EAAAW,YAAAX,EAAAW,aAMA,OALAX,EAAAY,MAAA,KAAAC,WAAA,MACA,MAAA5P,GAAA+O,EAAAW,WAAA,MACAtZ,EAAAnF,EAAA8d,EAAA5a,OAAA6X,KACAyD,EAAAzD,GAAA5M,UACA,MAAAY,GAAA+O,EAAAW,WAAA1P,GACA+O,EAGA,SAAAc,GAAAd,EAAAzH,EAAArW,GACA,OAAAue,GAAAT,EAAA,SAAA7c,GACA,IAAAiK,EAAAmL,EAAA,MAAAA,EAAA,MACAwI,EAAAxI,EAAA,MAAAA,EAAA,MACAlQ,EAAA5E,KAAAuU,IAAA5K,GAAAjK,EAAA,MAAAA,EAAA,OAAA4d,GAAA5d,EAAA,MAAAA,EAAA,QACAC,GAAAmV,EAAA,OAAAnL,EAAA/E,GAAAlF,EAAA,MAAAA,EAAA,UACAJ,GAAAwV,EAAA,OAAAwI,EAAA1Y,GAAAlF,EAAA,MAAAA,EAAA,UACA6c,EAAAY,MAAA,IAAAvY,GAAAwY,WAAAzd,EAAAL,KACGb,GAGH,SAAA8e,GAAAhB,EAAAiB,EAAA/e,GACA,OAAA4e,GAAAd,IAAA,KAAAiB,GAAA/e,GAGA,SAAAgf,GAAAlB,EAAAmB,EAAAjf,GACA,OAAAue,GAAAT,EAAA,SAAA7c,GACA,IAAAiK,GAAA+T,EACA9Y,EAAA+E,GAAAjK,EAAA,MAAAA,EAAA,OACAC,GAAAgK,EAAA/E,GAAAlF,EAAA,MAAAA,EAAA,UACAJ,GAAAsF,EAAAlF,EAAA,MACA6c,EAAAY,MAAA,IAAAvY,GAAAwY,WAAAzd,EAAAL,KACGb,GAGH,SAAAkf,GAAApB,EAAAqB,EAAAnf,GACA,OAAAue,GAAAT,EAAA,SAAA7c,GACA,IAAA4d,GAAAM,EACAhZ,EAAA0Y,GAAA5d,EAAA,MAAAA,EAAA,OACAC,GAAAiF,EAAAlF,EAAA,MACAJ,GAAAge,EAAA1Y,GAAAlF,EAAA,MAAAA,EAAA,UACA6c,EAAAY,MAAA,IAAAvY,GAAAwY,WAAAzd,EAAAL,KACGb,GD5BHqe,GAAAne,WACAQ,YAAA2d,GACAva,MAAA,SAAA5C,EAAAL,GAAyBL,KAAA0C,OAAAY,MAAA5C,EAAAL,IACzB8C,OAAA,WAAsBnD,KAAA0C,OAAAS,UACtBe,UAAA,WAAyBlE,KAAA0C,OAAAwB,aACzBC,QAAA,WAAuBnE,KAAA0C,OAAAyB,WACvBC,aAAA,WAA4BpE,KAAA0C,OAAA0B,gBAC5BC,WAAA,WAA0BrE,KAAA0C,OAAA2B,eEpB1B,IAAAua,GAAA,GACAC,GAAApd,EAAA,GAAAJ,GAEAyd,GAAA,SAAAC,EAAAC,GACA,OAAAA,EAYA,SAAAD,EAAAC,GAEA,SAAAC,EAAA5L,EAAAC,EAAAlL,EAAA4M,EAAAC,EAAAjC,EAAAO,EAAAC,EAAAnL,EAAA2L,EAAAkB,EAAA5C,EAAA4M,EAAAxc,GACA,IAAAiR,EAAAJ,EAAAF,EACAO,EAAAJ,EAAAF,EACA6L,EAAAxL,IAAAC,IACA,GAAAuL,EAAA,EAAAH,GAAAE,IAAA,CACA,IAAA1e,EAAAwU,EAAAhB,EACAvT,EAAAwU,EAAAC,EACAxW,EAAAsU,EAAAV,EACA7T,EAAAyD,EAAA1B,IAAAC,IAAA/B,KACA0gB,EAAA/c,EAAA3D,GAAAD,GACA4gB,EAAA/d,IAAA5C,GAAA,GAAAmC,GAAAS,EAAA8G,EAAAC,GAAAxH,GAAAuH,EAAAC,GAAA,EAAA7G,EAAAf,EAAAD,GACAZ,EAAAmf,EAAAM,EAAAD,GACAE,EAAA1f,EAAA,GACA2f,EAAA3f,EAAA,GACA4f,EAAAF,EAAAjM,EACAoM,EAAAF,EAAAjM,EACAoM,EAAA9L,EAAA4L,EAAA7L,EAAA8L,GACAC,IAAAP,EAAAH,GACA1d,GAAAqS,EAAA6L,EAAA5L,EAAA6L,GAAAN,EAAA,QACAnK,EAAAhB,EAAAiB,EAAAC,EAAAlC,EAAAV,EAAAuM,MACAI,EAAA5L,EAAAC,EAAAlL,EAAA4M,EAAAC,EAAAjC,EAAAsM,EAAAC,EAAAF,EAAA7e,GAAA/B,EAAAgC,GAAAhC,EAAAC,EAAAwgB,EAAAxc,GACAA,EAAAY,MAAAgc,EAAAC,GACAN,EAAAK,EAAAC,EAAAF,EAAA7e,EAAAC,EAAA/B,EAAA6U,EAAAC,EAAAnL,EAAA2L,EAAAkB,EAAA5C,EAAA4M,EAAAxc,KAIA,gBAAAA,GACA,IAAAid,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACA5X,EAAAiL,EAAAC,EAAA0B,EAAAC,EAAAjC,EAEAiN,GACA3c,QACAY,YACAC,UACAC,aAAA,WAAgC1B,EAAA0B,eAAuB6b,EAAA/b,UAAAyM,GACvDtM,WAAA,WAA8B3B,EAAA2B,aAAqB4b,EAAA/b,cAGnD,SAAAZ,EAAA5C,EAAAL,GACAK,EAAAqe,EAAAre,EAAAL,GACAqC,EAAAY,MAAA5C,EAAA,GAAAA,EAAA,IAGA,SAAAwD,IACAmP,EAAAtJ,IACAkW,EAAA3c,MAAAyR,EACArS,EAAAwB,YAGA,SAAA6Q,EAAA3P,EAAAC,GACA,IAAA3G,EAAAuH,GAAAb,EAAAC,IAAAzF,EAAAmf,EAAA3Z,EAAAC,GACA4Z,EAAA5L,EAAAC,EAAAlL,EAAA4M,EAAAC,EAAAjC,EAAAK,EAAAzT,EAAA,GAAA0T,EAAA1T,EAAA,GAAAwI,EAAAhD,EAAA4P,EAAAtW,EAAA,GAAAuW,EAAAvW,EAAA,GAAAsU,EAAAtU,EAAA,GAAAkgB,GAAAlc,GACAA,EAAAY,MAAA+P,EAAAC,GAGA,SAAAnP,IACA8b,EAAA3c,QACAZ,EAAAyB,UAGA,SAAAwM,IACAzM,IACA+b,EAAA3c,MAAA4c,EACAD,EAAA9b,QAAAyM,EAGA,SAAAsP,EAAA9a,EAAAC,GACA0P,EAAA4K,EAAAva,EAAAC,GAAAua,EAAAvM,EAAAwM,EAAAvM,EAAAwM,EAAA9K,EAAA+K,EAAA9K,EAAA+K,EAAAhN,EACAiN,EAAA3c,MAAAyR,EAGA,SAAAnE,IACAqO,EAAA5L,EAAAC,EAAAlL,EAAA4M,EAAAC,EAAAjC,EAAA4M,EAAAC,EAAAF,EAAAG,EAAAC,EAAAC,EAAApB,GAAAlc,GACAud,EAAA9b,UACAA,IAGA,OAAA8b,GA3FAE,CAAApB,EAAAC,GAGA,SAAAD,GACA,OAAAnB,IACAta,MAAA,SAAA5C,EAAAL,GACAK,EAAAqe,EAAAre,EAAAL,GACAL,KAAA0C,OAAAY,MAAA5C,EAAA,GAAAA,EAAA,OAPA0f,CAAArB,ICGA,IAAAsB,GAAAzC,IACAta,MAAA,SAAA5C,EAAAL,GACAL,KAAA0C,OAAAY,MAAA5C,EAAAW,EAAAhB,EAAAgB,MAuBA,SAAAif,GAAA3a,EAAAgO,EAAAC,EAAA2M,GACA,IAAAC,EAAA/e,EAAA8e,GACAE,EAAA1e,EAAAwe,GACA/f,EAAAggB,EAAA7a,EACAlF,EAAAggB,EAAA9a,EACA+a,EAAAF,EAAA7a,EACAgb,EAAAF,EAAA9a,EACAib,GAAAH,EAAA7M,EAAA4M,EAAA7M,GAAAhO,EACAkb,GAAAJ,EAAA9M,EAAA6M,EAAA5M,GAAAjO,EACA,SAAAmb,EAAApgB,EAAAL,GACA,OAAAG,EAAAE,EAAAD,EAAAJ,EAAAsT,EAAAC,EAAAnT,EAAAC,EAAAF,EAAAH,GAKA,OAHAygB,EAAA5V,OAAA,SAAAxK,EAAAL,GACA,OAAAqgB,EAAAhgB,EAAAigB,EAAAtgB,EAAAugB,EAAAC,EAAAF,EAAAjgB,EAAAggB,EAAArgB,IAEAygB,EAGA,SAAAC,GAAAhC,GACA,OAAAiC,GAAA,WAAuC,OAAAjC,GAAvCiC,GAGA,SAAAA,GAAAC,GACA,IAAAlC,EAIA9S,EAGAqH,EAAAC,EAAAC,EAEA0N,EACAC,EACAC,EACAzL,EACAC,EAZAjQ,EAAA,IACAjF,EAAA,IAAAL,EAAA,IACA+E,EAAA,EAAAC,EAAA,EACAgG,EAAA,EAAAC,EAAA,EAAAC,EAAA,EACAgV,EAAA,EACAc,EAAA,KAAAC,EAAAC,GACAlO,EAAA,KAAAmO,EAAAnI,GACA2F,EAAA,GAOA,SAAA1B,EAAAha,GACA,OAAA8d,EAAA9d,EAAA,GAAAjC,EAAAiC,EAAA,GAAAjC,GAGA,SAAA6J,EAAA5H,GAEA,OADAA,EAAA8d,EAAAlW,OAAA5H,EAAA,GAAAA,EAAA,OACAA,EAAA,GAAAlC,EAAAkC,EAAA,GAAAlC,GA+DA,SAAAqgB,IACA,IAAA3U,EAAAwT,GAAA3a,EAAA,IAAA4a,GAAAtT,MAAA,KAAA8R,EAAA3Z,EAAAC,IACAyb,GAAAP,EAAAD,GAvHA,SAAA3a,EAAAgO,EAAAC,GACA,SAAAkN,EAAApgB,EAAAL,GACA,OAAAsT,EAAAhO,EAAAjF,EAAAkT,EAAAjO,EAAAtF,GAKA,OAHAygB,EAAA5V,OAAA,SAAAxK,EAAAL,GACA,QAAAK,EAAAiT,GAAAhO,GAAAiO,EAAAvT,GAAAsF,IAEAmb,IAgHAnb,EAAAjF,EAAAoM,EAAA,GAAAzM,EAAAyM,EAAA,GAAAyT,GAKA,OAJAtU,EAAAb,GAAAC,EAAAC,EAAAC,GACA4V,EAAAlW,GAAA8T,EAAA+B,GACAM,EAAAnW,GAAAgB,EAAAkV,GACAD,EAAApC,GAAAqC,EAAAnC,GACA/e,IAGA,SAAAA,IAEA,OADA0V,EAAAC,EAAA,KACA0H,EAGA,OA3EAA,EAAA5a,OAAA,SAAAA,GACA,OAAAiT,GAAAC,IAAAlT,EAAAiT,IAAA0K,GAnEA,SAAApU,GACA,OAAA2R,IACAta,MAAA,SAAA5C,EAAAL,GACA,IAAAjB,EAAA6M,EAAAvL,EAAAL,GACA,OAAAL,KAAA0C,OAAAY,MAAAlE,EAAA,GAAAA,EAAA,OA+DAsiB,CAAAzV,EAAAyV,CAAAJ,EAAAJ,EAAAM,EAAA5L,EAAAlT,QAGA4a,EAAAgE,QAAA,SAAAnU,GACA,OAAAD,UAAAjK,QAAAqe,EAAAnU,EAAAkU,OAAAM,EAAA1hB,KAAAqhB,GAGAhE,EAAAkE,SAAA,SAAArU,GACA,OAAAD,UAAAjK,QAAAue,EAAArU,EAAAkG,EAAAC,EAAAC,EAAAC,EAAA,KAAAvT,KAAAuhB,GAGAlE,EAAAsE,UAAA,SAAAzU,GACA,OAAAD,UAAAjK,QAAAqe,GAAAnU,EAAAuE,GAAA2P,EAAAlU,EAAA9L,IAAAggB,EAAA,KAAAE,IAAAthB,KAAAohB,EAAAjgB,GAGAkc,EAAAW,WAAA,SAAA9Q,GACA,OAAAD,UAAAjK,QAAAue,EAAA,MAAArU,GAAAkG,EAAAC,EAAAC,EAAAC,EAAA,KAAA6F,IAAAtF,GAAAV,GAAAlG,EAAA,MAAAmG,GAAAnG,EAAA,MAAAoG,GAAApG,EAAA,MAAAqG,GAAArG,EAAA,OAAAlN,KAAA,MAAAoT,EAAA,OAAAA,EAAAC,IAAAC,EAAAC,KAGA8J,EAAAY,MAAA,SAAA/Q,GACA,OAAAD,UAAAjK,QAAA0C,GAAAwH,EAAAsU,KAAA9b,GAGA2X,EAAAa,UAAA,SAAAhR,GACA,OAAAD,UAAAjK,QAAAvC,GAAAyM,EAAA,GAAA9M,GAAA8M,EAAA,GAAAsU,MAAA/gB,EAAAL,IAGAid,EAAAxQ,OAAA,SAAAK,GACA,OAAAD,UAAAjK,QAAAmC,EAAA+H,EAAA,OAAA9L,EAAAgE,EAAA8H,EAAA,OAAA9L,EAAAogB,MAAArc,EAAAhE,EAAAiE,EAAAjE,IAGAkc,EAAArR,OAAA,SAAAkB,GACA,OAAAD,UAAAjK,QAAAoI,EAAA8B,EAAA,OAAA9L,EAAAiK,EAAA6B,EAAA,OAAA9L,EAAAkK,EAAA4B,EAAAlK,OAAA,EAAAkK,EAAA,OAAA9L,EAAA,EAAAogB,MAAApW,EAAAjK,EAAAkK,EAAAlK,EAAAmK,EAAAnK,IAGAkc,EAAAlO,MAAA,SAAAjC,GACA,OAAAD,UAAAjK,QAAAsd,EAAApT,EAAA,IAAA9L,EAAAogB,KAAAlB,EAAAnf,GAGAkc,EAAAvQ,UAAA,SAAAI,GACA,OAAAD,UAAAjK,QAAAie,EAAApC,GAAAqC,EAAAnC,EAAA7R,KAAAlN,KAAAiC,EAAA8c,IAGA1B,EAAAuE,UAAA,SAAAhM,EAAArW,GACA,OAAA4e,GAAAd,EAAAzH,EAAArW,IAGA8d,EAAAwE,QAAA,SAAAvD,EAAA/e,GACA,OAAA8e,GAAAhB,EAAAiB,EAAA/e,IAGA8d,EAAAyE,SAAA,SAAAtD,EAAAjf,GACA,OAAAgf,GAAAlB,EAAAmB,EAAAjf,IAGA8d,EAAA0E,UAAA,SAAArD,EAAAnf,GACA,OAAAkf,GAAApB,EAAAqB,EAAAnf,IAkBA,WAGA,OAFAuf,EAAAkC,EAAAhU,MAAAjN,KAAAkN,WACAoQ,EAAApS,OAAA6T,EAAA7T,UACAuW,KC9JA,SAAAQ,GAAAhB,GACA,IAAA1R,EAAA,EACAO,EAAAhP,EAAA,EACArC,EAAAuiB,GAAAC,GACArhB,EAAAnB,EAAA8Q,EAAAO,GAMA,OAJAlQ,EAAAsiB,UAAA,SAAA/U,GACA,OAAAD,UAAAjK,OAAAxE,EAAA8Q,EAAApC,EAAA,GAAA9L,EAAAyO,EAAA3C,EAAA,GAAA9L,IAAAkO,EAAAnO,EAAA0O,EAAA1O,IAGAxB,ECTA,SAAAuiB,GAAA7O,EAAAE,GACA,IAAAqF,EAAA9W,EAAAuR,GAAAhU,GAAAuZ,EAAA9W,EAAAyR,IAAA,EAGA,GAAAlS,EAAAhC,GAAAuB,EAAA,OCNA,SAAA0O,GACA,IAAAE,EAAAhO,EAAA8N,GAEA,SAAArD,EAAA9G,EAAAC,GACA,OAAAD,EAAAqK,EAAA1N,EAAAsD,GAAAoK,GAOA,OAJAvD,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,OAAAK,EAAA+O,EAAApN,EAAAhC,EAAAoP,KAGAvD,EDLAkW,CAAA9O,GAEA,IAAA5U,EAAA,EAAAma,GAAA,EAAAvZ,EAAAuZ,GAAAwJ,EAAAngB,EAAAxD,GAAAY,EAEA,SAAAyf,EAAAre,EAAAL,GACA,IAAAjB,EAAA8C,EAAAxD,EAAA,EAAAY,EAAAyC,EAAA1B,IAAAf,EACA,OAAAF,EAAA2C,EAAArB,GAAApB,GAAA+iB,EAAAjjB,EAAAqC,EAAAf,IAQA,OALAqe,EAAA7T,OAAA,SAAAxK,EAAAL,GACA,IAAAiiB,EAAAD,EAAAhiB,EACA,OAAAmB,EAAAd,EAAAY,EAAAghB,IAAAhjB,EAAA0C,EAAAsgB,GAAAjgB,GAAA3D,GAAAgC,IAAA4hB,KAAAhjB,MAAA,EAAAA,MAGAyf,EAGA,IAAAwD,GAAA,WACA,OAAAN,GAAAE,IACAjE,MAAA,SACApR,QAAA,aE1BA0V,GAAA,WACA,OAAAD,KACAL,WAAA,YACAhE,MAAA,MACAC,WAAA,UACAlS,QAAA,OACAa,SAAA,WCgBA,IAAA2V,GAAA,WACA,IAAA9M,EACAC,EACA8M,EACAC,EACAC,EACAtf,EAHAuf,EAAAL,KACAM,EAAAP,KAAAtW,QAAA,QAAAa,SAAA,SAAAoV,WAAA,QACAa,EAAAR,KAAAtW,QAAA,QAAAa,SAAA,SAAAoV,WAAA,OACAc,GAA4B1f,MAAA,SAAA5C,EAAAL,GAAuBiD,GAAA5C,EAAAL,KAEnD,SAAA4iB,EAAA5f,GACA,IAAA3C,EAAA2C,EAAA,GAAAhD,EAAAgD,EAAA,GACA,OAAAC,EAAA,KACAof,EAAApf,MAAA5C,EAAAL,GAAAiD,IACAqf,EAAArf,MAAA5C,EAAAL,GAAAiD,KACAsf,EAAAtf,MAAA5C,EAAAL,GAAAiD,GAmEA,SAAArD,IAEA,OADA0V,EAAAC,EAAA,KACAqN,EAGA,OArEAA,EAAA/X,OAAA,SAAA7H,GACA,IAAAsC,EAAAkd,EAAA3E,QACA/d,EAAA0iB,EAAA1E,YACAzd,GAAA2C,EAAA,GAAAlD,EAAA,IAAAwF,EACAtF,GAAAgD,EAAA,GAAAlD,EAAA,IAAAwF,EACA,OAAAtF,GAAA,KAAAA,EAAA,MAAAK,IAAA,MAAAA,GAAA,KAAAoiB,EACAziB,GAAA,MAAAA,EAAA,MAAAK,IAAA,MAAAA,GAAA,KAAAqiB,EACAF,GAAA3X,OAAA7H,IAGA4f,EAAAvgB,OAAA,SAAAA,GACA,OAAAiT,GAAAC,IAAAlT,EAAAiT,GA5CAuN,GA4CAL,EAAAngB,OAAAkT,EAAAlT,GAAAogB,EAAApgB,UAAAqgB,EAAArgB,WA3CApD,EAAA4jB,EAAAjgB,OA2CA0S,GAzCArS,MAAA,SAAA5C,EAAAL,GAAuC,IAAZ,IAAAhC,GAAA,IAAYA,EAAAiB,GAAA4jB,EAAA7kB,GAAAiF,MAAA5C,EAAAL,IACvC8C,OAAA,WAAoC,IAAZ,IAAA9E,GAAA,IAAYA,EAAAiB,GAAA4jB,EAAA7kB,GAAA8E,UACpCe,UAAA,WAAuC,IAAZ,IAAA7F,GAAA,IAAYA,EAAAiB,GAAA4jB,EAAA7kB,GAAA6F,aACvCC,QAAA,WAAqC,IAAZ,IAAA9F,GAAA,IAAYA,EAAAiB,GAAA4jB,EAAA7kB,GAAA8F,WACrCC,aAAA,WAA0C,IAAZ,IAAA/F,GAAA,IAAYA,EAAAiB,GAAA4jB,EAAA7kB,GAAA+F,gBAC1CC,WAAA,WAAwC,IAAZ,IAAAhG,GAAA,IAAYA,EAAAiB,GAAA4jB,EAAA7kB,GAAAgG,gBARxC,IAAA6e,EACA5jB,GA8CA2jB,EAAAlW,UAAA,SAAAI,GACA,OAAAD,UAAAjK,QACA4f,EAAA9V,UAAAI,GAAA2V,EAAA/V,UAAAI,GAAA4V,EAAAhW,UAAAI,GACAlN,KAFA4iB,EAAA9V,aAKAkW,EAAA/E,MAAA,SAAA/Q,GACA,OAAAD,UAAAjK,QACA4f,EAAA3E,MAAA/Q,GAAA2V,EAAA5E,MAAA,IAAA/Q,GAAA4V,EAAA7E,MAAA/Q,GACA8V,EAAA9E,UAAA0E,EAAA1E,cAFA0E,EAAA3E,SAKA+E,EAAA9E,UAAA,SAAAhR,GACA,IAAAD,UAAAjK,OAAA,OAAA4f,EAAA1E,YACA,IAAAxY,EAAAkd,EAAA3E,QAAAxd,GAAAyM,EAAA,GAAA9M,GAAA8M,EAAA,GAiBA,OAfAuV,EAAAG,EACA1E,UAAAhR,GACA8Q,aAAAvd,EAAA,KAAAiF,EAAAtF,EAAA,KAAAsF,IAAAjF,EAAA,KAAAiF,EAAAtF,EAAA,KAAAsF,KACAjD,OAAAsgB,GAEAL,EAAAG,EACA3E,WAAAzd,EAAA,KAAAiF,EAAAtF,EAAA,KAAAsF,IACAsY,aAAAvd,EAAA,KAAAiF,EAAA9E,EAAAR,EAAA,IAAAsF,EAAA9E,IAAAH,EAAA,KAAAiF,EAAA9E,EAAAR,EAAA,KAAAsF,EAAA9E,KACA6B,OAAAsgB,GAEAJ,EAAAG,EACA5E,WAAAzd,EAAA,KAAAiF,EAAAtF,EAAA,KAAAsF,IACAsY,aAAAvd,EAAA,KAAAiF,EAAA9E,EAAAR,EAAA,KAAAsF,EAAA9E,IAAAH,EAAA,KAAAiF,EAAA9E,EAAAR,EAAA,KAAAsF,EAAA9E,KACA6B,OAAAsgB,GAEA/iB,KAGAgjB,EAAApB,UAAA,SAAAhM,EAAArW,GACA,OAAA4e,GAAA6E,EAAApN,EAAArW,IAGAyjB,EAAAnB,QAAA,SAAAvD,EAAA/e,GACA,OAAA8e,GAAA2E,EAAA1E,EAAA/e,IAGAyjB,EAAAlB,SAAA,SAAAtD,EAAAjf,GACA,OAAAgf,GAAAyE,EAAAxE,EAAAjf,IAGAyjB,EAAAjB,UAAA,SAAArD,EAAAnf,GACA,OAAAkf,GAAAuE,EAAAtE,EAAAnf,IAQAyjB,EAAA/E,MAAA,OC3GA,SAAAiF,GAAAjF,GACA,gBAAAxd,EAAAL,GACA,IAAAwK,EAAApJ,EAAAf,GACAoK,EAAArJ,EAAApB,GACAsF,EAAAuY,EAAArT,EAAAC,GACA,OACAnF,EAAAmF,EAAA/I,EAAArB,GACAiF,EAAA5D,EAAA1B,KAKA,SAAA+iB,GAAAhU,GACA,gBAAA1O,EAAAL,GACA,IAAAkK,EAAArI,EAAAxB,IAAAL,KACA3B,EAAA0Q,EAAA7E,GACA8Y,EAAAthB,EAAArD,GACA4kB,EAAA7hB,EAAA/C,GACA,OACA8C,EAAAd,EAAA2iB,EAAA9Y,EAAA+Y,GACAjhB,EAAAkI,GAAAlK,EAAAgjB,EAAA9Y,KClBA,IAAAgZ,GAAAJ,GAAA,SAAAK,GACA,OAAAthB,EAAA,KAAAshB,MAGAD,GAAArY,OAAAkY,GAAA,SAAA7Y,GACA,SAAAlI,EAAAkI,EAAA,KAGA,IAAAkZ,GAAA,WACA,OAAA1C,GAAAwC,IACArF,MAAA,QACA0D,UAAA,UCXA8B,GAAAP,GAAA,SAAAzkB,GACA,OAAAA,EAAA0D,EAAA1D,OAAAqD,EAAArD,KAGAglB,GAAAxY,OAAAkY,GAAA,SAAA7Y,GACA,OAAAA,IAGA,IAAAoZ,GAAA,WACA,OAAA5C,GAAA2C,IACAxF,MAAA,SACA0D,UAAA,UCXA,SAAAgC,GAAAxe,EAAAC,GACA,OAAAD,EAAAxD,EAAAO,GAAAlB,EAAAoE,GAAA,KAGAue,GAAA1Y,OAAA,SAAAxK,EAAAL,GACA,OAAAK,EAAA,EAAAa,EAAAI,EAAAtB,IAAAY,IAGA,IAAA4iB,GAAA,WACA,OAAAC,GAAAF,IACA1F,MAAA,IAAA/c,IAGA,SAAA2iB,GAAA/E,GACA,IAKAzL,EAAAC,EAAAC,EALA/U,EAAAsiB,GAAAhC,GACAjS,EAAArO,EAAAqO,OACAoR,EAAAzf,EAAAyf,MACAC,EAAA1f,EAAA0f,UACAF,EAAAxf,EAAAwf,WACA5K,EAAA,KAkBA,SAAA0Q,IACA,IAAApe,EAAA7E,EAAAod,IACA/d,EAAA1B,EAAAuN,GAAAvN,EAAAwN,UAAAf,QAAA,OACA,OAAA+S,EAAA,MAAA5K,IACAlT,EAAA,GAAAwF,EAAAxF,EAAA,GAAAwF,IAAAxF,EAAA,GAAAwF,EAAAxF,EAAA,GAAAwF,IAAAoZ,IAAA6E,KACA7iB,KAAAsU,IAAAlV,EAAA,GAAAwF,EAAA0N,GAAAC,IAAAvS,KAAAuU,IAAAnV,EAAA,GAAAwF,EAAA4N,GAAAC,MACAH,EAAAtS,KAAAsU,IAAAlV,EAAA,GAAAwF,EAAA2N,KAAAC,EAAAxS,KAAAuU,IAAAnV,EAAA,GAAAwF,EAAA6N,MAGA,OAzBA/U,EAAAyf,MAAA,SAAA/Q,GACA,OAAAD,UAAAjK,QAAAib,EAAA/Q,GAAA4W,KAAA7F,KAGAzf,EAAA0f,UAAA,SAAAhR,GACA,OAAAD,UAAAjK,QAAAkb,EAAAhR,GAAA4W,KAAA5F,KAGA1f,EAAAqO,OAAA,SAAAK,GACA,OAAAD,UAAAjK,QAAA6J,EAAAK,GAAA4W,KAAAjX,KAGArO,EAAAwf,WAAA,SAAA9Q,GACA,OAAAD,UAAAjK,QAAA,MAAAkK,EAAAkG,EAAAC,EAAAC,EAAAC,EAAA,MAAAH,GAAAlG,EAAA,MAAAmG,GAAAnG,EAAA,MAAAoG,GAAApG,EAAA,MAAAqG,GAAArG,EAAA,OAAA4W,KAAA,MAAA1Q,EAAA,OAAAA,EAAAC,IAAAC,EAAAC,KAYAuQ,IC9CA,SAAAC,GAAA3jB,GACA,OAAA8B,GAAAlB,EAAAZ,GAAA,GAGA,SAAA4jB,GAAA3Q,EAAAE,GACA,IAAAoF,EAAAnX,EAAA6R,GACAhU,EAAAgU,IAAAE,EAAAzR,EAAAuR,GAAA1R,EAAAgX,EAAAnX,EAAA+R,IAAA5R,EAAAoiB,GAAAxQ,GAAAwQ,GAAA1Q,IACA4Q,EAAAtL,EAAA9W,EAAAkiB,GAAA1Q,GAAAhU,KAEA,IAAAA,EAAA,OAAAskB,GAEA,SAAA7E,EAAAre,EAAAL,GACA6jB,EAAA,EAAgB7jB,GAAAY,EAAAJ,IAAAR,GAAAY,EAAAJ,GACNR,EAAAY,EAAAJ,IAAAR,EAAAY,EAAAJ,GACV,IAAAzB,EAAA8kB,EAAApiB,EAAAkiB,GAAA3jB,GAAAf,GACA,OAAAF,EAAA2C,EAAAzC,EAAAoB,GAAAwjB,EAAA9kB,EAAAqC,EAAAnC,EAAAoB,IAQA,OALAqe,EAAA7T,OAAA,SAAAxK,EAAAL,GACA,IAAA8jB,EAAAD,EAAA7jB,EAAAjB,EAAA4C,EAAA1C,GAAA4C,EAAAxB,IAAAyjB,KACA,OAAA3iB,EAAAd,EAAAY,EAAA6iB,IAAA7kB,EAAA0C,EAAAmiB,GAAA,EAAA5iB,EAAAO,EAAAoiB,EAAA9kB,EAAA,EAAAE,IAAA2B,IAGA8d,EAGA,IAAAqF,GAAA,WACA,OAAAnC,GAAAgC,IACA/F,MAAA,OACAgE,WAAA,SC/BA,SAAAmC,GAAAjf,EAAAC,GACA,OAAAD,EAAAC,GAGAgf,GAAAnZ,OAAAmZ,GAEA,IAAAC,GAAA,WACA,OAAAvD,GAAAsD,IACAnG,MAAA,SCNA,SAAAqG,GAAAjR,EAAAE,GACA,IAAAoF,EAAAnX,EAAA6R,GACAhU,EAAAgU,IAAAE,EAAAzR,EAAAuR,IAAAsF,EAAAnX,EAAA+R,OAAAF,GACAkR,EAAA5L,EAAAtZ,EAAAgU,EAEA,GAAAhS,EAAAhC,GAAAuB,EAAA,OAAAwjB,GAEA,SAAAtF,EAAAre,EAAAL,GACA,IAAAokB,EAAAD,EAAAnkB,EAAAqkB,EAAAplB,EAAAoB,EACA,OAAA+jB,EAAA1iB,EAAA2iB,GAAAF,EAAAC,EAAAhjB,EAAAijB,IAQA,OALA3F,EAAA7T,OAAA,SAAAxK,EAAAL,GACA,IAAAokB,EAAAD,EAAAnkB,EACA,OAAAmB,EAAAd,EAAAY,EAAAmjB,IAAAnlB,EAAA0C,EAAAyiB,GAAAD,EAAAxiB,EAAA1C,GAAA4C,EAAAxB,IAAA+jB,OAGA1F,EAGA,IAAA4F,GAAA,WACA,OAAA1C,GAAAsC,IACArG,MAAA,SACApR,QAAA,aCvBA,SAAA8X,GAAAlkB,EAAAL,GACA,IAAAyK,EAAArJ,EAAApB,GAAAsF,EAAAlE,EAAAf,GAAAoK,EACA,OAAAA,EAAA/I,EAAArB,GAAAiF,EAAA5D,EAAA1B,GAAAsF,GAGAif,GAAA1Z,OAAAkY,GAAA7hB,GAEA,IAAAsjB,GAAA,WACA,OAAA9D,GAAA6D,IACA1G,MAAA,SACA0D,UAAA,KCTA,SAAAkD,GAAAC,EAAAC,EAAAC,EAAAC,GACA,WAAAH,GAAA,IAAAC,GAAA,IAAAC,GAAA,IAAAC,EAAA7L,GAAAuE,IACAta,MAAA,SAAA5C,EAAAL,GACAL,KAAA0C,OAAAY,MAAA5C,EAAAqkB,EAAAE,EAAA5kB,EAAA2kB,EAAAE,MAKA,IAAAC,GAAA,WACA,IACA7R,EAAAC,EAAAC,EAEAmC,EACAC,EACA0H,EALA3X,EAAA,EAAAsf,EAAA,EAAAC,EAAA,EAAAE,EAAA,EAAAC,EAAA,EAAAvE,EAAAzH,GACAhG,EAAA,KACAmO,EAAAnI,GAKA,SAAApZ,IAEA,OADA0V,EAAAC,EAAA,KACA0H,EAGA,OAAAA,GACA5a,OAAA,SAAAA,GACA,OAAAiT,GAAAC,IAAAlT,EAAAiT,IAAAmL,EAAAU,EAAA5L,EAAAlT,KAEA8e,SAAA,SAAArU,GACA,OAAAD,UAAAjK,QAAAue,EAAArU,EAAAkG,EAAAC,EAAAC,EAAAC,EAAA,KAAAvT,KAAAuhB,GAEAvD,WAAA,SAAA9Q,GACA,OAAAD,UAAAjK,QAAAue,EAAA,MAAArU,GAAAkG,EAAAC,EAAAC,EAAAC,EAAA,KAAA6F,IAAAtF,GAAAV,GAAAlG,EAAA,MAAAmG,GAAAnG,EAAA,MAAAoG,GAAApG,EAAA,MAAAqG,GAAArG,EAAA,OAAAlN,KAAA,MAAAoT,EAAA,OAAAA,EAAAC,IAAAC,EAAAC,KAEA0K,MAAA,SAAA/Q,GACA,OAAAD,UAAAjK,QAAA6d,EAAAgE,IAAAnf,GAAAwH,GAAAiY,EAAAzf,EAAA0f,EAAAJ,EAAAC,GAAAjlB,KAAA0F,GAEAwY,UAAA,SAAAhR,GACA,OAAAD,UAAAjK,QAAA6d,EAAAgE,GAAAnf,EAAAyf,EAAAzf,EAAA0f,EAAAJ,GAAA9X,EAAA,GAAA+X,GAAA/X,EAAA,IAAAlN,MAAAglB,EAAAC,IAEAI,SAAA,SAAAnY,GACA,OAAAD,UAAAjK,QAAA6d,EAAAgE,GAAAnf,GAAAyf,EAAAjY,GAAA,KAAAxH,EAAA0f,EAAAJ,EAAAC,GAAAjlB,KAAAmlB,EAAA,GAEAG,SAAA,SAAApY,GACA,OAAAD,UAAAjK,QAAA6d,EAAAgE,GAAAnf,EAAAyf,EAAAzf,GAAA0f,EAAAlY,GAAA,KAAA8X,EAAAC,GAAAjlB,KAAAolB,EAAA,GAEAxD,UAAA,SAAAhM,EAAArW,GACA,OAAA4e,GAAAd,EAAAzH,EAAArW,IAEAsiB,QAAA,SAAAvD,EAAA/e,GACA,OAAA8e,GAAAhB,EAAAiB,EAAA/e,IAEAuiB,SAAA,SAAAtD,EAAAjf,GACA,OAAAgf,GAAAlB,EAAAmB,EAAAjf,IAEAwiB,UAAA,SAAArD,EAAAnf,GACA,OAAAkf,GAAApB,EAAAqB,EAAAnf,MCvDA,SAAAgmB,GAAApgB,EAAAC,GACA,IAAA+Z,EAAA/Z,IAAAogB,EAAArG,IACA,OACAha,GAAA,cAAAga,EAAAqG,MAAA,QAAArG,EAAA,QAAAqG,GAAA,UACApgB,GAAA,SAAA+Z,GAAA,QAAAqG,GAAA,QAAArG,EAAA,gBAAAqG,MAIAD,GAAAta,OAAA,SAAAxK,EAAAL,GACA,IAAA2H,EAAA3C,EAAAhF,EAAAhC,EAAA,GACA,GACA,IAAA+gB,EAAA/Z,IAAAogB,EAAArG,IACA/Z,GAAA2C,GAAA3C,GAAA,SAAA+Z,GAAA,QAAAqG,GAAA,QAAArG,EAAA,gBAAAqG,KAAAplB,IACA,SAAA+e,GAAA,QAAAqG,GAAA,QAAArG,EAAA,mBAAAqG,WACGnkB,EAAA0G,GAAAnH,KAAAxC,EAAA,GACH,OACAqC,GAAA,OAAA0e,EAAA/Z,MAAA+Z,UAAA,gBAAAA,GAAA,mBACA/Z,IAIA,IAAAqgB,GAAA,WACA,OAAA3E,GAAAyE,IACAtH,MAAA,UCtBA,SAAAyH,GAAAjlB,EAAAL,GACA,OAAAoB,EAAApB,GAAA0B,EAAArB,GAAAqB,EAAA1B,IAGAslB,GAAAza,OAAAkY,GAAA/gB,GAEA,IAAAujB,GAAA,WACA,OAAA7E,GAAA4E,IACAzH,MAAA,OACA0D,UAAA,GAAA/gB,ICTA,SAAAglB,GAAAnlB,EAAAL,GACA,IAAAyK,EAAArJ,EAAApB,GAAAsF,EAAA,EAAAlE,EAAAf,GAAAoK,EACA,OAAAA,EAAA/I,EAAArB,GAAAiF,EAAA5D,EAAA1B,GAAAsF,GAGAkgB,GAAA3a,OAAAkY,GAAA,SAAA7Y,GACA,SAAAhJ,EAAAgJ,KAGA,IAAAub,GAAA,WACA,OAAA/E,GAAA8E,IACA3H,MAAA,KACA0D,UAAA,MCbA,SAAAmE,GAAA3gB,EAAAC,GACA,OAAAzD,EAAAO,GAAAlB,EAAAoE,GAAA,KAAAD,GAGA2gB,GAAA7a,OAAA,SAAAxK,EAAAL,GACA,QAAAA,EAAA,EAAAkB,EAAAI,EAAAjB,IAAAO,IAGA,IAAA+kB,GAAA,WACA,IAAAvnB,EAAAqlB,GAAAiC,IACAjZ,EAAArO,EAAAqO,OACAb,EAAAxN,EAAAwN,OAUA,OARAxN,EAAAqO,OAAA,SAAAK,GACA,OAAAD,UAAAjK,OAAA6J,IAAAK,EAAA,GAAAA,EAAA,OAAAA,EAAAL,KAAA,IAAAK,EAAA,KAGA1O,EAAAwN,OAAA,SAAAkB,GACA,OAAAD,UAAAjK,OAAAgJ,GAAAkB,EAAA,GAAAA,EAAA,GAAAA,EAAAlK,OAAA,EAAAkK,EAAA,aAAAA,EAAAlB,KAAA,GAAAkB,EAAA,GAAAA,EAAA,QAGAlB,GAAA,SACAiS,MAAA,otECzBA,IAAA+H,EAAA,SAAAzlB,EAAAC,GACA,OAAAD,EAAAC,GAAA,EAAAD,EAAAC,EAAA,EAAAD,GAAAC,EAAA,EAAAsJ,KCCAmc,EAAA,SAAAC,GA0BA,IAAAjC,EAxBA,OADA,IAAAiC,EAAAljB,SAyBAihB,EAzBAiC,IA0BA,SAAAxnB,EAAA+B,GACA,OAAAulB,EAAA/B,EAAAvlB,GAAA+B,MAzBA0lB,KAAA,SAAA5lB,EAAAE,EAAA2lB,EAAAC,GAGA,IAFA,MAAAD,MAAA,GACA,MAAAC,MAAA9lB,EAAAyC,QACAojB,EAAAC,GAAA,CACA,IAAAC,EAAAF,EAAAC,IAAA,EACAH,EAAA3lB,EAAA+lB,GAAA7lB,GAAA,EAAA2lB,EAAAE,EAAA,EACAD,EAAAC,EAEA,OAAAF,GAEAG,MAAA,SAAAhmB,EAAAE,EAAA2lB,EAAAC,GAGA,IAFA,MAAAD,MAAA,GACA,MAAAC,MAAA9lB,EAAAyC,QACAojB,EAAAC,GAAA,CACA,IAAAC,EAAAF,EAAAC,IAAA,EACAH,EAAA3lB,EAAA+lB,GAAA7lB,GAAA,EAAA4lB,EAAAC,EACAF,EAAAE,EAAA,EAEA,OAAAF,KCpBA,IAAAI,EAAAP,EAAAD,GACAS,EAAAD,EAAAD,MACAG,EAAAF,EAAAL,KACAQ,EAAA,ECNAC,EAAA,SAAA7X,EAAAkV,GACA,MAAAA,MAAA4C,GAEA,IADA,IAAAzoB,EAAA,EAAAiB,EAAA0P,EAAA/L,OAAA,EAAArD,EAAAoP,EAAA,GAAA6X,EAAA,IAAAE,MAAAznB,EAAA,IAAAA,GACAjB,EAAAiB,GAAAunB,EAAAxoB,GAAA6lB,EAAAtkB,IAAAoP,IAAA3Q,IACA,OAAAwoB,GAGA,SAAAC,EAAAtmB,EAAAC,GACA,OAAAD,EAAAC,GCNA,IAAAumB,EAAA,SAAAC,EAAAC,EAAAC,GACA,IAGAC,EACAC,EACAhpB,EACAipB,EANAC,EAAAN,EAAAhkB,OACAgP,EAAAiV,EAAAjkB,OACAukB,EAAA,IAAAT,MAAAQ,EAAAtV,GAQA,IAFA,MAAAkV,MAAAL,GAEAM,EAAA/oB,EAAA,EAAkB+oB,EAAAG,IAASH,EAC3B,IAAAE,EAAAL,EAAAG,GAAAC,EAAA,EAAsCA,EAAApV,IAASoV,IAAAhpB,EAC/CmpB,EAAAnpB,GAAA8oB,EAAAG,EAAAJ,EAAAG,IAIA,OAAAG,GCnBAC,EAAA,SAAAjnB,EAAAC,GACA,OAAAA,EAAAD,GAAA,EAAAC,EAAAD,EAAA,EAAAC,GAAAD,EAAA,EAAAuJ,KCDA2d,EAAA,SAAAhnB,GACA,cAAAA,EAAAqJ,KAAArJ,GCCAinB,EAAA,SAAAH,EAAAI,GACA,IAIAvoB,EACA2I,EALA1I,EAAAkoB,EAAAvkB,OACAxE,EAAA,EACAJ,GAAA,EACAwpB,EAAA,EAGAC,EAAA,EAEA,SAAAF,EACA,OAAAvpB,EAAAiB,GACAyoB,MAAA1oB,EAAAqoB,EAAAF,EAAAnpB,OAGAypB,IAFA9f,EAAA3I,EAAAwoB,IAEAxoB,GADAwoB,GAAA7f,IAAAvJ,UAOA,OAAAJ,EAAAiB,GACAyoB,MAAA1oB,EAAAqoB,EAAAE,EAAAJ,EAAAnpB,KAAAmpB,OAGAM,IAFA9f,EAAA3I,EAAAwoB,IAEAxoB,GADAwoB,GAAA7f,IAAAvJ,KAMA,GAAAA,EAAA,SAAAqpB,GAAArpB,EAAA,IC7BAupB,EAAA,SAAAhZ,EAAAkV,GACA,IAAAre,EAAA8hB,EAAA3Y,EAAAkV,GACA,OAAAre,EAAA9E,KAAAmB,KAAA2D,MCJAgQ,EAAA,SAAA2R,EAAAI,GACA,IAEAvoB,EACAiW,EACAD,EAJA/V,EAAAkoB,EAAAvkB,OACA5E,GAAA,EAKA,SAAAupB,GACA,OAAAvpB,EAAAiB,GACA,UAAAD,EAAAmoB,EAAAnpB,KAAAgB,KAEA,IADAiW,EAAAD,EAAAhW,IACAhB,EAAAiB,GACA,OAAAD,EAAAmoB,EAAAnpB,MACAiX,EAAAjW,IAAAiW,EAAAjW,GACAgW,EAAAhW,IAAAgW,EAAAhW,SAQA,OAAAhB,EAAAiB,GACA,UAAAD,EAAAuoB,EAAAJ,EAAAnpB,KAAAmpB,KAAAnoB,KAEA,IADAiW,EAAAD,EAAAhW,IACAhB,EAAAiB,GACA,OAAAD,EAAAuoB,EAAAJ,EAAAnpB,KAAAmpB,MACAlS,EAAAjW,IAAAiW,EAAAjW,GACAgW,EAAAhW,IAAAgW,EAAAhW,IAOA,OAAAiW,EAAAD,ICnCA4S,EAAAlB,MAAArnB,UAEAsY,EAAAiQ,EAAAjQ,MACAjB,EAAAkR,EAAAlR,ICHA/L,EAAA,SAAAtK,GACA,kBACA,OAAAA,ICFA2Y,EAAA,SAAA3Y,GACA,OAAAA,GCDA8H,EAAA,SAAAqG,EAAAqZ,EAAAxb,GACAmC,KAAAqZ,KAAAxb,GAAApN,EAAA4N,UAAAjK,QAAA,GAAAilB,EAAArZ,IAAA,KAAAvP,EAAA,KAAAoN,EAMA,IAJA,IAAArO,GAAA,EACAiB,EAAA,EAAAyB,KAAAsU,IAAA,EAAAtU,KAAAW,MAAAwmB,EAAArZ,GAAAnC,IACAlE,EAAA,IAAAue,MAAAznB,KAEAjB,EAAAiB,GACAkJ,EAAAnK,GAAAwQ,EAAAxQ,EAAAqO,EAGA,OAAAlE,GCXA2f,EAAApnB,KAAAmB,KAAA,IACAkmB,EAAArnB,KAAAmB,KAAA,IACAmmB,EAAAtnB,KAAAmB,KAAA,GAEAomB,EAAA,SAAAzZ,EAAAqZ,EAAAK,GACA,IAAAtQ,EAEA3Y,EACAgpB,EACA5b,EAHArO,GAAA,EAMA,GADAkqB,MAAA1Z,SAAAqZ,OACAK,EAAA,SAAA1Z,GAEA,IADAoJ,EAAAiQ,EAAArZ,KAAAvP,EAAAuP,IAAAqZ,IAAA5oB,GACA,KAAAoN,EAAA8b,EAAA3Z,EAAAqZ,EAAAK,MAAAE,SAAA/b,GAAA,SAEA,GAAAA,EAAA,EAIA,IAHAmC,EAAA9N,KAAAW,KAAAmN,EAAAnC,GACAwb,EAAAnnB,KAAAc,MAAAqmB,EAAAxb,GACA4b,EAAA,IAAAvB,MAAAznB,EAAAyB,KAAAW,KAAAwmB,EAAArZ,EAAA,MACAxQ,EAAAiB,GAAAgpB,EAAAjqB,IAAAwQ,EAAAxQ,GAAAqO,OAKA,IAHAmC,EAAA9N,KAAAc,MAAAgN,EAAAnC,GACAwb,EAAAnnB,KAAAW,KAAAwmB,EAAAxb,GACA4b,EAAA,IAAAvB,MAAAznB,EAAAyB,KAAAW,KAAAmN,EAAAqZ,EAAA,MACA7pB,EAAAiB,GAAAgpB,EAAAjqB,IAAAwQ,EAAAxQ,GAAAqO,EAKA,OAFAuL,GAAAqQ,EAAArQ,UAEAqQ,GAGA,SAAAE,EAAA3Z,EAAAqZ,EAAAK,GACA,IAAA7b,GAAAwb,EAAArZ,GAAA9N,KAAAsU,IAAA,EAAAkT,GACAG,EAAA3nB,KAAAc,MAAAd,KAAAa,IAAA8K,GAAA3L,KAAA4nB,MACAC,EAAAlc,EAAA3L,KAAAe,IAAA,GAAA4mB,GACA,OAAAA,GAAA,GACAE,GAAAT,EAAA,GAAAS,GAAAR,EAAA,EAAAQ,GAAAP,EAAA,KAAAtnB,KAAAe,IAAA,GAAA4mB,IACA3nB,KAAAe,IAAA,IAAA4mB,IAAAE,GAAAT,EAAA,GAAAS,GAAAR,EAAA,EAAAQ,GAAAP,EAAA,KAGA,SAAAQ,EAAAha,EAAAqZ,EAAAK,GACA,IAAAO,EAAA/nB,KAAAO,IAAA4mB,EAAArZ,GAAA9N,KAAAsU,IAAA,EAAAkT,GACAQ,EAAAhoB,KAAAe,IAAA,GAAAf,KAAAc,MAAAd,KAAAa,IAAAknB,GAAA/nB,KAAA4nB,OACAC,EAAAE,EAAAC,EAIA,OAHAH,GAAAT,EAAAY,GAAA,GACAH,GAAAR,EAAAW,GAAA,EACAH,GAAAP,IAAAU,GAAA,GACAb,EAAArZ,GAAAka,ICjDA,IAAAC,EAAA,SAAAxB,GACA,OAAAzmB,KAAAW,KAAAX,KAAAa,IAAA4lB,EAAAvkB,QAAAlC,KAAAkoB,KAAA,GCQAC,EAAA,WACA,IAAA7pB,EAAAga,EACA8P,EAAAtT,EACAuT,EAAAJ,EAEA,SAAAK,EAAAC,GACA,IAAAjrB,EAEAqC,EADApB,EAAAgqB,EAAArmB,OAEAukB,EAAA,IAAAT,MAAAznB,GAEA,IAAAjB,EAAA,EAAeA,EAAAiB,IAAOjB,EACtBmpB,EAAAnpB,GAAAgB,EAAAiqB,EAAAjrB,KAAAirB,GAGA,IAAAC,EAAAJ,EAAA3B,GACAnU,EAAAkW,EAAA,GACAhW,EAAAgW,EAAA,GACAC,EAAAJ,EAAA5B,EAAAnU,EAAAE,GAGAwT,MAAA0C,QAAAD,KACAA,EAAAX,EAAAxV,EAAAE,EAAAiW,GACAA,EAAAhhB,EAAAzH,KAAAW,KAAA2R,EAAAmW,KAAAzoB,KAAAc,MAAA0R,EAAAiW,SAKA,IADA,IAAA/qB,EAAA+qB,EAAAvmB,OACAumB,EAAA,IAAAnW,GAAAmW,EAAA9b,UAAAjP,EACA,KAAA+qB,EAAA/qB,EAAA,GAAA8U,GAAAiW,EAAAhc,QAAA/O,EAEA,IACAirB,EADAC,EAAA,IAAA5C,MAAAtoB,EAAA,GAIA,IAAAJ,EAAA,EAAeA,GAAAI,IAAQJ,GACvBqrB,EAAAC,EAAAtrB,OACAgV,GAAAhV,EAAA,EAAAmrB,EAAAnrB,EAAA,GAAAgV,EACAqW,EAAAnW,GAAAlV,EAAAI,EAAA+qB,EAAAnrB,GAAAkV,EAIA,IAAAlV,EAAA,EAAeA,EAAAiB,IAAOjB,EAEtBgV,IADA3S,EAAA8mB,EAAAnpB,KACAqC,GAAA6S,GACAoW,EAAA/C,EAAA4C,EAAA9oB,EAAA,EAAAjC,IAAAkJ,KAAA2hB,EAAAjrB,IAIA,OAAAsrB,EAeA,OAZAN,EAAAhqB,MAAA,SAAA8N,GACA,OAAAD,UAAAjK,QAAA5D,EAAA,mBAAA8N,IAAAnC,EAAAmC,GAAAkc,GAAAhqB,GAGAgqB,EAAAF,OAAA,SAAAhc,GACA,OAAAD,UAAAjK,QAAAkmB,EAAA,mBAAAhc,IAAAnC,GAAAmC,EAAA,GAAAA,EAAA,KAAAkc,GAAAF,GAGAE,EAAAO,WAAA,SAAAzc,GACA,OAAAD,UAAAjK,QAAAmmB,EAAA,mBAAAjc,IAAA4Z,MAAA0C,QAAAtc,GAAAnC,EAAAgN,EAAAxZ,KAAA2O,IAAAnC,EAAAmC,GAAAkc,GAAAD,GAGAC,GCvEAQ,EAAA,SAAArC,EAAA5nB,EAAAgoB,GAEA,GADA,MAAAA,MAAAF,GACApoB,EAAAkoB,EAAAvkB,OAAA,CACA,IAAArD,OAAA,GAAAN,EAAA,SAAAsoB,EAAAJ,EAAA,KAAAA,GACA,GAAA5nB,GAAA,SAAAgoB,EAAAJ,EAAAloB,EAAA,GAAAA,EAAA,EAAAkoB,GACA,IAAAloB,EACAjB,GAAAiB,EAAA,GAAAM,EACAwnB,EAAArmB,KAAAc,MAAAxD,GACAipB,GAAAM,EAAAJ,EAAAJ,KAAAI,GAEA,OAAAF,IADAM,EAAAJ,EAAAJ,EAAA,GAAAA,EAAA,EAAAI,GACAF,IAAAjpB,EAAA+oB,KCPA0C,EAAA,SAAAtC,EAAAlS,EAAAD,GAEA,OADAmS,EAAAzQ,EAAAvY,KAAAgpB,EAAAE,GAAA5d,KAAAmc,GACAllB,KAAAW,MAAA2T,EAAAC,IAAA,GAAAuU,EAAArC,EAAA,KAAAqC,EAAArC,EAAA,MAAAzmB,KAAAe,IAAA0lB,EAAAvkB,QAAA,QCLA8mB,EAAA,SAAAvC,EAAAlS,EAAAD,GACA,OAAAtU,KAAAW,MAAA2T,EAAAC,IAAA,IAAA0S,EAAAR,GAAAzmB,KAAAe,IAAA0lB,EAAAvkB,QAAA,QCHA+mB,EAAA,SAAAxC,EAAAI,GACA,IAEAvoB,EACAgW,EAHA/V,EAAAkoB,EAAAvkB,OACA5E,GAAA,EAIA,SAAAupB,GACA,OAAAvpB,EAAAiB,GACA,UAAAD,EAAAmoB,EAAAnpB,KAAAgB,KAEA,IADAgW,EAAAhW,IACAhB,EAAAiB,GACA,OAAAD,EAAAmoB,EAAAnpB,KAAAgB,EAAAgW,IACAA,EAAAhW,QAQA,OAAAhB,EAAAiB,GACA,UAAAD,EAAAuoB,EAAAJ,EAAAnpB,KAAAmpB,KAAAnoB,KAEA,IADAgW,EAAAhW,IACAhB,EAAAiB,GACA,OAAAD,EAAAuoB,EAAAJ,EAAAnpB,KAAAmpB,KAAAnoB,EAAAgW,IACAA,EAAAhW,GAOA,OAAAgW,GC9BA4U,EAAA,SAAAzC,EAAAI,GACA,IAGAvoB,EAHAC,EAAAkoB,EAAAvkB,OACAxE,EAAAa,EACAjB,GAAA,EAEAypB,EAAA,EAEA,SAAAF,EACA,OAAAvpB,EAAAiB,GACAyoB,MAAA1oB,EAAAqoB,EAAAF,EAAAnpB,OACAI,EADAqpB,GAAAzoB,OAMA,OAAAhB,EAAAiB,GACAyoB,MAAA1oB,EAAAqoB,EAAAE,EAAAJ,EAAAnpB,KAAAmpB,OACA/oB,EADAqpB,GAAAzoB,EAKA,GAAAZ,EAAA,OAAAqpB,EAAArpB,GCnBAyrB,EAAA,SAAA1C,EAAAI,GACA,IAEAvoB,EAFAC,EAAAkoB,EAAAvkB,OACA5E,GAAA,EAEA8rB,KAEA,SAAAvC,EACA,OAAAvpB,EAAAiB,GACAyoB,MAAA1oB,EAAAqoB,EAAAF,EAAAnpB,MACA8rB,EAAAxiB,KAAAtI,QAMA,OAAAhB,EAAAiB,GACAyoB,MAAA1oB,EAAAqoB,EAAAE,EAAAJ,EAAAnpB,KAAAmpB,MACA2C,EAAAxiB,KAAAtI,GAKA,OAAAwqB,EAAAM,EAAArgB,KAAAmc,GAAA,KC1BAmE,EAAA,SAAAC,GAQA,IAPA,IACA5rB,EAGAkL,EACAqF,EALA1P,EAAA+qB,EAAApnB,OAEA5E,GAAA,EACAqR,EAAA,IAIArR,EAAAiB,GAAAoQ,GAAA2a,EAAAhsB,GAAA4E,OAGA,IAFA0G,EAAA,IAAAod,MAAArX,KAEApQ,GAAA,GAGA,IADAb,GADAuQ,EAAAqb,EAAA/qB,IACA2D,SACAxE,GAAA,GACAkL,IAAA+F,GAAAV,EAAAvQ,GAIA,OAAAkL,GCnBA2gB,EAAA,SAAA9C,EAAAI,GACA,IAEAvoB,EACAiW,EAHAhW,EAAAkoB,EAAAvkB,OACA5E,GAAA,EAIA,SAAAupB,GACA,OAAAvpB,EAAAiB,GACA,UAAAD,EAAAmoB,EAAAnpB,KAAAgB,KAEA,IADAiW,EAAAjW,IACAhB,EAAAiB,GACA,OAAAD,EAAAmoB,EAAAnpB,KAAAiX,EAAAjW,IACAiW,EAAAjW,QAQA,OAAAhB,EAAAiB,GACA,UAAAD,EAAAuoB,EAAAJ,EAAAnpB,KAAAmpB,KAAAnoB,KAEA,IADAiW,EAAAjW,IACAhB,EAAAiB,GACA,OAAAD,EAAAuoB,EAAAJ,EAAAnpB,KAAAmpB,KAAAlS,EAAAjW,IACAiW,EAAAjW,GAOA,OAAAiW,GChCAiV,EAAA,SAAAvb,EAAAwb,GAEA,IADA,IAAAnsB,EAAAmsB,EAAAvnB,OAAAwnB,EAAA,IAAA1D,MAAA1oB,GACAA,KAAAosB,EAAApsB,GAAA2Q,EAAAwb,EAAAnsB,IACA,OAAAosB,GCDAC,EAAA,SAAAlD,EAAArB,GACA,GAAA7mB,EAAAkoB,EAAAvkB,OAAA,CACA,IAAA3D,EAGAqrB,EAFAtsB,EAAA,EACAqR,EAAA,EAEAkb,EAAApD,EAAA9X,GAIA,IAFA,MAAAyW,MAAAF,KAEA5nB,EAAAiB,IACA6mB,EAAAwE,EAAAnD,EAAAnpB,GAAAusB,GAAA,OAAAzE,EAAAyE,QACAA,EAAAD,EAAAjb,EAAArR,GAIA,WAAA8nB,EAAAyE,KAAAlb,OAAA,IClBAmb,EAAA,SAAA7b,EAAAoY,EAAAC,GAKA,IAJA,IACAlnB,EACA9B,EAFAI,GAAA,MAAA4oB,EAAArY,EAAA/L,OAAAokB,IAAAD,EAAA,MAAAA,EAAA,GAAAA,GAIA3oB,GACAJ,EAAA0C,KAAA+pB,SAAArsB,IAAA,EACA0B,EAAA6O,EAAAvQ,EAAA2oB,GACApY,EAAAvQ,EAAA2oB,GAAApY,EAAA3Q,EAAA+oB,GACApY,EAAA3Q,EAAA+oB,GAAAjnB,EAGA,OAAA6O,GCZA+b,EAAA,SAAAvD,EAAAI,GACA,IAEAvoB,EAFAC,EAAAkoB,EAAAvkB,OACA5E,GAAA,EAEAypB,EAAA,EAEA,SAAAF,EACA,OAAAvpB,EAAAiB,IACAD,GAAAmoB,EAAAnpB,MAAAypB,GAAAzoB,QAKA,OAAAhB,EAAAiB,IACAD,GAAAuoB,EAAAJ,EAAAnpB,KAAAmpB,MAAAM,GAAAzoB,GAIA,OAAAyoB,GChBAkD,EAAA,SAAAC,GACA,KAAA3rB,EAAA2rB,EAAAhoB,QAAA,SACA,QAAA5E,GAAA,EAAAI,EAAA6rB,EAAAW,EAAAC,GAAAC,EAAA,IAAApE,MAAAtoB,KAAqEJ,EAAAI,GACrE,QAAAa,EAAAoQ,GAAA,EAAA0b,EAAAD,EAAA9sB,GAAA,IAAA0oB,MAAAznB,KAA0DoQ,EAAApQ,GAC1D8rB,EAAA1b,GAAAub,EAAAvb,GAAArR,GAGA,OAAA8sB,GAGA,SAAAD,EAAAvsB,GACA,OAAAA,EAAAsE,OCXA,IAAAooB,EAAA,WACA,OAAAL,EAAA9d,s/BCHA,IAAAoe,EAAA,SAAAprB,EAAAqrB,EAAA7rB,GACAQ,EAAAR,UAAA6rB,EAAA7rB,YACAA,EAAAQ,eAGA,SAAAsrB,EAAAC,EAAAC,GACA,IAAAhsB,EAAAX,OAAA4sB,OAAAF,EAAA/rB,WACA,QAAAoe,KAAA4N,EAAAhsB,EAAAoe,GAAA4N,EAAA5N,GACA,OAAApe,ECNA,SAAAksB,KAEA,IAGAC,EAAA,sBACAC,EAAA,gDACAC,EAAA,iDACAC,EAAA,mBACAC,EAAA,mBACAC,EAAA,IAAAC,OAAA,WAAAN,OAAA,QACAO,EAAA,IAAAD,OAAA,WAAAJ,OAAA,QACAM,EAAA,IAAAF,OAAA,YAAAN,MAAAC,GAAA,QACAQ,EAAA,IAAAH,OAAA,YAAAJ,MAAAD,GAAA,QACAS,EAAA,IAAAJ,OAAA,WAAAL,EAAAC,KAAA,QACAS,EAAA,IAAAL,OAAA,YAAAL,EAAAC,IAAAD,GAAA,QAEAW,GACAC,UAAA,SACAC,aAAA,SACAC,KAAA,MACAC,WAAA,QACAC,MAAA,SACAC,MAAA,SACAC,OAAA,SACAC,MAAA,EACAC,eAAA,SACAC,KAAA,IACAC,WAAA,QACAC,MAAA,SACAC,UAAA,SACAC,UAAA,QACAC,WAAA,QACAC,UAAA,SACAC,MAAA,SACAC,eAAA,QACAC,SAAA,SACAC,QAAA,SACAC,KAAA,MACAC,SAAA,IACAC,SAAA,MACAC,cAAA,SACAC,SAAA,SACAC,UAAA,MACAC,SAAA,SACAC,UAAA,SACAC,YAAA,QACAC,eAAA,QACAC,WAAA,SACAC,WAAA,SACAC,QAAA,QACAC,WAAA,SACAC,aAAA,QACAC,cAAA,QACAC,cAAA,QACAC,cAAA,QACAC,cAAA,MACAC,WAAA,QACAC,SAAA,SACAC,YAAA,MACAC,QAAA,QACAC,QAAA,QACAC,WAAA,QACAC,UAAA,SACAC,YAAA,SACAC,YAAA,QACAC,QAAA,SACAC,UAAA,SACAC,WAAA,SACAC,KAAA,SACAC,UAAA,SACAC,KAAA,QACAC,MAAA,MACAC,YAAA,SACAC,KAAA,QACAC,SAAA,SACAC,QAAA,SACAC,UAAA,SACAC,OAAA,QACAC,MAAA,SACAC,MAAA,SACAC,SAAA,SACAC,cAAA,SACAC,UAAA,QACAC,aAAA,SACAC,UAAA,SACAC,WAAA,SACAC,UAAA,SACAC,qBAAA,SACAC,UAAA,SACAC,WAAA,QACAC,UAAA,SACAC,UAAA,SACAC,YAAA,SACAC,cAAA,QACAC,aAAA,QACAC,eAAA,QACAC,eAAA,QACAC,eAAA,SACAC,YAAA,SACAC,KAAA,MACAC,UAAA,QACAC,MAAA,SACAC,QAAA,SACAC,OAAA,QACAC,iBAAA,QACAC,WAAA,IACAC,aAAA,SACAC,aAAA,QACAC,eAAA,QACAC,gBAAA,QACAC,kBAAA,MACAC,gBAAA,QACAC,gBAAA,SACAC,aAAA,QACAC,UAAA,SACAC,UAAA,SACAC,SAAA,SACAC,YAAA,SACAC,KAAA,IACAC,QAAA,SACAC,MAAA,QACAC,UAAA,QACAC,OAAA,SACAC,UAAA,SACAC,OAAA,SACAC,cAAA,SACAC,UAAA,SACAC,cAAA,SACAC,cAAA,SACAC,WAAA,SACAC,UAAA,SACAC,KAAA,SACAC,KAAA,SACAC,KAAA,SACAC,WAAA,SACAC,OAAA,QACAC,cAAA,QACAC,IAAA,SACAC,UAAA,SACAC,UAAA,QACAC,YAAA,QACAC,OAAA,SACAC,WAAA,SACAC,SAAA,QACAC,SAAA,SACAC,OAAA,SACAC,OAAA,SACAC,QAAA,QACAC,UAAA,QACAC,UAAA,QACAC,UAAA,QACAC,KAAA,SACAC,YAAA,MACAC,UAAA,QACA/yB,IAAA,SACAgzB,KAAA,MACAC,QAAA,SACAC,OAAA,SACAC,UAAA,QACAC,OAAA,SACAC,MAAA,SACAC,MAAA,SACAC,WAAA,SACAC,OAAA,SACAC,YAAA,UAYA,SAAAC,EAAAC,GACA,IAAAr3B,EAEA,OADAq3B,KAAA,IAAAC,OAAAC,eACAv3B,EAAAutB,EAAAiK,KAAAH,IAAA,IAAAI,GAAAz3B,EAAA03B,SAAA13B,EAAA,cAAAA,GAAA,MAAAA,GAAA,SAAAA,GAAA,GAAAA,IAAA,KAAAA,EAAA,IACAA,EAAAwtB,EAAAgK,KAAAH,IAAAM,EAAAD,SAAA13B,EAAA,SACAA,EAAAytB,EAAA+J,KAAAH,IAAA,IAAAI,EAAAz3B,EAAA,GAAAA,EAAA,GAAAA,EAAA,OACAA,EAAA2tB,EAAA6J,KAAAH,IAAA,IAAAI,EAAA,IAAAz3B,EAAA,WAAAA,EAAA,WAAAA,EAAA,WACAA,EAAA4tB,EAAA4J,KAAAH,IAAAO,EAAA53B,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAA,EAAA6tB,EAAA2J,KAAAH,IAAAO,EAAA,IAAA53B,EAAA,WAAAA,EAAA,WAAAA,EAAA,OAAAA,EAAA,KACAA,EAAA8tB,EAAA0J,KAAAH,IAAAQ,EAAA73B,EAAA,GAAAA,EAAA,OAAAA,EAAA,WACAA,EAAA+tB,EAAAyJ,KAAAH,IAAAQ,EAAA73B,EAAA,GAAAA,EAAA,OAAAA,EAAA,OAAAA,EAAA,IACAguB,EAAA9sB,eAAAm2B,GAAAM,EAAA3J,EAAAqJ,IACA,gBAAAA,EAAA,IAAAI,EAAAnsB,YAAA,GACA,KAGA,SAAAqsB,EAAA92B,GACA,WAAA42B,EAAA52B,GAAA,OAAAA,GAAA,UAAAA,EAAA,GAGA,SAAA+2B,EAAAj3B,EAAAolB,EAAA/jB,EAAAD,GAEA,OADAA,GAAA,IAAApB,EAAAolB,EAAA/jB,EAAAsJ,KACA,IAAAmsB,EAAA92B,EAAAolB,EAAA/jB,EAAAD,GAGA,SAAA+1B,EAAAz3B,GAEA,OADAA,aAAA8sB,IAAA9sB,EAAA+2B,EAAA/2B,IACAA,EAEA,IAAAo3B,GADAp3B,IAAA03B,OACAp3B,EAAAN,EAAA0lB,EAAA1lB,EAAA2B,EAAA3B,EAAA23B,SAFA,IAAAP,EAKA,SAAAQ,EAAAt3B,EAAAolB,EAAA/jB,EAAAg2B,GACA,WAAAvpB,UAAAjK,OAAAszB,EAAAn3B,GAAA,IAAA82B,EAAA92B,EAAAolB,EAAA/jB,EAAA,MAAAg2B,EAAA,EAAAA,GAGA,SAAAP,EAAA92B,EAAAolB,EAAA/jB,EAAAg2B,GACAz2B,KAAAZ,KACAY,KAAAwkB,KACAxkB,KAAAS,KACAT,KAAAy2B,WA+BA,SAAAH,EAAAjY,EAAAxe,EAAAvB,EAAAkC,GAIA,OAHAA,GAAA,EAAA6d,EAAAxe,EAAAvB,EAAAyL,IACAzL,GAAA,GAAAA,GAAA,EAAA+f,EAAAxe,EAAAkK,IACAlK,GAAA,IAAAwe,EAAAtU,KACA,IAAA4sB,EAAAtY,EAAAxe,EAAAvB,EAAAkC,GA6BA,SAAAo2B,EAAAvY,EAAAxe,EAAAvB,EAAAm4B,GACA,WAAAvpB,UAAAjK,OA3BA,SAAAnE,GACA,GAAAA,aAAA63B,EAAA,WAAAA,EAAA73B,EAAAuf,EAAAvf,EAAAe,EAAAf,EAAAR,EAAAQ,EAAA23B,SAEA,GADA33B,aAAA8sB,IAAA9sB,EAAA+2B,EAAA/2B,KACAA,EAAA,WAAA63B,EACA,GAAA73B,aAAA63B,EAAA,OAAA73B,EAEA,IAAAM,GADAN,IAAA03B,OACAp3B,EAAA,IACAolB,EAAA1lB,EAAA0lB,EAAA,IACA/jB,EAAA3B,EAAA2B,EAAA,IACA6U,EAAAvU,KAAAuU,IAAAlW,EAAAolB,EAAA/jB,GACA4U,EAAAtU,KAAAsU,IAAAjW,EAAAolB,EAAA/jB,GACA4d,EAAAtU,IACAlK,EAAAwV,EAAAC,EACAhX,GAAA+W,EAAAC,GAAA,EAUA,OATAzV,GACAwe,EAAAjf,IAAAiW,GAAAmP,EAAA/jB,GAAAZ,EAAA,GAAA2kB,EAAA/jB,GACA+jB,IAAAnP,GAAA5U,EAAArB,GAAAS,EAAA,GACAT,EAAAolB,GAAA3kB,EAAA,EACAA,GAAAvB,EAAA,GAAA+W,EAAAC,EAAA,EAAAD,EAAAC,EACA+I,GAAA,IAEAxe,EAAAvB,EAAA,GAAAA,EAAA,IAAA+f,EAEA,IAAAsY,EAAAtY,EAAAxe,EAAAvB,EAAAQ,EAAA23B,SAIAI,CAAAxY,GAAA,IAAAsY,EAAAtY,EAAAxe,EAAAvB,EAAA,MAAAm4B,EAAA,EAAAA,GAGA,SAAAE,EAAAtY,EAAAxe,EAAAvB,EAAAm4B,GACAz2B,KAAAqe,KACAre,KAAAH,KACAG,KAAA1B,KACA0B,KAAAy2B,WAiCA,SAAAK,EAAAzY,EAAA0Y,EAAAC,GACA,OAGA,KAHA3Y,EAAA,GAAA0Y,GAAAC,EAAAD,GAAA1Y,EAAA,GACAA,EAAA,IAAA2Y,EACA3Y,EAAA,IAAA0Y,GAAAC,EAAAD,IAAA,IAAA1Y,GAAA,GACA0Y,GA9JAzL,EAAAM,EAAAiK,GACAoB,YAAA,WACA,OAAAj3B,KAAAw2B,MAAAS,eAEAC,SAAA,WACA,OAAAl3B,KAAAw2B,MAAA,MA+CAlL,EAAA4K,EAAAQ,EAAAlL,EAAAI,GACAuL,SAAA,SAAAxxB,GAEA,OADAA,EAAA,MAAAA,EA3NA,EADA,GA4NA5E,KAAAe,IA3NA,EADA,GA4NA6D,GACA,IAAAuwB,EAAAl2B,KAAAZ,EAAAuG,EAAA3F,KAAAwkB,EAAA7e,EAAA3F,KAAAS,EAAAkF,EAAA3F,KAAAy2B,UAEAW,OAAA,SAAAzxB,GAEA,OADAA,EAAA,MAAAA,EAhOA,GAgOA5E,KAAAe,IAhOA,GAgOA6D,GACA,IAAAuwB,EAAAl2B,KAAAZ,EAAAuG,EAAA3F,KAAAwkB,EAAA7e,EAAA3F,KAAAS,EAAAkF,EAAA3F,KAAAy2B,UAEAD,IAAA,WACA,OAAAx2B,MAEAi3B,YAAA,WACA,UAAAj3B,KAAAZ,GAAAY,KAAAZ,GAAA,KACA,GAAAY,KAAAwkB,GAAAxkB,KAAAwkB,GAAA,KACA,GAAAxkB,KAAAS,GAAAT,KAAAS,GAAA,KACA,GAAAT,KAAAy2B,SAAAz2B,KAAAy2B,SAAA,GAEAS,SAAA,WACA,IAAA12B,EAAAR,KAAAy2B,QACA,YADyBj2B,EAAAunB,MAAAvnB,GAAA,EAAAO,KAAAsU,IAAA,EAAAtU,KAAAuU,IAAA,EAAA9U,KACzB,gBACAO,KAAAsU,IAAA,EAAAtU,KAAAuU,IAAA,IAAAvU,KAAAs2B,MAAAr3B,KAAAZ,IAAA,SACA2B,KAAAsU,IAAA,EAAAtU,KAAAuU,IAAA,IAAAvU,KAAAs2B,MAAAr3B,KAAAwkB,IAAA,SACAzjB,KAAAsU,IAAA,EAAAtU,KAAAuU,IAAA,IAAAvU,KAAAs2B,MAAAr3B,KAAAS,IAAA,KACA,IAAAD,EAAA,SAAAA,EAAA,SAgDA8qB,EAAAqL,EAAAC,EAAApL,EAAAI,GACAuL,SAAA,SAAAxxB,GAEA,OADAA,EAAA,MAAAA,EAnSA,EADA,GAoSA5E,KAAAe,IAnSA,EADA,GAoSA6D,GACA,IAAAgxB,EAAA32B,KAAAqe,EAAAre,KAAAH,EAAAG,KAAA1B,EAAAqH,EAAA3F,KAAAy2B,UAEAW,OAAA,SAAAzxB,GAEA,OADAA,EAAA,MAAAA,EAxSA,GAwSA5E,KAAAe,IAxSA,GAwSA6D,GACA,IAAAgxB,EAAA32B,KAAAqe,EAAAre,KAAAH,EAAAG,KAAA1B,EAAAqH,EAAA3F,KAAAy2B,UAEAD,IAAA,WACA,IAAAnY,EAAAre,KAAAqe,EAAA,SAAAre,KAAAqe,EAAA,GACAxe,EAAAkoB,MAAA1J,IAAA0J,MAAA/nB,KAAAH,GAAA,EAAAG,KAAAH,EACAvB,EAAA0B,KAAA1B,EACA04B,EAAA14B,KAAA,GAAAA,EAAA,EAAAA,GAAAuB,EACAk3B,EAAA,EAAAz4B,EAAA04B,EACA,WAAAd,EACAY,EAAAzY,GAAA,IAAAA,EAAA,IAAAA,EAAA,IAAA0Y,EAAAC,GACAF,EAAAzY,EAAA0Y,EAAAC,GACAF,EAAAzY,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAA0Y,EAAAC,GACAh3B,KAAAy2B,UAGAQ,YAAA,WACA,UAAAj3B,KAAAH,GAAAG,KAAAH,GAAA,GAAAkoB,MAAA/nB,KAAAH,KACA,GAAAG,KAAA1B,GAAA0B,KAAA1B,GAAA,GACA,GAAA0B,KAAAy2B,SAAAz2B,KAAAy2B,SAAA,MC/TA,IAAAa,EAAAv2B,KAAAC,GAAA,IACAu2B,EAAA,IAAAx2B,KAAAC,GCIAw2B,EAAA,OACAC,EAAA,EACAC,EAAA,QACAC,EAAA,KACAC,EAAA,KACAC,EAAA,EAAAD,IACAE,EAAAF,MAEA,SAAAG,EAAAj5B,GACA,GAAAA,aAAAk5B,EAAA,WAAAA,EAAAl5B,EAAAR,EAAAQ,EAAA0B,EAAA1B,EAAA2B,EAAA3B,EAAA23B,SACA,GAAA33B,aAAAm5B,EAAA,CACA,IAAA5Z,EAAAvf,EAAAuf,EAAAiZ,EACA,WAAAU,EAAAl5B,EAAAR,EAAAyC,KAAAU,IAAA4c,GAAAvf,EAAAJ,EAAAqC,KAAAgB,IAAAsc,GAAAvf,EAAAJ,EAAAI,EAAA23B,SAEA33B,aAAAo3B,IAAAp3B,EAAAy3B,EAAAz3B,IACA,IAAA2B,EAAAy3B,EAAAp5B,EAAAM,GACAoB,EAAA03B,EAAAp5B,EAAA0lB,GACAlmB,EAAA45B,EAAAp5B,EAAA2B,GACAC,EAAAy3B,GAAA,SAAA13B,EAAA,SAAAD,EAAA,SAAAlC,GAAAk5B,GACAn3B,EAAA83B,GAAA,SAAA13B,EAAA,SAAAD,EAAA,QAAAlC,GAAAm5B,GAEA,WAAAO,EAAA,IAAA33B,EAAA,QAAAK,EAAAL,GAAA,KAAAA,EADA83B,GAAA,SAAA13B,EAAA,QAAAD,EAAA,SAAAlC,GAAAo5B,IACA54B,EAAA23B,SAGA,SAAA2B,EAAA95B,EAAAkC,EAAAC,EAAAg2B,GACA,WAAAvpB,UAAAjK,OAAA80B,EAAAz5B,GAAA,IAAA05B,EAAA15B,EAAAkC,EAAAC,EAAA,MAAAg2B,EAAA,EAAAA,GAGA,SAAAuB,EAAA15B,EAAAkC,EAAAC,EAAAg2B,GACAz2B,KAAA1B,KACA0B,KAAAQ,KACAR,KAAAS,KACAT,KAAAy2B,WA0BA,SAAA0B,EAAAh4B,GACA,OAAAA,EAAA23B,EAAA/2B,KAAAe,IAAA3B,EAAA,KAAAA,EAAA03B,EAAAF,EAGA,SAAAU,EAAAl4B,GACA,OAAAA,EAAAy3B,EAAAz3B,MAAA03B,GAAA13B,EAAAw3B,GAGA,SAAAW,EAAA53B,GACA,YAAAA,GAAA,eAAAA,EAAA,MAAAK,KAAAe,IAAApB,EAAA,aAGA,SAAAw3B,EAAAx3B,GACA,OAAAA,GAAA,aAAAA,EAAA,MAAAK,KAAAe,KAAApB,EAAA,iBAUA,SAAA63B,EAAAla,EAAA3f,EAAAJ,EAAAm4B,GACA,WAAAvpB,UAAAjK,OARA,SAAAnE,GACA,GAAAA,aAAAm5B,EAAA,WAAAA,EAAAn5B,EAAAuf,EAAAvf,EAAAJ,EAAAI,EAAAR,EAAAQ,EAAA23B,SACA33B,aAAAk5B,IAAAl5B,EAAAi5B,EAAAj5B,IACA,IAAAuf,EAAAtd,KAAAS,MAAA1C,EAAA2B,EAAA3B,EAAA0B,GAAA+2B,EACA,WAAAU,EAAA5Z,EAAA,EAAAA,EAAA,IAAAA,EAAAtd,KAAAmB,KAAApD,EAAA0B,EAAA1B,EAAA0B,EAAA1B,EAAA2B,EAAA3B,EAAA2B,GAAA3B,EAAAR,EAAAQ,EAAA23B,SAIA+B,CAAAna,GAAA,IAAA4Z,EAAA5Z,EAAA3f,EAAAJ,EAAA,MAAAm4B,EAAA,EAAAA,GAGA,SAAAwB,EAAA5Z,EAAA3f,EAAAJ,EAAAm4B,GACAz2B,KAAAqe,KACAre,KAAAtB,KACAsB,KAAA1B,KACA0B,KAAAy2B,WAtDAnL,EAAA0M,EAAAI,EAAA5M,EAAAI,GACAuL,SAAA,SAAAxxB,GACA,WAAAqyB,EAAAh4B,KAAA1B,EAtCA,IAsCA,MAAAqH,EAAA,EAAAA,GAAA3F,KAAAQ,EAAAR,KAAAS,EAAAT,KAAAy2B,UAEAW,OAAA,SAAAzxB,GACA,WAAAqyB,EAAAh4B,KAAA1B,EAzCA,IAyCA,MAAAqH,EAAA,EAAAA,GAAA3F,KAAAQ,EAAAR,KAAAS,EAAAT,KAAAy2B,UAEAD,IAAA,WACA,IAAAn2B,GAAAL,KAAA1B,EAAA,QACAoC,EAAAqnB,MAAA/nB,KAAAQ,GAAAH,IAAAL,KAAAQ,EAAA,IACA+J,EAAAwd,MAAA/nB,KAAAS,GAAAJ,IAAAL,KAAAS,EAAA,IAIA,OAHAJ,EAAAo3B,EAAAY,EAAAh4B,GAGA,IAAA61B,EACAoC,EAAA,WAHA53B,EAAA82B,EAAAa,EAAA33B,IAGA,UAAAL,EAAA,UAFAkK,EAAAmtB,EAAAW,EAAA9tB,KAGA+tB,GAAA,QAAA53B,EAAA,UAAAL,EAAA,QAAAkK,GACA+tB,EAAA,SAAA53B,EAAA,SAAAL,EAAA,UAAAkK,GACAvK,KAAAy2B,aAuCAnL,EAAA2M,EAAAM,EAAA/M,EAAAI,GACAuL,SAAA,SAAAxxB,GACA,WAAAsyB,EAAAj4B,KAAAqe,EAAAre,KAAAtB,EAAAsB,KAAA1B,EA/FA,IA+FA,MAAAqH,EAAA,EAAAA,GAAA3F,KAAAy2B,UAEAW,OAAA,SAAAzxB,GACA,WAAAsyB,EAAAj4B,KAAAqe,EAAAre,KAAAtB,EAAAsB,KAAA1B,EAlGA,IAkGA,MAAAqH,EAAA,EAAAA,GAAA3F,KAAAy2B,UAEAD,IAAA,WACA,OAAAuB,EAAA/3B,MAAAw2B,UCrGA,IAEAiC,GAAA,OACAC,GAAA,OACAC,EAAA,QACAC,EAAAD,EAAAD,EACAG,EALA,QAKAF,EACAG,EANA,QAMAL,IAPA,OAOAC,EAgBA,SAAAK,EAAA1a,EAAAxe,EAAAvB,EAAAm4B,GACA,WAAAvpB,UAAAjK,OAfA,SAAAnE,GACA,GAAAA,aAAAk6B,EAAA,WAAAA,EAAAl6B,EAAAuf,EAAAvf,EAAAe,EAAAf,EAAAR,EAAAQ,EAAA23B,SACA33B,aAAAo3B,IAAAp3B,EAAAy3B,EAAAz3B,IACA,IAAAM,EAAAN,EAAAM,EAAA,IACAolB,EAAA1lB,EAAA0lB,EAAA,IACA/jB,EAAA3B,EAAA2B,EAAA,IACAnC,GAAAw6B,EAAAr4B,EAAAm4B,EAAAx5B,EAAAy5B,EAAArU,IAAAsU,EAAAF,EAAAC,GACAI,EAAAx4B,EAAAnC,EACAqH,GAAAgzB,GAAAnU,EAAAlmB,GAAAm6B,EAAAQ,GAAAP,EACA74B,EAAAkB,KAAAmB,KAAAyD,IAAAszB,MAAAN,EAAAr6B,GAAA,EAAAA,IACA+f,EAAAxe,EAAAkB,KAAAS,MAAAmE,EAAAszB,GAAA1B,EAAA,IAAAxtB,IACA,WAAAivB,EAAA3a,EAAA,EAAAA,EAAA,IAAAA,EAAAxe,EAAAvB,EAAAQ,EAAA23B,SAIAyC,CAAA7a,GAAA,IAAA2a,EAAA3a,EAAAxe,EAAAvB,EAAA,MAAAm4B,EAAA,EAAAA,GAGA,SAAAuC,EAAA3a,EAAAxe,EAAAvB,EAAAm4B,GACAz2B,KAAAqe,KACAre,KAAAH,KACAG,KAAA1B,KACA0B,KAAAy2B,WAGAnL,EAAA0N,EAAAD,EAAAvN,EAAAI,GACAuL,SAAA,SAAAxxB,GAEA,OADAA,EAAA,MAAAA,EHnCA,EADA,GGoCA5E,KAAAe,IHnCA,EADA,GGoCA6D,GACA,IAAAqzB,EAAAh5B,KAAAqe,EAAAre,KAAAH,EAAAG,KAAA1B,EAAAqH,EAAA3F,KAAAy2B,UAEAW,OAAA,SAAAzxB,GAEA,OADAA,EAAA,MAAAA,EHxCA,GGwCA5E,KAAAe,IHxCA,GGwCA6D,GACA,IAAAqzB,EAAAh5B,KAAAqe,EAAAre,KAAAH,EAAAG,KAAA1B,EAAAqH,EAAA3F,KAAAy2B,UAEAD,IAAA,WACA,IAAAnY,EAAA0J,MAAA/nB,KAAAqe,GAAA,GAAAre,KAAAqe,EAAA,KAAAiZ,EACAh5B,GAAA0B,KAAA1B,EACAkC,EAAAunB,MAAA/nB,KAAAH,GAAA,EAAAG,KAAAH,EAAAvB,GAAA,EAAAA,GACA66B,EAAAp4B,KAAAU,IAAA4c,GACA+a,EAAAr4B,KAAAgB,IAAAsc,GACA,WAAA6X,EACA,KAAA53B,EAAAkC,IAlDA,OAkDA24B,EAjDA,QAiDAC,IACA,KAAA96B,EAAAkC,GAAAi4B,EAAAU,EAAAT,EAAAU,IACA,KAAA96B,EAAAkC,GAAAm4B,EAAAQ,IACAn5B,KAAAy2B,sPCzDA,SAAA4C,EAAA9sB,EAAA0G,EAAAqmB,EAAAC,EAAAC,GACA,IAAA7mB,EAAApG,IAAAktB,EAAA9mB,EAAApG,EACA,YAAAA,EAAA,EAAAoG,EAAA8mB,GAAAxmB,GACA,IAAAN,EAAA,EAAA8mB,GAAAH,GACA,IAAA/sB,EAAA,EAAAoG,EAAA,EAAA8mB,GAAAF,EACAE,EAAAD,GAAA,EAGA,IAAAE,EAAA,SAAAlS,GACA,IAAAloB,EAAAkoB,EAAAvkB,OAAA,EACA,gBAAA9C,GACA,IAAA9B,EAAA8B,GAAA,EAAAA,EAAA,EAAAA,GAAA,GAAAA,EAAA,EAAAb,EAAA,GAAAyB,KAAAc,MAAA1B,EAAAb,GACAg6B,EAAA9R,EAAAnpB,GACAk7B,EAAA/R,EAAAnpB,EAAA,GACA4U,EAAA5U,EAAA,EAAAmpB,EAAAnpB,EAAA,KAAAi7B,EAAAC,EACAC,EAAAn7B,EAAAiB,EAAA,EAAAkoB,EAAAnpB,EAAA,KAAAk7B,EAAAD,EACA,OAAAD,GAAAl5B,EAAA9B,EAAAiB,KAAA2T,EAAAqmB,EAAAC,EAAAC,KCdAG,EAAA,SAAAnS,GACA,IAAAloB,EAAAkoB,EAAAvkB,OACA,gBAAA9C,GACA,IAAA9B,EAAA0C,KAAAc,QAAA1B,GAAA,OAAAA,KAAAb,GACA2T,EAAAuU,GAAAnpB,EAAAiB,EAAA,GAAAA,GACAg6B,EAAA9R,EAAAnpB,EAAAiB,GACAi6B,EAAA/R,GAAAnpB,EAAA,GAAAiB,GACAk6B,EAAAhS,GAAAnpB,EAAA,GAAAiB,GACA,OAAA+5B,GAAAl5B,EAAA9B,EAAAiB,KAAA2T,EAAAqmB,EAAAC,EAAAC,KCVAxuB,EAAA,SAAAtK,GACA,kBACA,OAAAA,ICAA,SAAAk5B,EAAAp5B,EAAA7B,GACA,gBAAAwB,GACA,OAAAK,EAAAL,EAAAxB,GAUA,SAAAk7B,EAAAr5B,EAAAC,GACA,IAAA9B,EAAA8B,EAAAD,EACA,OAAA7B,EAAAi7B,EAAAp5B,EAAA7B,EAAA,KAAAA,GAAA,IAAAA,EAAA,IAAAoC,KAAAs2B,MAAA14B,EAAA,KAAAA,GAAAqM,EAAA+c,MAAAvnB,GAAAC,EAAAD,GAGA,SAAAs5B,EAAAz5B,GACA,WAAAA,MAAA05B,EAAA,SAAAv5B,EAAAC,GACA,OAAAA,EAAAD,EAbA,SAAAA,EAAAC,EAAAJ,GACA,OAAAG,EAAAO,KAAAe,IAAAtB,EAAAH,GAAAI,EAAAM,KAAAe,IAAArB,EAAAJ,GAAAG,EAAAH,EAAA,EAAAA,EAAA,SAAAF,GACA,OAAAY,KAAAe,IAAAtB,EAAAL,EAAAM,EAAAJ,IAWA25B,CAAAx5B,EAAAC,EAAAJ,GAAA2K,EAAA+c,MAAAvnB,GAAAC,EAAAD,IAIA,SAAAu5B,EAAAv5B,EAAAC,GACA,IAAA9B,EAAA8B,EAAAD,EACA,OAAA7B,EAAAi7B,EAAAp5B,EAAA7B,GAAAqM,EAAA+c,MAAAvnB,GAAAC,EAAAD,SCtBA,SAAAy5B,EAAA55B,GACA,IAAA65B,EAAAJ,EAAAz5B,GAEA,SAAAm2B,EAAA3nB,EAAAsrB,GACA,IAAA/6B,EAAA86B,GAAArrB,EAAA9P,OAAAq7B,EAAA,EAAAr7B,CAAA8P,IAAAzP,GAAA+6B,EAAAp7B,OAAAq7B,EAAA,EAAAr7B,CAAAo7B,IAAA/6B,GACAolB,EAAA0V,EAAArrB,EAAA2V,EAAA2V,EAAA3V,GACA/jB,EAAAy5B,EAAArrB,EAAApO,EAAA05B,EAAA15B,GACAg2B,EAAAsD,EAAAlrB,EAAA4nB,QAAA0D,EAAA1D,SACA,gBAAAt2B,GAKA,OAJA0O,EAAAzP,IAAAe,GACA0O,EAAA2V,IAAArkB,GACA0O,EAAApO,IAAAN,GACA0O,EAAA4nB,UAAAt2B,GACA0O,EAAA,IAMA,OAFA2nB,EAAA6D,MAAAJ,EAEAzD,GACC,GAED,SAAA8D,EAAAC,GACA,gBAAAC,GACA,IAIAn8B,EAAA67B,EAJA56B,EAAAk7B,EAAAv3B,OACA7D,EAAA,IAAA2nB,MAAAznB,GACAklB,EAAA,IAAAuC,MAAAznB,GACAmB,EAAA,IAAAsmB,MAAAznB,GAEA,IAAAjB,EAAA,EAAeA,EAAAiB,IAAOjB,EACtB67B,EAAAn7B,OAAAq7B,EAAA,EAAAr7B,CAAAy7B,EAAAn8B,IACAe,EAAAf,GAAA67B,EAAA96B,GAAA,EACAolB,EAAAnmB,GAAA67B,EAAA1V,GAAA,EACA/jB,EAAApC,GAAA67B,EAAAz5B,GAAA,EAMA,OAJArB,EAAAm7B,EAAAn7B,GACAolB,EAAA+V,EAAA/V,GACA/jB,EAAA85B,EAAA95B,GACAy5B,EAAAzD,QAAA,EACA,SAAAt2B,GAIA,OAHA+5B,EAAA96B,IAAAe,GACA+5B,EAAA1V,IAAArkB,GACA+5B,EAAAz5B,IAAAN,GACA+5B,EAAA,KAKA,IAAAO,EAAAH,EAAAZ,GACAgB,EAAAJ,EAAAX,GCpDA3qB,EAAA,SAAAxO,EAAAC,GACA,IAIApC,EAJAs8B,EAAAl6B,IAAAwC,OAAA,EACA23B,EAAAp6B,EAAAO,KAAAuU,IAAAqlB,EAAAn6B,EAAAyC,QAAA,EACAvC,EAAA,IAAAqmB,MAAA6T,GACAl8B,EAAA,IAAAqoB,MAAA4T,GAGA,IAAAt8B,EAAA,EAAaA,EAAAu8B,IAAQv8B,EAAAqC,EAAArC,GAAAw8B,EAAAr6B,EAAAnC,GAAAoC,EAAApC,IACrB,KAAQA,EAAAs8B,IAAQt8B,EAAAK,EAAAL,GAAAoC,EAAApC,GAEhB,gBAAA8B,GACA,IAAA9B,EAAA,EAAeA,EAAAu8B,IAAQv8B,EAAAK,EAAAL,GAAAqC,EAAArC,GAAA8B,GACvB,OAAAzB,ICdAo8B,EAAA,SAAAt6B,EAAAC,GACA,IAAA9B,EAAA,IAAAo8B,KACA,OAAAt6B,GAAAD,KAAA,SAAAL,GACA,OAAAxB,EAAAq8B,QAAAx6B,EAAAC,EAAAN,GAAAxB,ICHA+oB,EAAA,SAAAlnB,EAAAC,GACA,OAAAA,GAAAD,KAAA,SAAAL,GACA,OAAAK,EAAAC,EAAAN,ICAAX,EAAA,SAAAgB,EAAAC,GACA,IAEAkF,EAFAtH,KACAK,KAMA,IAAAiH,KAHA,OAAAnF,GAAA,iBAAAA,UACA,OAAAC,GAAA,iBAAAA,UAEAA,EACAkF,KAAAnF,EACAnC,EAAAsH,GAAAk1B,EAAAr6B,EAAAmF,GAAAlF,EAAAkF,IAEAjH,EAAAiH,GAAAlF,EAAAkF,GAIA,gBAAAxF,GACA,IAAAwF,KAAAtH,EAAAK,EAAAiH,GAAAtH,EAAAsH,GAAAxF,GACA,OAAAzB,IClBAu8B,EAAA,8CACAC,EAAA,IAAA/O,OAAA8O,EAAAE,OAAA,KAcA,ICfAC,EACAC,EACAC,EACAC,EDYAC,EAAA,SAAAh7B,EAAAC,GACA,IACAg7B,EACAC,EACAC,EAHAhb,EAAAsa,EAAAW,UAAAV,EAAAU,UAAA,EAIAv9B,GAAA,EACAwB,KACA+S,KAMA,IAHApS,GAAA,GAAAC,GAAA,IAGAg7B,EAAAR,EAAAhF,KAAAz1B,MACAk7B,EAAAR,EAAAjF,KAAAx1B,MACAk7B,EAAAD,EAAAG,OAAAlb,IACAgb,EAAAl7B,EAAAuX,MAAA2I,EAAAgb,GACA97B,EAAAxB,GAAAwB,EAAAxB,IAAAs9B,EACA97B,IAAAxB,GAAAs9B,IAEAF,IAAA,OAAAC,IAAA,IACA77B,EAAAxB,GAAAwB,EAAAxB,IAAAq9B,EACA77B,IAAAxB,GAAAq9B,GAEA77B,IAAAxB,GAAA,KACAuU,EAAAjL,MAActJ,IAAAqC,EAAAgnB,EAAA+T,EAAAC,MAEd/a,EAAAua,EAAAU,UAYA,OARAjb,EAAAlgB,EAAAwC,SACA04B,EAAAl7B,EAAAuX,MAAA2I,GACA9gB,EAAAxB,GAAAwB,EAAAxB,IAAAs9B,EACA97B,IAAAxB,GAAAs9B,GAKA97B,EAAAoD,OAAA,EAAA2P,EAAA,GA7CA,SAAAnS,GACA,gBAAAN,GACA,OAAAM,EAAAN,GAAA,IA4CA27B,CAAAlpB,EAAA,GAAAlS,GApDA,SAAAD,GACA,kBACA,OAAAA,GAmDAs7B,CAAAt7B,IACAA,EAAAmS,EAAA3P,OAAA,SAAA9C,GACA,QAAArB,EAAAT,EAAA,EAA4BA,EAAAoC,IAAOpC,EAAAwB,GAAAf,EAAA8T,EAAAvU,OAAAS,EAAA4B,EAAAP,GACnC,OAAAN,EAAAwd,KAAA,OEpDAwd,EAAA,SAAAr6B,EAAAC,GACA,IAAA/B,EAAAyB,SAAAM,EACA,aAAAA,GAAA,YAAAN,EAAA6K,EAAAvK,IACA,WAAAN,EAAAunB,EACA,WAAAvnB,GAAAzB,EAAAK,OAAAq7B,EAAA,EAAAr7B,CAAA0B,OAAA/B,EAAAs9B,GAAAR,EACA/6B,aAAA25B,EAAA,EAAA4B,EACAv7B,aAAAs6B,KAAAD,EACA/T,MAAA0C,QAAAhpB,GAAAuO,EACA,mBAAAvO,EAAAF,SAAA,mBAAAE,EAAAy2B,UAAAnP,MAAAtnB,GAAAjB,EACAkoB,GAAAlnB,EAAAC,IClBA42B,EAAA,SAAA72B,EAAAC,GACA,OAAAA,GAAAD,KAAA,SAAAL,GACA,OAAAY,KAAAs2B,MAAA72B,EAAAC,EAAAN,KCFAiB,EAAA,IAAAL,KAAAC,GAEAqY,GACA4iB,WAAA,EACAC,WAAA,EACAjwB,OAAA,EACAkwB,MAAA,EACAC,OAAA,EACAC,OAAA,GAGAC,EAAA,SAAA97B,EAAAC,EAAA/B,EAAAC,EAAAsP,EAAAiW,GACA,IAAAkY,EAAAC,EAAAF,EAKA,OAJAC,EAAAr7B,KAAAmB,KAAA1B,IAAAC,QAAAD,GAAA47B,EAAA37B,GAAA27B,IACAD,EAAA37B,EAAA9B,EAAA+B,EAAA9B,KAAAD,GAAA8B,EAAA27B,EAAAx9B,GAAA8B,EAAA07B,IACAE,EAAAt7B,KAAAmB,KAAAxD,IAAAC,QAAAD,GAAA29B,EAAA19B,GAAA09B,EAAAF,GAAAE,GACA77B,EAAA7B,EAAA8B,EAAA/B,IAAA8B,KAAAC,KAAA07B,KAAAC,OAEAH,WAAAhuB,EACAiuB,WAAAhY,EACAjY,OAAAlL,KAAAS,MAAAf,EAAAD,GAAAY,EACA+6B,MAAAp7B,KAAAQ,KAAA46B,GAAA/6B,EACAg7B,SACAC,WCpBA,SAAAE,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,SAAAnvB,EAAA3N,GACA,OAAAA,EAAAoD,OAAApD,EAAA2N,MAAA,OAsCA,gBAAAhN,EAAAC,GACA,IAAAZ,KACA+S,KAOA,OANApS,EAAAg8B,EAAAh8B,GAAAC,EAAA+7B,EAAA/7B,GAtCA,SAAAm8B,EAAAC,EAAAC,EAAAC,EAAAl9B,EAAA+S,GACA,GAAAgqB,IAAAE,GAAAD,IAAAE,EAAA,CACA,IAAA1+B,EAAAwB,EAAA8H,KAAA,kBAAA80B,EAAA,KAAAC,GACA9pB,EAAAjL,MAActJ,IAAA,EAAAqC,EAAAgnB,EAAAkV,EAAAE,KAA+Bz+B,IAAA,EAAAqC,EAAAgnB,EAAAmV,EAAAE,UACxCD,GAAAC,IACLl9B,EAAA8H,KAAA,aAAAm1B,EAAAL,EAAAM,EAAAL,GAkCAve,CAAA3d,EAAAy7B,WAAAz7B,EAAA07B,WAAAz7B,EAAAw7B,WAAAx7B,EAAAy7B,WAAAr8B,EAAA+S,GA9BA,SAAApS,EAAAC,EAAAZ,EAAA+S,GACApS,IAAAC,GACAD,EAAAC,EAAA,IAAAA,GAAA,IAAgCA,EAAAD,EAAA,MAAAA,GAAA,KAChCoS,EAAAjL,MAActJ,EAAAwB,EAAA8H,KAAA6F,EAAA3N,GAAA,eAAA88B,GAAA,EAAAj8B,EAAAgnB,EAAAlnB,EAAAC,MACTA,GACLZ,EAAA8H,KAAA6F,EAAA3N,GAAA,UAAAY,EAAAk8B,GA0BA1wB,CAAAzL,EAAAyL,OAAAxL,EAAAwL,OAAApM,EAAA+S,GAtBA,SAAApS,EAAAC,EAAAZ,EAAA+S,GACApS,IAAAC,EACAmS,EAAAjL,MAActJ,EAAAwB,EAAA8H,KAAA6F,EAAA3N,GAAA,cAAA88B,GAAA,EAAAj8B,EAAAgnB,EAAAlnB,EAAAC,KACTA,GACLZ,EAAA8H,KAAA6F,EAAA3N,GAAA,SAAAY,EAAAk8B,GAmBAR,CAAA37B,EAAA27B,MAAA17B,EAAA07B,MAAAt8B,EAAA+S,GAfA,SAAAgqB,EAAAC,EAAAC,EAAAC,EAAAl9B,EAAA+S,GACA,GAAAgqB,IAAAE,GAAAD,IAAAE,EAAA,CACA,IAAA1+B,EAAAwB,EAAA8H,KAAA6F,EAAA3N,GAAA,4BACA+S,EAAAjL,MAActJ,IAAA,EAAAqC,EAAAgnB,EAAAkV,EAAAE,KAA+Bz+B,IAAA,EAAAqC,EAAAgnB,EAAAmV,EAAAE,UACxC,IAAAD,GAAA,IAAAC,GACLl9B,EAAA8H,KAAA6F,EAAA3N,GAAA,SAAAi9B,EAAA,IAAAC,EAAA,KAWA7e,CAAA1d,EAAA47B,OAAA57B,EAAA67B,OAAA57B,EAAA27B,OAAA37B,EAAA47B,OAAAx8B,EAAA+S,GACApS,EAAAC,EAAA,KACA,SAAAN,GAEA,IADA,IAAArB,EAAAT,GAAA,EAAAiB,EAAAsT,EAAA3P,SACA5E,EAAAiB,GAAAO,GAAAf,EAAA8T,EAAAvU,OAAAS,EAAA4B,EAAAP,GACA,OAAAN,EAAAwd,KAAA,MAKA,IAAA2f,EAAAT,EJtDA,SAAAl9B,GACA,eAAAA,EAAAga,GACA+hB,MAAA6B,SAAAC,cAAA,OAAA7B,EAAA4B,SAAAE,gBAAA7B,EAAA2B,SAAAG,aACAhC,EAAAiC,MAAAvc,UAAAzhB,EACAA,EAAAi8B,EAAAgC,iBAAAjC,EAAAkC,YAAAnC,GAAA,MAAAoC,iBAAA,aACAnC,EAAAoC,YAAArC,GACA/7B,IAAA2Y,MAAA,MAAA0lB,MAAA,KACApB,GAAAj9B,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,MI+CA,qBACAs+B,EAAApB,EJ7CA,SAAAl9B,GACA,aAAAA,EAAAga,GACAkiB,MAAA0B,SAAAW,gBAAA,mCACArC,EAAAsC,aAAA,YAAAx+B,IACAA,EAAAk8B,EAAAza,UAAAgd,QAAAC,gBACA1+B,IAAA4rB,OACAqR,EAAAj9B,EAAAmB,EAAAnB,EAAAoB,EAAApB,EAAAX,EAAAW,EAAAV,EAAAU,EAAA4O,EAAA5O,EAAA6kB,IAFA7K,IIyCA,cC9DA2kB,EAAAj9B,KAAAk9B,MAKA,SAAA9E,EAAAz4B,GACA,QAAAA,EAAAK,KAAAY,IAAAjB,IAAA,EAAAA,GAAA,EAaA,IAAAw9B,EAAA,SAAAxvB,EAAAC,GACA,IAKAtQ,EACA8/B,EANAC,EAAA1vB,EAAA,GAAA2vB,EAAA3vB,EAAA,GAAA4vB,EAAA5vB,EAAA,GACA6vB,EAAA5vB,EAAA,GAAA6vB,EAAA7vB,EAAA,GAAA8vB,EAAA9vB,EAAA,GACAgF,EAAA4qB,EAAAH,EACAxqB,EAAA4qB,EAAAH,EACAlf,EAAAxL,IAAAC,IAKA,GAAAuL,EA1BA,MA2BAgf,EAAAp9B,KAAAa,IAAA68B,EAAAH,GAAAN,EACA3/B,EAAA,SAAA8B,GACA,OACAi+B,EAAAj+B,EAAAwT,EACA0qB,EAAAl+B,EAAAyT,EACA0qB,EAAAv9B,KAAAY,IAAAq8B,EAAA79B,EAAAg+B,SAMA,CACA,IAAAO,EAAA39B,KAAAmB,KAAAid,GACAlK,GAAAwpB,IAAAH,IAzCA,EAyCAnf,IAAA,EAAAmf,EA1CA,EA0CAI,GACAxpB,GAAAupB,IAAAH,IA1CA,EA0CAnf,IAAA,EAAAsf,EA3CA,EA2CAC,GACArc,EAAAthB,KAAAa,IAAAb,KAAAmB,KAAA+S,IAAA,GAAAA,GACA0pB,EAAA59B,KAAAa,IAAAb,KAAAmB,KAAAgT,IAAA,GAAAA,GACAipB,GAAAQ,EAAAtc,GAAA2b,EACA3/B,EAAA,SAAA8B,GACA,IApCAO,EAoCAb,EAAAM,EAAAg+B,EACAS,EAAAzF,EAAA9W,GACAzc,EAAA04B,GAlDA,EAkDAI,IAAAE,GAtCAl+B,EAsCAs9B,EAAAn+B,EAAAwiB,IArCA3hB,EAAAK,KAAAY,IAAA,EAAAjB,IAAA,IAAAA,EAAA,IALA,SAAAA,GACA,QAAAA,EAAAK,KAAAY,IAAAjB,IAAA,EAAAA,GAAA,EAyCA04B,CAAA/W,IACA,OACA+b,EAAAx4B,EAAA+N,EACA0qB,EAAAz4B,EAAAgO,EACA0qB,EAAAM,EAAAzF,EAAA6E,EAAAn+B,EAAAwiB,KAOA,OAFAhkB,EAAAwgC,SAAA,IAAAV,EAEA9/B,GC3DA,SAAAygC,EAAAC,GACA,gBAAAlwB,EAAAsrB,GACA,IAAA9b,EAAA0gB,GAAAlwB,EAAA9P,OAAAq7B,EAAA,EAAAr7B,CAAA8P,IAAAwP,GAAA8b,EAAAp7B,OAAAq7B,EAAA,EAAAr7B,CAAAo7B,IAAA9b,GACAxe,EAAAk6B,EAAAlrB,EAAAhP,EAAAs6B,EAAAt6B,GACAvB,EAAAy7B,EAAAlrB,EAAAvQ,EAAA67B,EAAA77B,GACAm4B,EAAAsD,EAAAlrB,EAAA4nB,QAAA0D,EAAA1D,SACA,gBAAAt2B,GAKA,OAJA0O,EAAAwP,IAAAle,GACA0O,EAAAhP,IAAAM,GACA0O,EAAAvQ,IAAA6B,GACA0O,EAAA4nB,UAAAt2B,GACA0O,EAAA,KAKA,IAAAmwB,EAAAF,EAAAjF,GACAoF,EAAAH,EAAA/E,GCjBA,SAAA3B,EAAAvpB,EAAAsrB,GACA,IAAA77B,EAAAy7B,GAAAlrB,EAAA9P,OAAAq7B,EAAA,EAAAr7B,CAAA8P,IAAAvQ,GAAA67B,EAAAp7B,OAAAq7B,EAAA,EAAAr7B,CAAAo7B,IAAA77B,GACAkC,EAAAu5B,EAAAlrB,EAAArO,EAAA25B,EAAA35B,GACAC,EAAAs5B,EAAAlrB,EAAApO,EAAA05B,EAAA15B,GACAg2B,EAAAsD,EAAAlrB,EAAA4nB,QAAA0D,EAAA1D,SACA,gBAAAt2B,GAKA,OAJA0O,EAAAvQ,IAAA6B,GACA0O,EAAArO,IAAAL,GACA0O,EAAApO,IAAAN,GACA0O,EAAA4nB,UAAAt2B,GACA0O,EAAA,ICVA,SAAAqwB,EAAAH,GACA,gBAAAlwB,EAAAsrB,GACA,IAAA9b,EAAA0gB,GAAAlwB,EAAA9P,OAAAq7B,EAAA,EAAAr7B,CAAA8P,IAAAwP,GAAA8b,EAAAp7B,OAAAq7B,EAAA,EAAAr7B,CAAAo7B,IAAA9b,GACA3f,EAAAq7B,EAAAlrB,EAAAnQ,EAAAy7B,EAAAz7B,GACAJ,EAAAy7B,EAAAlrB,EAAAvQ,EAAA67B,EAAA77B,GACAm4B,EAAAsD,EAAAlrB,EAAA4nB,QAAA0D,EAAA1D,SACA,gBAAAt2B,GAKA,OAJA0O,EAAAwP,IAAAle,GACA0O,EAAAnQ,IAAAyB,GACA0O,EAAAvQ,IAAA6B,GACA0O,EAAA4nB,UAAAt2B,GACA0O,EAAA,KAKA,IAAAswB,EAAAD,EAAArF,GACAuF,EAAAF,EAAAnF,GCjBA,SAAAhB,EAAAgG,GACA,gBAAAM,EAAAh/B,GAGA,SAAAi/B,EAAAzwB,EAAAsrB,GACA,IAAA9b,EAAA0gB,GAAAlwB,EAAA9P,OAAAq7B,EAAA,EAAAr7B,CAAA8P,IAAAwP,GAAA8b,EAAAp7B,OAAAq7B,EAAA,EAAAr7B,CAAAo7B,IAAA9b,GACAxe,EAAAk6B,EAAAlrB,EAAAhP,EAAAs6B,EAAAt6B,GACAvB,EAAAy7B,EAAAlrB,EAAAvQ,EAAA67B,EAAA77B,GACAm4B,EAAAsD,EAAAlrB,EAAA4nB,QAAA0D,EAAA1D,SACA,gBAAAt2B,GAKA,OAJA0O,EAAAwP,IAAAle,GACA0O,EAAAhP,IAAAM,GACA0O,EAAAvQ,IAAAyC,KAAAe,IAAA3B,EAAAE,IACAwO,EAAA4nB,UAAAt2B,GACA0O,EAAA,IAMA,OAlBAxO,KAgBAi/B,EAAAjF,MAAAgF,EAEAC,EAnBA,CAoBG,GAGH,IAAAC,EAAAxG,EAAAc,GACA2F,EAAAzG,EAAAgB,GC5BA0F,EAAA,SAAAC,EAAApgC,GAEA,IADA,IAAAqgC,EAAA,IAAA5Y,MAAAznB,GACAjB,EAAA,EAAiBA,EAAAiB,IAAOjB,EAAAshC,EAAAthC,GAAAqhC,EAAArhC,GAAAiB,EAAA,IACxB,OAAAqgC,+uBCAA,ICDAC,EDCAC,EAAA,SAAAn/B,EAAAd,GACA,IAAAvB,GAAAqC,EAAAd,EAAAc,EAAAo/B,cAAAlgC,EAAA,GAAAc,EAAAo/B,iBAAAC,QAAA,oBACA,IAAA1hC,EAAA2hC,EAAAt/B,EAAAsX,MAAA,EAAA3Z,GAIA,OACA2hC,EAAA/8B,OAAA,EAAA+8B,EAAA,GAAAA,EAAAhoB,MAAA,GAAAgoB,GACAt/B,EAAAsX,MAAA3Z,EAAA,KETA4hC,EAAA,SAAAv/B,GACA,OAAAA,EAAAm/B,EAAA9+B,KAAAO,IAAAZ,OAAA,GAAAqJ,KCDAm2B,EAAA,SAAAx/B,EAAAd,GACA,IAAAjB,EAAAkhC,EAAAn/B,EAAAd,GACA,IAAAjB,EAAA,OAAA+B,EAAA,GACA,IAAAs/B,EAAArhC,EAAA,GACAwhC,EAAAxhC,EAAA,GACA,OAAAwhC,EAAA,WAAApZ,OAAAoZ,GAAA9iB,KAAA,KAAA2iB,EACAA,EAAA/8B,OAAAk9B,EAAA,EAAAH,EAAAhoB,MAAA,EAAAmoB,EAAA,OAAAH,EAAAhoB,MAAAmoB,EAAA,GACAH,EAAA,IAAAjZ,MAAAoZ,EAAAH,EAAA/8B,OAAA,GAAAoa,KAAA,MCLA+iB,GACAC,GCLA,SAAA3/B,EAAAd,GACAc,IAAA4/B,YAAA1gC,GAEA2gC,EAAA,QAAAlZ,EAAA/nB,EAAAoB,EAAAuC,OAAA5E,EAAA,EAAA+oB,GAAA,EAAiD/oB,EAAAiB,IAAOjB,EACxD,OAAAqC,EAAArC,IACA,QAAA+oB,EAAAC,EAAAhpB,EAA4B,MAC5B,YAAA+oB,MAAA/oB,GAAqCgpB,EAAAhpB,EAAQ,MAC7C,cAAAkiC,EACA,QAAAnZ,EAAA,IAAAA,EAAA,GAIA,OAAAA,EAAA,EAAA1mB,EAAAsX,MAAA,EAAAoP,GAAA1mB,EAAAsX,MAAAqP,EAAA,GAAA3mB,GDNA8/B,IAAA,SAAA9/B,EAAAd,GAAuB,WAAAc,GAAA+/B,QAAA7gC,IACvBa,EAAA,SAAAC,GAAoB,OAAAK,KAAAs2B,MAAA32B,GAAAw2B,SAAA,IACpBx4B,EAAA,SAAAgC,GAAoB,OAAAA,EAAA,IACpB/B,EAAA,SAAA+B,GAAoB,OAAAK,KAAAs2B,MAAA32B,GAAAw2B,SAAA,KACpBjpB,EAAA,SAAAvN,EAAAd,GAAuB,OAAAc,EAAAo/B,cAAAlgC,IACvBskB,EAAA,SAAAxjB,EAAAd,GAAuB,OAAAc,EAAA+/B,QAAA7gC,IACvB4kB,EAAA,SAAA9jB,EAAAd,GAAuB,OAAAc,EAAA4/B,YAAA1gC,IACvBd,EAAA,SAAA4B,GAAoB,OAAAK,KAAAs2B,MAAA32B,GAAAw2B,SAAA,IACpBt3B,EAAA,SAAAc,EAAAd,GAAuB,OAAAsgC,EAAA,IAAAx/B,EAAAd,IACvBR,EAAA8gC,EACArgC,EHZA,SAAAa,EAAAd,GACA,IAAAjB,EAAAkhC,EAAAn/B,EAAAd,GACA,IAAAjB,EAAA,OAAA+B,EAAA,GACA,IAAAs/B,EAAArhC,EAAA,GACAwhC,EAAAxhC,EAAA,GACAN,EAAA8hC,GAAAP,EAAA,EAAA7+B,KAAAsU,KAAA,EAAAtU,KAAAuU,IAAA,EAAAvU,KAAAc,MAAAs+B,EAAA,QACA7gC,EAAA0gC,EAAA/8B,OACA,OAAA5E,IAAAiB,EAAA0gC,EACA3hC,EAAAiB,EAAA0gC,EAAA,IAAAjZ,MAAA1oB,EAAAiB,EAAA,GAAA+d,KAAA,KACAhf,EAAA,EAAA2hC,EAAAhoB,MAAA,EAAA3Z,GAAA,IAAA2hC,EAAAhoB,MAAA3Z,GACA,SAAA0oB,MAAA,EAAA1oB,GAAAgf,KAAA,KAAAwiB,EAAAn/B,EAAAK,KAAAsU,IAAA,EAAAzV,EAAAvB,EAAA,QGGAqZ,EAAA,SAAAhX,GAAoB,OAAAK,KAAAs2B,MAAA32B,GAAAw2B,SAAA,IAAAwJ,eACpBhgC,EAAA,SAAAA,GAAoB,OAAAK,KAAAs2B,MAAA32B,GAAAw2B,SAAA,MEfpByJ,EAAA,wEAEA,SAAAC,EAAAC,GACA,WAAAC,EAAAD,GAKA,SAAAC,EAAAD,GACA,KAAAE,EAAAJ,EAAA1K,KAAA4K,IAAA,UAAAG,MAAA,mBAAAH,GAEA,IAAAE,EACAE,EAAAF,EAAA,QACAG,EAAAH,EAAA,QACA9+B,EAAA8+B,EAAA,QACAI,EAAAJ,EAAA,OACAK,IAAAL,EAAA,GACAtiB,EAAAsiB,EAAA,KAAAA,EAAA,GACAM,IAAAN,EAAA,GACAh0B,EAAAg0B,EAAA,KAAAA,EAAA,GAAA/oB,MAAA,GACApV,EAAAm+B,EAAA,OAGA,MAAAn+B,GAAAy+B,GAAA,EAAAz+B,EAAA,KAGAw9B,EAAAx9B,OAAA,KAGAw+B,GAAA,MAAAH,GAAA,MAAAC,KAAAE,GAAA,EAAAH,EAAA,IAAAC,EAAA,KAEAlhC,KAAAihC,OACAjhC,KAAAkhC,QACAlhC,KAAAiC,OACAjC,KAAAmhC,SACAnhC,KAAAohC,OACAphC,KAAAye,QACAze,KAAAqhC,QACArhC,KAAA+M,YACA/M,KAAA4C,OAjCAg+B,EAAAlhC,UAAAohC,EAAAphC,UAoCAohC,EAAAphC,UAAAw3B,SAAA,WACA,OAAAl3B,KAAAihC,KACAjhC,KAAAkhC,MACAlhC,KAAAiC,KACAjC,KAAAmhC,QACAnhC,KAAAohC,KAAA,SACA,MAAAphC,KAAAye,MAAA,GAAA1d,KAAAsU,IAAA,IAAArV,KAAAye,SACAze,KAAAqhC,MAAA,SACA,MAAArhC,KAAA+M,UAAA,OAAAhM,KAAAsU,IAAA,IAAArV,KAAA+M,YACA/M,KAAA4C,MCtDA,ICEA0+B,EACAC,EACAC,EDJAnoB,EAAA,SAAA3Y,GACA,OAAAA,GEOA+gC,GAAA,oEAEAC,EAAA,SAAAC,GACA,ICXAC,EAAAC,EDWAC,EAAAH,EAAAC,UAAAD,EAAAE,WCXAD,EDWAD,EAAAC,SCXAC,EDWAF,EAAAE,UCVA,SAAAxiC,EAAAof,GAOA,IANA,IAAApgB,EAAAgB,EAAA4D,OACA9C,KACAuP,EAAA,EACA8U,EAAAod,EAAA,GACA3+B,EAAA,EAEA5E,EAAA,GAAAmmB,EAAA,IACAvhB,EAAAuhB,EAAA,EAAA/F,IAAA+F,EAAAzjB,KAAAsU,IAAA,EAAAoJ,EAAAxb,IACA9C,EAAAwH,KAAAtI,EAAA0iC,UAAA1jC,GAAAmmB,EAAAnmB,EAAAmmB,OACAvhB,GAAAuhB,EAAA,GAAA/F,KACA+F,EAAAod,EAAAlyB,KAAA,GAAAkyB,EAAA3+B,QAGA,OAAA9C,EAAA8X,UAAAoF,KAAAwkB,KDJAxoB,EACA2oB,EAAAL,EAAAK,SACAC,EAAAN,EAAAM,QACAC,EAAAP,EAAAO,SEdA,SAAAA,GACA,gBAAA7iC,GACA,OAAAA,EAAA8iC,QAAA,kBAAA9jC,GACA,OAAA6jC,GAAA7jC,MFWA+jC,CAAAT,EAAAO,UAAA7oB,EACAgpB,EAAAV,EAAAU,SAAA,IAEA,SAAAC,EAAAzB,GAGA,IAAAI,GAFAJ,EAAAD,EAAAC,IAEAI,KACAC,EAAAL,EAAAK,MACAj/B,EAAA4+B,EAAA5+B,KACAk/B,EAAAN,EAAAM,OACAC,EAAAP,EAAAO,KACA3iB,EAAAoiB,EAAApiB,MACA4iB,EAAAR,EAAAQ,MACAt0B,EAAA8zB,EAAA9zB,UACAnK,EAAAi+B,EAAAj+B,KAIA2/B,EAAA,MAAApB,EAAAa,EAAA,SAAAb,GAAA,SAAAqB,KAAA5/B,GAAA,IAAAA,EAAAozB,cAAA,GACAyM,EAAA,MAAAtB,EAAAa,EAAA,UAAAQ,KAAA5/B,GAAAy/B,EAAA,GAKAK,EAAAtC,EAAAx9B,GACA+/B,GAAA//B,GAAA,aAAA4/B,KAAA5/B,GAUA,SAAAkzB,EAAAz2B,GACA,IAEAhB,EAAAiB,EAAAZ,EAFAkkC,EAAAL,EACAM,EAAAJ,EAGA,SAAA7/B,EACAigC,EAAAH,EAAArjC,GAAAwjC,EACAxjC,EAAA,OACO,CAIP,IAAAyjC,GAHAzjC,MAGA,EAYA,GAXAA,EAAAqjC,EAAA3hC,KAAAO,IAAAjC,GAAA0N,GAGA+1B,GAAA,IAAAzjC,IAAAyjC,GAAA,GAGAF,GAAAE,EAAA,MAAA7gC,IAAA,UAAAA,GAAA,MAAAA,EAAA,GAAAA,GAAA2gC,EACAC,GAAA,MAAAjgC,EAAA6+B,EAAA,EAAA7B,EAAA,OAAAiD,GAAAC,GAAA,MAAA7gC,EAAA,QAIA0gC,EAEA,IADAtkC,GAAA,EAAAiB,EAAAD,EAAA4D,SACA5E,EAAAiB,GACA,OAAAZ,EAAAW,EAAA0jC,WAAA1kC,KAAAK,EAAA,IACAmkC,GAAA,KAAAnkC,EAAAujC,EAAA5iC,EAAA2Y,MAAA3Z,EAAA,GAAAgB,EAAA2Y,MAAA3Z,IAAAwkC,EACAxjC,IAAA2Y,MAAA,EAAA3Z,GACA,OAOAgjC,IAAAD,IAAA/hC,EAAAyiC,EAAAziC,EAAAwK,MAGA,IAAA5G,EAAA2/B,EAAA3/B,OAAA5D,EAAA4D,OAAA4/B,EAAA5/B,OACA+/B,EAAA//B,EAAAwb,EAAA,IAAAsI,MAAAtI,EAAAxb,EAAA,GAAAoa,KAAA4jB,GAAA,GAMA,OAHAI,GAAAD,IAAA/hC,EAAAyiC,EAAAkB,EAAA3jC,EAAA2jC,EAAA//B,OAAAwb,EAAAokB,EAAA5/B,OAAA4G,KAAAm5B,EAAA,IAGA9B,GACA,QAAA7hC,EAAAujC,EAAAvjC,EAAAwjC,EAAAG,EAAsE,MACtE,QAAA3jC,EAAAujC,EAAAI,EAAA3jC,EAAAwjC,EAAsE,MACtE,QAAAxjC,EAAA2jC,EAAAhrB,MAAA,EAAA/U,EAAA+/B,EAAA//B,QAAA,GAAA2/B,EAAAvjC,EAAAwjC,EAAAG,EAAAhrB,MAAA/U,GAAqI,MACrI,QAAA5D,EAAA2jC,EAAAJ,EAAAvjC,EAAAwjC,EAGA,OAAAX,EAAA7iC,GAOA,OAjEA0N,EAAA,MAAAA,EAAAnK,EAAA,KACA,SAAA4/B,KAAA5/B,GAAA7B,KAAAsU,IAAA,EAAAtU,KAAAuU,IAAA,GAAAvI,IACAhM,KAAAsU,IAAA,EAAAtU,KAAAuU,IAAA,GAAAvI,IA2DA+oB,EAAAoB,SAAA,WACA,OAAA2J,EAAA,IAGA/K,EAaA,OACAA,OAAAwM,EACAW,aAZA,SAAApC,EAAAxhC,GACA,IAAA6kB,EAAAoe,IAAAzB,EAAAD,EAAAC,IAAAj+B,KAAA,IAAAi+B,IACA5yB,EAAA,EAAAlN,KAAAsU,KAAA,EAAAtU,KAAAuU,IAAA,EAAAvU,KAAAc,MAAAo+B,EAAA5gC,GAAA,KACAsG,EAAA5E,KAAAe,IAAA,IAAAmM,GACAs0B,EAAAd,EAAA,EAAAxzB,EAAA,GACA,gBAAA5O,GACA,OAAA6kB,EAAAve,EAAAtG,GAAAkjC,MD1GA,SAAAW,EAAAxX,GAIA,OAHA4V,EAAAI,EAAAhW,GACA6V,EAAAD,EAAAxL,OACA0L,EAAAF,EAAA2B,aACA3B,EAXA4B,GACAjB,QAAA,IACAJ,UAAA,IACAD,UAAA,GACAI,UAAA,UIRA,IAAAmB,EAAA,SAAAz2B,GACA,OAAA3L,KAAAsU,IAAA,GAAA4qB,EAAAl/B,KAAAO,IAAAoL,MCDA02B,EAAA,SAAA12B,EAAArN,GACA,OAAA0B,KAAAsU,IAAA,IAAAtU,KAAAsU,KAAA,EAAAtU,KAAAuU,IAAA,EAAAvU,KAAAc,MAAAo+B,EAAA5gC,GAAA,KAAA4gC,EAAAl/B,KAAAO,IAAAoL,MCDA22B,EAAA,SAAA32B,EAAA2I,GAEA,OADA3I,EAAA3L,KAAAO,IAAAoL,GAAA2I,EAAAtU,KAAAO,IAAA+T,GAAA3I,EACA3L,KAAAsU,IAAA,EAAA4qB,EAAA5qB,GAAA4qB,EAAAvzB,IAAA,iTCFA,SAAA42B,KAkDA,SAAAvsB,EAAAvX,EAAA0kB,GACA,IAAAnN,EAAA,IAAAusB,EAGA,GAAA9jC,aAAA8jC,EAAA9jC,EAAA+jC,KAAA,SAAAlkC,EAAAye,GAA+D/G,EAAAysB,IAAA1lB,EAAAze,UAG/D,GAAA0nB,MAAA0C,QAAAjqB,GAAA,CACA,IAEAV,EAFAT,GAAA,EACAiB,EAAAE,EAAAyD,OAGA,SAAAihB,EAAA,OAAA7lB,EAAAiB,GAAAyX,EAAAysB,IAAAnlC,EAAAmB,EAAAnB,SACA,OAAAA,EAAAiB,GAAAyX,EAAAysB,IAAAtf,EAAAplB,EAAAU,EAAAnB,KAAAmB,GAAAV,QAIA,GAAAU,EAAA,QAAAse,KAAAte,EAAAuX,EAAAysB,IAAA1lB,EAAAte,EAAAse,IAEA,OAAA/G,EAnEAusB,EAAA5jC,UAAAqX,EAAArX,WACAQ,YAAAojC,EACAG,IAAA,SAAA3lB,GACA,MAPA,IAOAA,KAAA9d,MAEAb,IAAA,SAAA2e,GACA,OAAA9d,KAVA,IAUA8d,IAEA0lB,IAAA,SAAA1lB,EAAAze,GAEA,OADAW,KAbA,IAaA8d,GAAAze,EACAW,MAEA0jC,OAAA,SAAA5lB,GACA,IAAAre,EAjBA,IAiBAqe,EACA,OAAAre,KAAAO,kBAAAP,IAEAkkC,MAAA,WACA,QAAAlkC,KAAAO,KArBA,MAqBAP,EAAA,WAAAO,KAAAP,IAEAmkC,KAAA,WACA,IAAAA,KACA,QAAAnkC,KAAAO,KAzBA,MAyBAP,EAAA,IAAAmkC,EAAAj8B,KAAAlI,EAAAuY,MAAA,IACA,OAAA4rB,GAEApc,OAAA,WACA,IAAAA,KACA,QAAA/nB,KAAAO,KA9BA,MA8BAP,EAAA,IAAA+nB,EAAA7f,KAAA3H,KAAAP,IACA,OAAA+nB,GAEAqc,QAAA,WACA,IAAAA,KACA,QAAApkC,KAAAO,KAnCA,MAmCAP,EAAA,IAAAokC,EAAAl8B,MAAyEmW,IAAAre,EAAAuY,MAAA,GAAA3Y,MAAAW,KAAAP,KACzE,OAAAokC,GAEAtlB,KAAA,WACA,IAAAA,EAAA,EACA,QAAA9e,KAAAO,KAxCA,MAwCAP,EAAA,MAAA8e,EACA,OAAAA,GAEAulB,MAAA,WACA,QAAArkC,KAAAO,KAAA,GA5CA,MA4CAP,EAAA,YACA,UAEA8jC,KAAA,SAAArf,GACA,QAAAzkB,KAAAO,KAhDA,MAgDAP,EAAA,IAAAykB,EAAAlkB,KAAAP,KAAAuY,MAAA,GAAAhY,QA0BA,IAAA+jC,EAAA,ECxEA,SAAAC,KAEA,IAAAC,EAAAF,EAAArkC,UAkBA,SAAAwkC,EAAA1kC,EAAA0kB,GACA,IAAAsf,EAAA,IAAAQ,EAGA,GAAAxkC,aAAAwkC,EAAAxkC,EAAA+jC,KAAA,SAAAlkC,GAA0DmkC,EAAApjC,IAAAf,UAG1D,GAAAG,EAAA,CACA,IAAAnB,GAAA,EAAAiB,EAAAE,EAAAyD,OACA,SAAAihB,EAAA,OAAA7lB,EAAAiB,GAAAkkC,EAAApjC,IAAAZ,EAAAnB,SACA,OAAAA,EAAAiB,GAAAkkC,EAAApjC,IAAA8jB,EAAA1kB,EAAAnB,KAAAmB,IAGA,OAAAgkC,EA7BAQ,EAAAtkC,UAAAwkC,EAAAxkC,WACAQ,YAAA8jC,EACAP,IAAAQ,EAAAR,IACArjC,IAAA,SAAAf,GAGA,OADAW,KDXA,KCUAX,GAAA,KACAA,EACAW,MAEA0jC,OAAAO,EAAAP,OACAC,MAAAM,EAAAN,MACAnc,OAAAyc,EAAAL,KACArlB,KAAA0lB,EAAA1lB,KACAulB,MAAAG,EAAAH,MACAP,KAAAU,EAAAV,MAmBA,ICtCAtb,EAAAlB,MAAArnB,UAEAykC,EAAAlc,EAAAlR,IACAiB,EAAAiQ,EAAAjQ,MCAAosB,GAAuBxlC,KAAA,YAEvB,SAAAylC,EAAA77B,GACA,IAAAqzB,EAAAkI,IACA5a,KACAmb,EAAAF,EAIA,SAAAlmB,EAAAvf,GACA,IAAAmf,EAAAnf,EAAA,GAAAN,EAAAw9B,EAAA18B,IAAA2e,GACA,IAAAzf,EAAA,CACA,GAAAimC,IAAAF,EAAA,OAAAE,EACAzI,EAAA2H,IAAA1lB,EAAAzf,EAAA8qB,EAAAxhB,KAAAhJ,IAEA,OAAA6J,GAAAnK,EAAA,GAAAmK,EAAAvF,QA0BA,OAlCAuF,EAAA,MAAAA,KAAAwP,EAAAxZ,KAAAgK,GAWA0V,EAAAiL,OAAA,SAAAhc,GACA,IAAAD,UAAAjK,OAAA,OAAAkmB,EAAAnR,QACAmR,KAAA0S,EAAAkI,IAEA,IADA,IAAAplC,EAAAmf,EAAAzf,GAAA,EAAAiB,EAAA6N,EAAAlK,SACA5E,EAAAiB,GAAAu8B,EAAA4H,IAAA3lB,GAAAnf,EAAAwO,EAAA9O,IAAA,KAAAw9B,EAAA2H,IAAA1lB,EAAAqL,EAAAxhB,KAAAhJ,IACA,OAAAuf,GAGAA,EAAA1V,MAAA,SAAA2E,GACA,OAAAD,UAAAjK,QAAAuF,EAAAwP,EAAAxZ,KAAA2O,GAAA+Q,GAAA1V,EAAAwP,SAGAkG,EAAAomB,QAAA,SAAAn3B,GACA,OAAAD,UAAAjK,QAAAqhC,EAAAn3B,EAAA+Q,GAAAomB,GAGApmB,EAAAqmB,KAAA,WACA,OAAAF,IACAlb,UACA3gB,SACA87B,YAGApmB,ECzCA,SAAAsmB,IACA,IAIA93B,EACA+3B,EALAvmB,EAAAmmB,IAAAC,aAAA3iB,GACAwH,EAAAjL,EAAAiL,OACAub,EAAAxmB,EAAA1V,MACAA,GAAA,KAGA6uB,GAAA,EACAsN,EAAA,EACAC,EAAA,EACA1D,EAAA,GAIA,SAAA2D,IACA,IAAAvlC,EAAA6pB,IAAAlmB,OACAgV,EAAAzP,EAAA,GAAAA,EAAA,GACAqG,EAAArG,EAAAyP,EAAA,GACAiQ,EAAA1f,EAAA,EAAAyP,GACAvL,GAAAwb,EAAArZ,GAAA9N,KAAAsU,IAAA,EAAA/V,EAAAqlC,EAAA,EAAAC,GACAvN,IAAA3qB,EAAA3L,KAAAc,MAAA6K,IACAmC,IAAAqZ,EAAArZ,EAAAnC,GAAApN,EAAAqlC,IAAAzD,EACAuD,EAAA/3B,GAAA,EAAAi4B,GACAtN,IAAAxoB,EAAA9N,KAAAs2B,MAAAxoB,GAAA41B,EAAA1jC,KAAAs2B,MAAAoN,IACA,IAAAjd,EAAAzoB,OAAA8R,EAAA,EAAA9R,CAAAO,GAAAyX,IAAA,SAAA1Y,GAA8C,OAAAwQ,EAAAnC,EAAArO,IAC9C,OAAAqmC,EAAAzsB,EAAAuP,EAAAvP,UAAAuP,GAqDA,cAlEAtJ,EAAAomB,QAgBApmB,EAAAiL,OAAA,SAAAhc,GACA,OAAAD,UAAAjK,QAAAkmB,EAAAhc,GAAA03B,KAAA1b,KAGAjL,EAAA1V,MAAA,SAAA2E,GACA,OAAAD,UAAAjK,QAAAuF,IAAA2E,EAAA,IAAAA,EAAA,IAAA03B,KAAAr8B,EAAAwP,SAGAkG,EAAA4mB,WAAA,SAAA33B,GACA,OAAA3E,IAAA2E,EAAA,IAAAA,EAAA,IAAAkqB,GAAA,EAAAwN,KAGA3mB,EAAAumB,UAAA,WACA,OAAAA,GAGAvmB,EAAAxR,KAAA,WACA,OAAAA,GAGAwR,EAAAmZ,MAAA,SAAAlqB,GACA,OAAAD,UAAAjK,QAAAo0B,IAAAlqB,EAAA03B,KAAAxN,GAGAnZ,EAAA8kB,QAAA,SAAA71B,GACA,OAAAD,UAAAjK,QAAA0hC,EAAAC,EAAA7jC,KAAAsU,IAAA,EAAAtU,KAAAuU,IAAA,EAAAnI,IAAA03B,KAAAF,GAGAzmB,EAAAymB,aAAA,SAAAx3B,GACA,OAAAD,UAAAjK,QAAA0hC,EAAA5jC,KAAAsU,IAAA,EAAAtU,KAAAuU,IAAA,EAAAnI,IAAA03B,KAAAF,GAGAzmB,EAAA0mB,aAAA,SAAAz3B,GACA,OAAAD,UAAAjK,QAAA2hC,EAAA7jC,KAAAsU,IAAA,EAAAtU,KAAAuU,IAAA,EAAAnI,IAAA03B,KAAAD,GAGA1mB,EAAAgjB,MAAA,SAAA/zB,GACA,OAAAD,UAAAjK,QAAAi+B,EAAAngC,KAAAsU,IAAA,EAAAtU,KAAAuU,IAAA,EAAAnI,IAAA03B,KAAA3D,GAGAhjB,EAAAqmB,KAAA,WACA,OAAAC,IACArb,YACA3gB,SACA6uB,SACAsN,gBACAC,gBACA1D,UAGA2D,IAiBA,SAAAE,IACA,OAfA,SAAAC,EAAA9mB,GACA,IAAAqmB,EAAArmB,EAAAqmB,KAUA,OARArmB,EAAA8kB,QAAA9kB,EAAA0mB,oBACA1mB,EAAAymB,oBACAzmB,EAAA0mB,aAEA1mB,EAAAqmB,KAAA,WACA,OAAAS,EAAAT,MAGArmB,EAIA8mB,CAAAR,IAAAG,aAAA,eCnGA35B,EAAA,SAAAtK,GACA,kBACA,OAAAA,ICFAukC,EAAA,SAAAvkC,GACA,OAAAA,GCKAwkC,GAAA,KAEA,SAAAC,EAAA3kC,EAAAC,GACA,OAAAA,GAAAD,MACA,SAAAE,GAAqB,OAAAA,EAAAF,GAAAC,GACrBuK,EAAAvK,GAiBA,SAAA2kC,EAAAjc,EAAA3gB,EAAA68B,EAAAC,GACA,IAAAC,EAAApc,EAAA,GAAAuV,EAAAvV,EAAA,GAAA9G,EAAA7Z,EAAA,GAAAm2B,EAAAn2B,EAAA,GAGA,OAFAk2B,EAAA6G,KAAAF,EAAA3G,EAAA6G,GAAAljB,EAAAijB,EAAA3G,EAAAtc,KACAkjB,EAAAF,EAAAE,EAAA7G,GAAArc,EAAAijB,EAAAjjB,EAAAsc,IACA,SAAAj+B,GAAsB,OAAA2hB,EAAAkjB,EAAA7kC,KAGtB,SAAA8kC,EAAArc,EAAA3gB,EAAA68B,EAAAC,GACA,IAAA51B,EAAA3O,KAAAuU,IAAA6T,EAAAlmB,OAAAuF,EAAAvF,QAAA,EACAtE,EAAA,IAAAooB,MAAArX,GACAtQ,EAAA,IAAA2nB,MAAArX,GACArR,GAAA,EAQA,IALA8qB,EAAAzZ,GAAAyZ,EAAA,KACAA,IAAAnR,QAAAC,UACAzP,IAAAwP,QAAAC,aAGA5Z,EAAAqR,GACA/Q,EAAAN,GAAAgnC,EAAAlc,EAAA9qB,GAAA8qB,EAAA9qB,EAAA,IACAe,EAAAf,GAAAinC,EAAA98B,EAAAnK,GAAAmK,EAAAnK,EAAA,IAGA,gBAAAqC,GACA,IAAArC,EAAAU,OAAA8R,EAAA,EAAA9R,CAAAoqB,EAAAzoB,EAAA,EAAAgP,GAAA,EACA,OAAAtQ,EAAAf,GAAAM,EAAAN,GAAAqC,KAIA,SAAA+kC,EAAAtK,EAAAuK,GACA,OAAAA,EACAvc,OAAAgS,EAAAhS,UACA3gB,MAAA2yB,EAAA3yB,SACA6F,YAAA8sB,EAAA9sB,eACAs3B,MAAAxK,EAAAwK,SAKA,SAAAC,EAAAP,EAAAC,GACA,IAIAO,EACAC,EACAC,EANA5c,EAAA+b,EACA18B,EAAA08B,EACA72B,EAAA23B,EAAA,EACAL,GAAA,EAKA,SAAAd,IAGA,OAFAgB,EAAA9kC,KAAAuU,IAAA6T,EAAAlmB,OAAAuF,EAAAvF,QAAA,EAAAuiC,EAAAJ,EACAU,EAAAC,EAAA,KACA7nB,EAGA,SAAAA,EAAAxd,GACA,OAAAolC,MAAAD,EAAA1c,EAAA3gB,EAAAm9B,EAtEA,SAAAN,GACA,gBAAA7kC,EAAAC,GACA,IAAA9B,EAAA0mC,EAAA7kC,KAAAC,MACA,gBAAAC,GAAwB,OAAAA,GAAAF,EAAA,EAAAE,GAAAD,EAAA,EAAA9B,EAAA+B,KAmExBulC,CAAAZ,KAAAh3B,MAAA3N,GA2BA,OAxBAwd,EAAAhT,OAAA,SAAA7K,GACA,OAAA0lC,MAAAF,EAAAr9B,EAAA2gB,EAAAgc,EAAAQ,EAnEA,SAAAL,GACA,gBAAA9kC,EAAAC,GACA,IAAArB,EAAAkmC,EAAA9kC,KAAAC,MACA,gBAAAN,GAAwB,OAAAA,GAAA,EAAAK,EAAAL,GAAA,EAAAM,EAAArB,EAAAe,KAgExB+lC,CAAAZ,SAAAjlC,IAGA6d,EAAAiL,OAAA,SAAAhc,GACA,OAAAD,UAAAjK,QAAAkmB,EAAAgb,EAAA3lC,KAAA2O,EAAA83B,GAAAJ,KAAA1b,EAAAnR,SAGAkG,EAAA1V,MAAA,SAAA2E,GACA,OAAAD,UAAAjK,QAAAuF,EAAAwP,EAAAxZ,KAAA2O,GAAA03B,KAAAr8B,EAAAwP,SAGAkG,EAAA4mB,WAAA,SAAA33B,GACA,OAAA3E,EAAAwP,EAAAxZ,KAAA2O,GAAAkB,EAAA23B,EAAA,EAAAnB,KAGA3mB,EAAAynB,MAAA,SAAAx4B,GACA,OAAAD,UAAAjK,QAAA0iC,IAAAx4B,EAAA03B,KAAAc,GAGAznB,EAAA7P,YAAA,SAAAlB,GACA,OAAAD,UAAAjK,QAAAoL,EAAAlB,EAAA03B,KAAAx2B,GAGAw2B,eC5GAsB,EAAA,SAAAhd,EAAAZ,EAAAsY,GACA,IAGA9zB,EAHA8B,EAAAsa,EAAA,GACAjB,EAAAiB,IAAAlmB,OAAA,GACAyJ,EAAA3N,OAAA8R,EAAA,EAAA9R,CAAA8P,EAAAqZ,EAAA,MAAAK,EAAA,GAAAA,GAGA,QADAsY,EAAA9hC,OAAAqnC,EAAA,EAAArnC,CAAA,MAAA8hC,EAAA,KAAAA,IACAj+B,MACA,QACA,IAAAvD,EAAA0B,KAAAsU,IAAAtU,KAAAO,IAAAuN,GAAA9N,KAAAO,IAAA4mB,IAEA,OADA,MAAA2Y,EAAA9zB,WAAAgb,MAAAhb,EAAAhO,OAAAqnC,EAAA,EAAArnC,CAAA2N,EAAArN,MAAAwhC,EAAA9zB,aACAhO,OAAAqnC,EAAA,EAAArnC,CAAA8hC,EAAAxhC,GAEA,OACA,QACA,QACA,QACA,QACA,MAAAwhC,EAAA9zB,WAAAgb,MAAAhb,EAAAhO,OAAAqnC,EAAA,EAAArnC,CAAA2N,EAAA3L,KAAAsU,IAAAtU,KAAAO,IAAAuN,GAAA9N,KAAAO,IAAA4mB,QAAA2Y,EAAA9zB,aAAA,MAAA8zB,EAAAj+B,OACA,MAEA,QACA,QACA,MAAAi+B,EAAA9zB,WAAAgb,MAAAhb,EAAAhO,OAAAqnC,EAAA,EAAArnC,CAAA2N,MAAAm0B,EAAA9zB,YAAA,SAAA8zB,EAAAj+B,OAIA,OAAA7D,OAAAqnC,EAAA,EAAArnC,CAAA8hC,ICxBA,SAAAwF,EAAAnoB,GACA,IAAAiL,EAAAjL,EAAAiL,OAmDA,OAjDAjL,EAAAoK,MAAA,SAAAC,GACA,IAAA5pB,EAAAwqB,IACA,OAAApqB,OAAA8R,EAAA,EAAA9R,CAAAJ,EAAA,GAAAA,IAAAsE,OAAA,SAAAslB,EAAA,GAAAA,IAGArK,EAAAooB,WAAA,SAAA/d,EAAAsY,GACA,OAAAsF,EAAAhd,IAAAZ,EAAAsY,IAGA3iB,EAAAqoB,KAAA,SAAAhe,GACA,MAAAA,MAAA,IAEA,IAKA7b,EALA/N,EAAAwqB,IACA/B,EAAA,EACAC,EAAA1oB,EAAAsE,OAAA,EACA4L,EAAAlQ,EAAAyoB,GACAc,EAAAvpB,EAAA0oB,GA8BA,OA3BAa,EAAArZ,IACAnC,EAAAmC,IAAAqZ,IAAAxb,EACAA,EAAA0a,IAAAC,IAAA3a,IAGAA,EAAA3N,OAAA8R,EAAA,EAAA9R,CAAA8P,EAAAqZ,EAAAK,IAEA,GACA1Z,EAAA9N,KAAAc,MAAAgN,EAAAnC,KACAwb,EAAAnnB,KAAAW,KAAAwmB,EAAAxb,KACAA,EAAA3N,OAAA8R,EAAA,EAAA9R,CAAA8P,EAAAqZ,EAAAK,IACK7b,EAAA,IACLmC,EAAA9N,KAAAW,KAAAmN,EAAAnC,KACAwb,EAAAnnB,KAAAc,MAAAqmB,EAAAxb,KACAA,EAAA3N,OAAA8R,EAAA,EAAA9R,CAAA8P,EAAAqZ,EAAAK,IAGA7b,EAAA,GACA/N,EAAAyoB,GAAArmB,KAAAc,MAAAgN,EAAAnC,KACA/N,EAAA0oB,GAAAtmB,KAAAW,KAAAwmB,EAAAxb,KACAyc,EAAAxqB,IACK+N,EAAA,IACL/N,EAAAyoB,GAAArmB,KAAAW,KAAAmN,EAAAnC,KACA/N,EAAA0oB,GAAAtmB,KAAAc,MAAAqmB,EAAAxb,KACAyc,EAAAxqB,IAGAuf,GAGAA,EAGA,SAAAsoB,IACA,IAAAtoB,EAAA0nB,EAAAT,EAAAa,EAAA,GAMA,OAJA9nB,EAAAqmB,KAAA,WACA,OAAAkB,EAAAvnB,EAAAsoB,MAGAH,EAAAnoB,GC/DA,SAAAuoB,IACA,IAAAtd,GAAA,KAEA,SAAAjL,EAAAxd,GACA,OAAAA,EAaA,OAVAwd,EAAAhT,OAAAgT,EAEAA,EAAAiL,OAAAjL,EAAA1V,MAAA,SAAA2E,GACA,OAAAD,UAAAjK,QAAAkmB,EAAAgb,EAAA3lC,KAAA2O,EAAA83B,GAAA/mB,GAAAiL,EAAAnR,SAGAkG,EAAAqmB,KAAA,WACA,OAAAkC,IAAAtd,WAGAkd,EAAAnoB,GCrBA,IAAAqoB,EAAA,SAAApd,EAAAud,GAGA,IAIAvmC,EAJAinB,EAAA,EACAC,GAHA8B,IAAAnR,SAGA/U,OAAA,EACAoQ,EAAA8V,EAAA/B,GACA7T,EAAA4V,EAAA9B,GAUA,OAPA9T,EAAAF,IACAlT,EAAAinB,IAAAC,IAAAlnB,EACAA,EAAAkT,IAAAE,IAAApT,GAGAgpB,EAAA/B,GAAAsf,EAAA7kC,MAAAwR,GACA8V,EAAA9B,GAAAqf,EAAAhlC,KAAA6R,GACA4V,GCVA,SAAAwd,EAAAnmC,EAAAC,GACA,OAAAA,EAAAM,KAAAa,IAAAnB,EAAAD,IACA,SAAAE,GAAqB,OAAAK,KAAAa,IAAAlB,EAAAF,GAAAC,GACrBuK,EAAAvK,GAGA,SAAAmmC,EAAApmC,EAAAC,GACA,OAAAD,EAAA,EACA,SAAAL,GAAqB,OAAAY,KAAAe,KAAArB,EAAAN,GAAAY,KAAAe,KAAAtB,EAAA,EAAAL,IACrB,SAAAA,GAAqB,OAAAY,KAAAe,IAAArB,EAAAN,GAAAY,KAAAe,IAAAtB,EAAA,EAAAL,IAGrB,SAAA0mC,EAAAnmC,GACA,OAAA+nB,SAAA/nB,KAAA,KAAAA,KAAA,IAAAA,EAGA,SAAAomC,EAAAC,GACA,YAAAA,EAAAF,EACAE,IAAAhmC,KAAAimC,EAAAjmC,KAAAY,IACA,SAAAjB,GAAqB,OAAAK,KAAAe,IAAAilC,EAAArmC,IAGrB,SAAAumC,EAAAF,GACA,OAAAA,IAAAhmC,KAAAimC,EAAAjmC,KAAAa,IACA,KAAAmlC,GAAAhmC,KAAAmmC,OACA,IAAAH,GAAAhmC,KAAAomC,OACAJ,EAAAhmC,KAAAa,IAAAmlC,GAAA,SAAArmC,GAA8C,OAAAK,KAAAa,IAAAlB,GAAAqmC,IAG9C,SAAAK,EAAAljB,GACA,gBAAAxjB,GACA,OAAAwjB,GAAAxjB,IAIA,SAAA2mC,IACA,IAAAnpB,EAAA0nB,EAAAe,EAAAC,GAAAzd,QAAA,OACAA,EAAAjL,EAAAiL,OACA4d,EAAA,GACAO,EAAAL,EAAA,IACAM,EAAAT,EAAA,IAEA,SAAAjC,IAGA,OAFAyC,EAAAL,EAAAF,GAAAQ,EAAAT,EAAAC,GACA5d,IAAA,OAAAme,EAAAF,EAAAE,GAAAC,EAAAH,EAAAG,IACArpB,EA2EA,OAxEAA,EAAA6oB,KAAA,SAAA55B,GACA,OAAAD,UAAAjK,QAAA8jC,GAAA55B,EAAA03B,KAAAkC,GAGA7oB,EAAAiL,OAAA,SAAAhc,GACA,OAAAD,UAAAjK,QAAAkmB,EAAAhc,GAAA03B,KAAA1b,KAGAjL,EAAAoK,MAAA,SAAAC,GACA,IAGAnpB,EAHAT,EAAAwqB,IACAvjB,EAAAjH,EAAA,GACAkH,EAAAlH,IAAAsE,OAAA,IAGA7D,EAAAyG,EAAAD,KAAAvH,EAAAuH,IAAAC,IAAAxH,GAEA,IAEAuB,EACA+F,EACAxF,EAJA9B,EAAAipC,EAAA1hC,GACA8J,EAAA43B,EAAAzhC,GAIAvG,EAAA,MAAAipB,EAAA,IAAAA,EACAhe,KAEA,KAAAw8B,EAAA,IAAAr3B,EAAArR,EAAAiB,GAEA,GADAjB,EAAA0C,KAAAs2B,MAAAh5B,GAAA,EAAAqR,EAAA3O,KAAAs2B,MAAA3nB,GAAA,EACA9J,EAAA,QAAuBvH,EAAAqR,IAAOrR,EAC9B,IAAAsH,EAAA,EAAA/F,EAAA2nC,EAAAlpC,GAAgCsH,EAAAohC,IAAUphC,EAE1C,MADAxF,EAAAP,EAAA+F,GACAC,GAAA,CACA,GAAAzF,EAAA0F,EAAA,MACA0E,EAAA5C,KAAAxH,SAEO,KAAY9B,EAAAqR,IAAOrR,EAC1B,IAAAsH,EAAAohC,EAAA,EAAAnnC,EAAA2nC,EAAAlpC,GAAuCsH,GAAA,IAAQA,EAE/C,MADAxF,EAAAP,EAAA+F,GACAC,GAAA,CACA,GAAAzF,EAAA0F,EAAA,MACA0E,EAAA5C,KAAAxH,SAIAoK,EAAAxL,OAAA8R,EAAA,EAAA9R,CAAAV,EAAAqR,EAAA3O,KAAAuU,IAAA5F,EAAArR,EAAAiB,IAAAyX,IAAAwwB,GAGA,OAAAnoC,EAAAmL,EAAA0N,UAAA1N,GAGA2T,EAAAooB,WAAA,SAAA/d,EAAAsY,GAGA,GAFA,MAAAA,MAAA,KAAAkG,EAAA,WACA,mBAAAlG,MAAA9hC,OAAAqnC,EAAA,EAAArnC,CAAA8hC,IACAtY,IAAA1e,IAAA,OAAAg3B,EACA,MAAAtY,MAAA,IACA,IAAA5iB,EAAA5E,KAAAsU,IAAA,EAAA0xB,EAAAxe,EAAArK,EAAAoK,QAAArlB,QACA,gBAAAtE,GACA,IAAAN,EAAAM,EAAA4oC,EAAAxmC,KAAAs2B,MAAAiQ,EAAA3oC,KAEA,OADAN,EAAA0oC,IAAA,KAAA1oC,GAAA0oC,GACA1oC,GAAAsH,EAAAk7B,EAAAliC,GAAA,KAIAuf,EAAAqoB,KAAA,WACA,OAAApd,EAAAod,EAAApd,KACAtnB,MAAA,SAAAnB,GAA0B,OAAA6mC,EAAAxmC,KAAAc,MAAAylC,EAAA5mC,MAC1BgB,KAAA,SAAAhB,GAAyB,OAAA6mC,EAAAxmC,KAAAW,KAAA4lC,EAAA5mC,UAIzBwd,EAAAqmB,KAAA,WACA,OAAAkB,EAAAvnB,EAAAmpB,IAAAN,UAGA7oB,EC1HA,SAAAspB,EAAA9mC,EAAAy/B,GACA,OAAAz/B,EAAA,GAAAK,KAAAe,KAAApB,EAAAy/B,GAAAp/B,KAAAe,IAAApB,EAAAy/B,GAGA,SAAAsH,IACA,IAAAtH,EAAA,EACAjiB,EAAA0nB,EAGA,SAAAplC,EAAAC,GACA,OAAAA,EAAA+mC,EAAA/mC,EAAA0/B,IAAA3/B,EAAAgnC,EAAAhnC,EAAA2/B,KACA,SAAAz/B,GAAuB,OAAA8mC,EAAA9mC,EAAAy/B,GAAA3/B,GAAAC,GACvBuK,EAAAvK,IAGA,SAAAD,EAAAC,GAEA,OADAA,EAAA+mC,EAAA/mC,EAAA0/B,IAAA3/B,EAAAgnC,EAAAhnC,EAAA2/B,IACA,SAAAhgC,GAAwB,OAAAqnC,EAAAhnC,EAAAC,EAAAN,EAAA,EAAAggC,MAVxBhX,EAAAjL,EAAAiL,OAqBA,OARAjL,EAAAiiB,SAAA,SAAAhzB,GACA,OAAAD,UAAAjK,QAAAk9B,GAAAhzB,EAAAgc,QAAAgX,GAGAjiB,EAAAqmB,KAAA,WACA,OAAAkB,EAAAvnB,EAAAupB,IAAAtH,cAGAkG,EAAAnoB,GAGA,SAAAwpB,IACA,OAAAD,IAAAtH,SAAA,ICjCA,SAAAwH,IACA,IAAAxe,KACA3gB,KACAohB,KAEA,SAAAib,IACA,IAAAxmC,EAAA,EAAAiB,EAAAyB,KAAAsU,IAAA,EAAA7M,EAAAvF,QAEA,IADA2mB,EAAA,IAAA7C,MAAAznB,EAAA,KACAjB,EAAAiB,GAAAsqB,EAAAvrB,EAAA,GAAAU,OAAA8R,EAAA,EAAA9R,CAAAoqB,EAAA9qB,EAAAiB,GACA,OAAA4e,EAGA,SAAAA,EAAAxd,GACA,IAAAqnB,MAAArnB,MAAA,OAAA8H,EAAAzJ,OAAA8R,EAAA,EAAA9R,CAAA6qB,EAAAlpB,IAiCA,OA9BAwd,EAAA0pB,aAAA,SAAAvnC,GACA,IAAAhC,EAAAmK,EAAAu3B,QAAA1/B,GACA,OAAAhC,EAAA,GAAA0L,UACA1L,EAAA,EAAAurB,EAAAvrB,EAAA,GAAA8qB,EAAA,GACA9qB,EAAAurB,EAAA3mB,OAAA2mB,EAAAvrB,GAAA8qB,IAAAlmB,OAAA,KAIAib,EAAAiL,OAAA,SAAAhc,GACA,IAAAD,UAAAjK,OAAA,OAAAkmB,EAAAnR,QACAmR,KACA,QAAAxqB,EAAAN,EAAA,EAAAiB,EAAA6N,EAAAlK,OAAoC5E,EAAAiB,IAAOjB,EAAA,OAAAM,EAAAwO,EAAA9O,KAAA0pB,MAAAppB,OAAAwqB,EAAAxhB,KAAAhJ,GAE3C,OADAwqB,EAAArf,KAAA+G,EAAA,GACAg0B,KAGA3mB,EAAA1V,MAAA,SAAA2E,GACA,OAAAD,UAAAjK,QAAAuF,EAAAwP,EAAAxZ,KAAA2O,GAAA03B,KAAAr8B,EAAAwP,SAGAkG,EAAA2pB,UAAA,WACA,OAAAje,EAAA5R,SAGAkG,EAAAqmB,KAAA,WACA,OAAAoD,IACAxe,UACA3gB,UAGA0V,EC7CA,SAAA4pB,IACA,IAAAz0B,EAAA,EACAE,EAAA,EACAjU,EAAA,EACA6pB,GAAA,IACA3gB,GAAA,KAEA,SAAA0V,EAAAxd,GACA,GAAAA,KAAA,OAAA8H,EAAAzJ,OAAA8R,EAAA,EAAA9R,CAAAoqB,EAAAzoB,EAAA,EAAApB,IAGA,SAAAulC,IACA,IAAAxmC,GAAA,EAEA,IADA8qB,EAAA,IAAApC,MAAAznB,KACAjB,EAAAiB,GAAA6pB,EAAA9qB,OAAA,GAAAkV,GAAAlV,EAAAiB,GAAA+T,IAAA/T,EAAA,GACA,OAAA4e,EAyBA,OAtBAA,EAAAiL,OAAA,SAAAhc,GACA,OAAAD,UAAAjK,QAAAoQ,GAAAlG,EAAA,GAAAoG,GAAApG,EAAA,GAAA03B,MAAAxxB,EAAAE,IAGA2K,EAAA1V,MAAA,SAAA2E,GACA,OAAAD,UAAAjK,QAAA3D,GAAAkJ,EAAAwP,EAAAxZ,KAAA2O,IAAAlK,OAAA,EAAA4hC,KAAAr8B,EAAAwP,SAGAkG,EAAA0pB,aAAA,SAAAvnC,GACA,IAAAhC,EAAAmK,EAAAu3B,QAAA1/B,GACA,OAAAhC,EAAA,GAAA0L,SACA1L,EAAA,GAAAgV,EAAA8V,EAAA,IACA9qB,GAAAiB,GAAA6pB,EAAA7pB,EAAA,GAAAiU,IACA4V,EAAA9qB,EAAA,GAAA8qB,EAAA9qB,KAGA6f,EAAAqmB,KAAA,WACA,OAAAuD,IACA3e,QAAA9V,EAAAE,IACA/K,UAGA69B,EAAAnoB,GCzCA,SAAA6pB,IACA,IAAA5e,GAAA,IACA3gB,GAAA,KACAlJ,EAAA,EAEA,SAAA4e,EAAAxd,GACA,GAAAA,KAAA,OAAA8H,EAAAzJ,OAAA8R,EAAA,EAAA9R,CAAAoqB,EAAAzoB,EAAA,EAAApB,IAsBA,OAnBA4e,EAAAiL,OAAA,SAAAhc,GACA,OAAAD,UAAAjK,QAAAkmB,EAAAnR,EAAAxZ,KAAA2O,GAAA7N,EAAAyB,KAAAuU,IAAA6T,EAAAlmB,OAAAuF,EAAAvF,OAAA,GAAAib,GAAAiL,EAAAnR,SAGAkG,EAAA1V,MAAA,SAAA2E,GACA,OAAAD,UAAAjK,QAAAuF,EAAAwP,EAAAxZ,KAAA2O,GAAA7N,EAAAyB,KAAAuU,IAAA6T,EAAAlmB,OAAAuF,EAAAvF,OAAA,GAAAib,GAAA1V,EAAAwP,SAGAkG,EAAA0pB,aAAA,SAAAvnC,GACA,IAAAhC,EAAAmK,EAAAu3B,QAAA1/B,GACA,OAAA8oB,EAAA9qB,EAAA,GAAA8qB,EAAA9qB,KAGA6f,EAAAqmB,KAAA,WACA,OAAAwD,IACA5e,UACA3gB,UAGA0V,EC/BA,IAAA5R,EAAA,IAAAyuB,KACAxuB,EAAA,IAAAwuB,KAEA,SAAAiN,EAAAC,EAAAC,EAAA3f,EAAA4f,GAEA,SAAAzB,EAAA5L,GACA,OAAAmN,EAAAnN,EAAA,IAAAC,MAAAD,MA4DA,OAzDA4L,EAAA7kC,MAAA6kC,EAEAA,EAAAhlC,KAAA,SAAAo5B,GACA,OAAAmN,EAAAnN,EAAA,IAAAC,KAAAD,EAAA,IAAAoN,EAAApN,EAAA,GAAAmN,EAAAnN,MAGA4L,EAAArP,MAAA,SAAAyD,GACA,IAAAyK,EAAAmB,EAAA5L,GACA4D,EAAAgI,EAAAhlC,KAAAo5B,GACA,OAAAA,EAAAyK,EAAA7G,EAAA5D,EAAAyK,EAAA7G,GAGAgI,EAAA0B,OAAA,SAAAtN,EAAApuB,GACA,OAAAw7B,EAAApN,EAAA,IAAAC,MAAAD,GAAA,MAAApuB,EAAA,EAAA3L,KAAAc,MAAA6K,IAAAouB,GAGA4L,EAAAl+B,MAAA,SAAAqG,EAAAqZ,EAAAxb,GACA,IAAA27B,EAAA7/B,KAGA,GAFAqG,EAAA63B,EAAAhlC,KAAAmN,GACAnC,EAAA,MAAAA,EAAA,EAAA3L,KAAAc,MAAA6K,KACAmC,EAAAqZ,GAAAxb,EAAA,UAAAlE,EACA,GAAAA,EAAAb,KAAA0gC,EAAA,IAAAtN,MAAAlsB,IAAAq5B,EAAAr5B,EAAAnC,GAAAu7B,EAAAp5B,SACAw5B,EAAAx5B,KAAAqZ,GACA,OAAA1f,GAGAk+B,EAAAx1B,OAAA,SAAAsxB,GACA,OAAAwF,EAAA,SAAAlN,GACA,GAAAA,KAAA,KAAAmN,EAAAnN,IAAA0H,EAAA1H,MAAAE,QAAAF,EAAA,IACK,SAAAA,EAAApuB,GACL,GAAAouB,KACA,GAAApuB,EAAA,SAAAA,GAAA,GACA,KAAAw7B,EAAApN,GAAA,IAAA0H,EAAA1H,UACS,OAAApuB,GAAA,GACT,KAAAw7B,EAAApN,EAAA,IAAA0H,EAAA1H,SAMAvS,IACAme,EAAAne,MAAA,SAAA1Z,EAAAsrB,GAGA,OAFA7tB,EAAA0uB,SAAAnsB,GAAAtC,EAAAyuB,SAAAb,GACA8N,EAAA37B,GAAA27B,EAAA17B,GACAxL,KAAAc,MAAA0mB,EAAAjc,EAAAC,KAGAm6B,EAAA4B,MAAA,SAAA57B,GAEA,OADAA,EAAA3L,KAAAc,MAAA6K,GACA+b,SAAA/b,MAAA,EACAA,EAAA,EACAg6B,EAAAx1B,OAAAi3B,EACA,SAAAxpC,GAA6B,OAAAwpC,EAAAxpC,GAAA+N,GAAA,GAC7B,SAAA/N,GAA6B,OAAA+nC,EAAAne,MAAA,EAAA5pB,GAAA+N,GAAA,IAH7Bg6B,EADA,OAQAA,EChEA,IAAA6B,EAAAP,EAAA,aAEC,SAAAlN,EAAApuB,GACDouB,EAAAE,SAAAF,EAAApuB,IACC,SAAAmC,EAAAsrB,GACD,OAAAA,EAAAtrB,IAIA05B,EAAAD,MAAA,SAAA3iC,GAEA,OADAA,EAAA5E,KAAAc,MAAA8D,GACA8iB,SAAA9iB,MAAA,EACAA,EAAA,EACAqiC,EAAA,SAAAlN,GACAA,EAAAE,QAAAj6B,KAAAc,MAAAi5B,EAAAn1B,OACG,SAAAm1B,EAAApuB,GACHouB,EAAAE,SAAAF,EAAApuB,EAAA/G,IACG,SAAAkJ,EAAAsrB,GACH,OAAAA,EAAAtrB,GAAAlJ,IANA4iC,EADA,MAWA,IAAAC,EAAA,ECvBAC,GDwBAF,EAAA//B,MCxBA,KAGAkgC,EAAA,OCDAC,EAAAX,EAAA,SAAAlN,GACAA,EAAAE,QDJA,ICIAj6B,KAAAc,MAAAi5B,EDJA,OCKC,SAAAA,EAAApuB,GACDouB,EAAAE,SAAAF,EDNA,ICMApuB,IACC,SAAAmC,EAAAsrB,GACD,OAAAA,EAAAtrB,GDRA,KCSC,SAAAisB,GACD,OAAAA,EAAA8N,sBCPAC,IDWAF,EAAAngC,MCXAw/B,EAAA,SAAAlN,GACAA,EAAAE,QAAAj6B,KAAAc,MAAAi5B,EAAA2N,OACC,SAAA3N,EAAApuB,GACDouB,EAAAE,SAAAF,EAAApuB,EAAA+7B,IACC,SAAA55B,EAAAsrB,GACD,OAAAA,EAAAtrB,GAAA45B,GACC,SAAA3N,GACD,OAAAA,EAAAgO,sBCPAC,IDWAF,GAAArgC,MCXAw/B,EAAA,SAAAlN,GACA,IAAAsN,EAAAtN,EAAAkO,oBAAAP,EHFA,KGGAL,EAAA,IAAAA,GHHA,MGIAtN,EAAAE,QHJA,KGIAj6B,KAAAc,QAAAi5B,EAAAsN,GHJA,MGIAA,IACC,SAAAtN,EAAApuB,GACDouB,EAAAE,SAAAF,EHNA,KGMApuB,IACC,SAAAmC,EAAAsrB,GACD,OAAAA,EAAAtrB,GHRA,MGSC,SAAAisB,GACD,OAAAA,EAAAmO,cAGAC,GAAA,GCZAC,IDaAJ,GAAAvgC,MCbAw/B,EAAA,SAAAlN,GACAA,EAAAsO,SAAA,UACC,SAAAtO,EAAApuB,GACDouB,EAAAuO,QAAAvO,EAAAwO,UAAA58B,IACC,SAAAmC,EAAAsrB,GACD,OAAAA,EAAAtrB,GAAAsrB,EAAA6O,oBAAAn6B,EAAAm6B,qBAAAP,GJLA,OIMC,SAAA3N,GACD,OAAAA,EAAAwO,UAAA,KAGAC,GAAA,GACAJ,GAAA3gC,MCXA,SAAAghC,GAAAnrC,GACA,OAAA2pC,EAAA,SAAAlN,GACAA,EAAAuO,QAAAvO,EAAAwO,WAAAxO,EAAA2O,SAAA,EAAAprC,GAAA,GACAy8B,EAAAsO,SAAA,UACG,SAAAtO,EAAApuB,GACHouB,EAAAuO,QAAAvO,EAAAwO,UAAA,EAAA58B,IACG,SAAAmC,EAAAsrB,GACH,OAAAA,EAAAtrB,GAAAsrB,EAAA6O,oBAAAn6B,EAAAm6B,qBAAAP,GAAAC,IAIA,IAAAgB,GAAAF,GAAA,GACAG,GAAAH,GAAA,GACAI,GAAAJ,GAAA,GACAK,GAAAL,GAAA,GACAM,GAAAN,GAAA,GACAO,GAAAP,GAAA,GACAQ,GAAAR,GAAA,GClBAS,IDoBAP,GAAAlhC,MACAmhC,GAAAnhC,MACAohC,GAAAphC,MACAqhC,GAAArhC,MACAshC,GAAAthC,MACAuhC,GAAAvhC,MACAwhC,GAAAxhC,MC1BAw/B,EAAA,SAAAlN,GACAA,EAAAuO,QAAA,GACAvO,EAAAsO,SAAA,UACC,SAAAtO,EAAApuB,GACDouB,EAAAoP,SAAApP,EAAAqP,WAAAz9B,IACC,SAAAmC,EAAAsrB,GACD,OAAAA,EAAAgQ,WAAAt7B,EAAAs7B,WAAA,IAAAhQ,EAAAiQ,cAAAv7B,EAAAu7B,gBACC,SAAAtP,GACD,OAAAA,EAAAqP,cAGAE,GAAA,GCXAC,IDYAL,GAAAzhC,MCZAw/B,EAAA,SAAAlN,GACAA,EAAAoP,SAAA,KACApP,EAAAsO,SAAA,UACC,SAAAtO,EAAApuB,GACDouB,EAAAyP,YAAAzP,EAAAsP,cAAA19B,IACC,SAAAmC,EAAAsrB,GACD,OAAAA,EAAAiQ,cAAAv7B,EAAAu7B,eACC,SAAAtP,GACD,OAAAA,EAAAsP,iBAIAE,GAAAhC,MAAA,SAAA3iC,GACA,OAAA8iB,SAAA9iB,EAAA5E,KAAAc,MAAA8D,OAAA,EAAAqiC,EAAA,SAAAlN,GACAA,EAAAyP,YAAAxpC,KAAAc,MAAAi5B,EAAAsP,cAAAzkC,MACAm1B,EAAAoP,SAAA,KACApP,EAAAsO,SAAA,UACG,SAAAtO,EAAApuB,GACHouB,EAAAyP,YAAAzP,EAAAsP,cAAA19B,EAAA/G,KALA,MASA,IAAA6kC,GAAA,GCrBAC,IDsBAH,GAAA9hC,MCtBAw/B,EAAA,SAAAlN,GACAA,EAAA4P,cAAA,MACC,SAAA5P,EAAApuB,GACDouB,EAAAE,SAAAF,EAAApuB,EAAA+7B,IACC,SAAA55B,EAAAsrB,GACD,OAAAA,EAAAtrB,GAAA45B,GACC,SAAA3N,GACD,OAAAA,EAAA6P,mBAGAC,GAAA,GCVAC,IDWAJ,GAAAjiC,MCXAw/B,EAAA,SAAAlN,GACAA,EAAAgQ,cAAA,QACC,SAAAhQ,EAAApuB,GACDouB,EAAAE,SAAAF,ETJA,KSIApuB,IACC,SAAAmC,EAAAsrB,GACD,OAAAA,EAAAtrB,GTNA,MSOC,SAAAisB,GACD,OAAAA,EAAAiQ,iBAGAC,GAAA,GCVAC,IDWAJ,GAAAriC,MCXAw/B,EAAA,SAAAlN,GACAA,EAAAoQ,YAAA,UACC,SAAApQ,EAAApuB,GACDouB,EAAAqQ,WAAArQ,EAAAsQ,aAAA1+B,IACC,SAAAmC,EAAAsrB,GACD,OAAAA,EAAAtrB,GVLA,OUMC,SAAAisB,GACD,OAAAA,EAAAsQ,aAAA,WAIAH,GAAAziC,MCXA,SAAA6iC,GAAAhtC,GACA,OAAA2pC,EAAA,SAAAlN,GACAA,EAAAqQ,WAAArQ,EAAAsQ,cAAAtQ,EAAAwQ,YAAA,EAAAjtC,GAAA,GACAy8B,EAAAoQ,YAAA,UACG,SAAApQ,EAAApuB,GACHouB,EAAAqQ,WAAArQ,EAAAsQ,aAAA,EAAA1+B,IACG,SAAAmC,EAAAsrB,GACH,OAAAA,EAAAtrB,GAAA65B,IAIA,IAAA6C,GAAAF,GAAA,GACAG,GAAAH,GAAA,GACAI,GAAAJ,GAAA,GACAK,GAAAL,GAAA,GACAM,GAAAN,GAAA,GACAO,GAAAP,GAAA,GACAQ,GAAAR,GAAA,GClBAS,IDoBAP,GAAA/iC,MACAgjC,GAAAhjC,MACAijC,GAAAjjC,MACAkjC,GAAAljC,MACAmjC,GAAAnjC,MACAojC,GAAApjC,MACAqjC,GAAArjC,MC1BAw/B,EAAA,SAAAlN,GACAA,EAAAqQ,WAAA,GACArQ,EAAAoQ,YAAA,UACC,SAAApQ,EAAApuB,GACDouB,EAAAiR,YAAAjR,EAAAkR,cAAAt/B,IACC,SAAAmC,EAAAsrB,GACD,OAAAA,EAAA6R,cAAAn9B,EAAAm9B,cAAA,IAAA7R,EAAA8R,iBAAAp9B,EAAAo9B,mBACC,SAAAnR,GACD,OAAAA,EAAAkR,iBAGAE,GAAA,GCXAC,IDYAL,GAAAtjC,MCZAw/B,EAAA,SAAAlN,GACAA,EAAAiR,YAAA,KACAjR,EAAAoQ,YAAA,UACC,SAAApQ,EAAApuB,GACDouB,EAAAsR,eAAAtR,EAAAmR,iBAAAv/B,IACC,SAAAmC,EAAAsrB,GACD,OAAAA,EAAA8R,iBAAAp9B,EAAAo9B,kBACC,SAAAnR,GACD,OAAAA,EAAAmR,oBAIAE,GAAA7D,MAAA,SAAA3iC,GACA,OAAA8iB,SAAA9iB,EAAA5E,KAAAc,MAAA8D,OAAA,EAAAqiC,EAAA,SAAAlN,GACAA,EAAAsR,eAAArrC,KAAAc,MAAAi5B,EAAAmR,iBAAAtmC,MACAm1B,EAAAiR,YAAA,KACAjR,EAAAoQ,YAAA,UACG,SAAApQ,EAAApuB,GACHouB,EAAAsR,eAAAtR,EAAAmR,iBAAAv/B,EAAA/G,KALA,MASA,IAAA0mC,GAAA,GACAF,GAAA3jC,MCZA,SAAA8jC,GAAA3tC,GACA,MAAAA,EAAA0B,GAAA1B,EAAA0B,EAAA,KACA,IAAAy6B,EAAA,IAAAC,MAAA,EAAAp8B,EAAAF,EAAAE,MAAA4tC,EAAA5tC,EAAA6tC,EAAA7tC,EAAAw/B,EAAAx/B,EAAA8tC,GAEA,OADA3R,EAAAyP,YAAA5rC,EAAA0B,GACAy6B,EAEA,WAAAC,KAAAp8B,EAAA0B,EAAA1B,EAAAF,EAAAE,MAAA4tC,EAAA5tC,EAAA6tC,EAAA7tC,EAAAw/B,EAAAx/B,EAAA8tC,GAGA,SAAAC,GAAA/tC,GACA,MAAAA,EAAA0B,GAAA1B,EAAA0B,EAAA,KACA,IAAAy6B,EAAA,IAAAC,UAAA4R,KAAA,EAAAhuC,EAAAF,EAAAE,MAAA4tC,EAAA5tC,EAAA6tC,EAAA7tC,EAAAw/B,EAAAx/B,EAAA8tC,IAEA,OADA3R,EAAAsR,eAAAztC,EAAA0B,GACAy6B,EAEA,WAAAC,UAAA4R,IAAAhuC,EAAA0B,EAAA1B,EAAAF,EAAAE,MAAA4tC,EAAA5tC,EAAA6tC,EAAA7tC,EAAAw/B,EAAAx/B,EAAA8tC,IAGA,SAAAG,GAAAvsC,GACA,OAAUA,IAAA5B,EAAA,EAAAE,EAAA,EAAA4tC,EAAA,EAAAC,EAAA,EAAArO,EAAA,EAAAsO,EAAA,GA2UV,ICzWAnL,GACAuL,GAEAC,GACAC,GDqWAC,IAAYC,IAAA,GAAA9/B,EAAA,IAAA+/B,EAAA,KACZC,GAAA,UACAC,GAAA,KACAC,GAAA,sBAEA,SAAAC,GAAAjuC,EAAA4hC,EAAAxiB,GACA,IAAAxc,EAAA5C,EAAA,SACAm8B,GAAAv5B,GAAA5C,KAAA,GACA4D,EAAAu4B,EAAAv4B,OACA,OAAAhB,GAAAgB,EAAAwb,EAAA,IAAAsI,MAAAtI,EAAAxb,EAAA,GAAAoa,KAAA4jB,GAAAzF,KAGA,SAAA+R,GAAA1tC,GACA,OAAAA,EAAAsiC,QAAAkL,GAAA,QAGA,SAAAG,GAAAC,GACA,WAAAthB,OAAA,OAAAshB,EAAA12B,IAAAw2B,IAAAlwB,KAAA,cAGA,SAAAqwB,GAAAD,GAEA,IADA,IAAA12B,KAAc1Y,GAAA,EAAAiB,EAAAmuC,EAAAxqC,SACd5E,EAAAiB,GAAAyX,EAAA02B,EAAApvC,GAAA23B,eAAA33B,EACA,OAAA0Y,EAGA,SAAA42B,GAAAhvC,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA6tC,GAAAlX,KAAAuF,EAAAxjB,MAAA3Z,IAAA,IACA,OAAAiB,GAAAX,EAAA+L,GAAApL,EAAA,GAAAjB,EAAAiB,EAAA,GAAA2D,SAAA,EAGA,SAAA2qC,GAAAjvC,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA6tC,GAAAlX,KAAAuF,EAAAxjB,MAAA3Z,IAAA,IACA,OAAAiB,GAAAX,EAAAiH,GAAAtG,EAAA,GAAAjB,EAAAiB,EAAA,GAAA2D,SAAA,EAGA,SAAA4qC,GAAAlvC,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA6tC,GAAAlX,KAAAuF,EAAAxjB,MAAA3Z,IAAA,IACA,OAAAiB,GAAAX,EAAAmvC,GAAAxuC,EAAA,GAAAjB,EAAAiB,EAAA,GAAA2D,SAAA,EAGA,SAAA8qC,GAAApvC,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA6tC,GAAAlX,KAAAuF,EAAAxjB,MAAA3Z,IAAA,IACA,OAAAiB,GAAAX,EAAAqvC,GAAA1uC,EAAA,GAAAjB,EAAAiB,EAAA,GAAA2D,SAAA,EAGA,SAAAgrC,GAAAtvC,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA6tC,GAAAlX,KAAAuF,EAAAxjB,MAAA3Z,IAAA,IACA,OAAAiB,GAAAX,EAAAuvC,GAAA5uC,EAAA,GAAAjB,EAAAiB,EAAA,GAAA2D,SAAA,EAGA,SAAAkrC,GAAAxvC,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA6tC,GAAAlX,KAAAuF,EAAAxjB,MAAA3Z,IAAA,IACA,OAAAiB,GAAAX,EAAA0B,GAAAf,EAAA,GAAAjB,EAAAiB,EAAA,GAAA2D,SAAA,EAGA,SAAAmrC,GAAAzvC,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA6tC,GAAAlX,KAAAuF,EAAAxjB,MAAA3Z,IAAA,IACA,OAAAiB,GAAAX,EAAA0B,GAAAf,EAAA,KAAAA,EAAA,gBAAAjB,EAAAiB,EAAA,GAAA2D,SAAA,EAGA,SAAAorC,GAAA1vC,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA,+BAAA22B,KAAAuF,EAAAxjB,MAAA3Z,IAAA,IACA,OAAAiB,GAAAX,EAAA2vC,EAAAhvC,EAAA,OAAAA,EAAA,IAAAA,EAAA,WAAAjB,EAAAiB,EAAA,GAAA2D,SAAA,EAGA,SAAAsrC,GAAA5vC,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA6tC,GAAAlX,KAAAuF,EAAAxjB,MAAA3Z,IAAA,IACA,OAAAiB,GAAAX,EAAAF,EAAAa,EAAA,KAAAjB,EAAAiB,EAAA,GAAA2D,SAAA,EAGA,SAAAurC,GAAA7vC,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA6tC,GAAAlX,KAAAuF,EAAAxjB,MAAA3Z,IAAA,IACA,OAAAiB,GAAAX,KAAAW,EAAA,GAAAjB,EAAAiB,EAAA,GAAA2D,SAAA,EAGA,SAAAwrC,GAAA9vC,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA6tC,GAAAlX,KAAAuF,EAAAxjB,MAAA3Z,IAAA,IACA,OAAAiB,GAAAX,EAAAF,EAAA,EAAAE,KAAAW,EAAA,GAAAjB,EAAAiB,EAAA,GAAA2D,SAAA,EAGA,SAAAyrC,GAAA/vC,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA6tC,GAAAlX,KAAAuF,EAAAxjB,MAAA3Z,IAAA,IACA,OAAAiB,GAAAX,EAAA4tC,GAAAjtC,EAAA,GAAAjB,EAAAiB,EAAA,GAAA2D,SAAA,EAGA,SAAA0rC,GAAAhwC,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA6tC,GAAAlX,KAAAuF,EAAAxjB,MAAA3Z,IAAA,IACA,OAAAiB,GAAAX,EAAA6tC,GAAAltC,EAAA,GAAAjB,EAAAiB,EAAA,GAAA2D,SAAA,EAGA,SAAA2rC,GAAAjwC,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA6tC,GAAAlX,KAAAuF,EAAAxjB,MAAA3Z,IAAA,IACA,OAAAiB,GAAAX,EAAAw/B,GAAA7+B,EAAA,GAAAjB,EAAAiB,EAAA,GAAA2D,SAAA,EAGA,SAAA4rC,GAAAlwC,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA6tC,GAAAlX,KAAAuF,EAAAxjB,MAAA3Z,IAAA,IACA,OAAAiB,GAAAX,EAAA8tC,GAAAntC,EAAA,GAAAjB,EAAAiB,EAAA,GAAA2D,SAAA,EAGA,SAAA6rC,GAAAnwC,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA6tC,GAAAlX,KAAAuF,EAAAxjB,MAAA3Z,IAAA,IACA,OAAAiB,GAAAX,EAAA8tC,EAAA1rC,KAAAc,MAAAvC,EAAA,QAAAjB,EAAAiB,EAAA,GAAA2D,SAAA,EAGA,SAAA8rC,GAAApwC,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA8tC,GAAAnX,KAAAuF,EAAAxjB,MAAA3Z,IAAA,IACA,OAAAiB,EAAAjB,EAAAiB,EAAA,GAAA2D,QAAA,EAGA,SAAA+rC,GAAArwC,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA6tC,GAAAlX,KAAAuF,EAAAxjB,MAAA3Z,IACA,OAAAiB,GAAAX,EAAAswC,GAAA3vC,EAAA,GAAAjB,EAAAiB,EAAA,GAAA2D,SAAA,EAGA,SAAAisC,GAAAvwC,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA6tC,GAAAlX,KAAAuF,EAAAxjB,MAAA3Z,IACA,OAAAiB,GAAAX,EAAAswC,EAAA,KAAA3vC,EAAA,GAAAjB,EAAAiB,EAAA,GAAA2D,SAAA,EAGA,SAAAksC,GAAAxwC,EAAAiB,GACA,OAAA0tC,GAAA3uC,EAAA2qC,UAAA1pC,EAAA,GAGA,SAAAwvC,GAAAzwC,EAAAiB,GACA,OAAA0tC,GAAA3uC,EAAAsqC,WAAArpC,EAAA,GAGA,SAAAyvC,GAAA1wC,EAAAiB,GACA,OAAA0tC,GAAA3uC,EAAAsqC,WAAA,OAAArpC,EAAA,GAGA,SAAA0vC,GAAA3wC,EAAAiB,GACA,OAAA0tC,GAAA,EAAA/D,GAAAhhB,MAAAiiB,GAAA7rC,MAAAiB,EAAA,GAGA,SAAA2vC,GAAA5wC,EAAAiB,GACA,OAAA0tC,GAAA3uC,EAAA6wC,kBAAA5vC,EAAA,GAGA,SAAA6vC,GAAA9wC,EAAAiB,GACA,OAAA2vC,GAAA5wC,EAAAiB,GAAA,MAGA,SAAA8vC,GAAA/wC,EAAAiB,GACA,OAAA0tC,GAAA3uC,EAAAwrC,WAAA,EAAAvqC,EAAA,GAGA,SAAA+vC,GAAAhxC,EAAAiB,GACA,OAAA0tC,GAAA3uC,EAAAmqC,aAAAlpC,EAAA,GAGA,SAAAgwC,GAAAjxC,EAAAiB,GACA,OAAA0tC,GAAA3uC,EAAAkxC,aAAAjwC,EAAA,GAGA,SAAAkwC,GAAAnxC,GACA,IAAAoxC,EAAApxC,EAAA8qC,SACA,WAAAsG,EAAA,EAAAA,EAGA,SAAAC,GAAArxC,EAAAiB,GACA,OAAA0tC,GAAA5D,GAAAnhB,MAAAiiB,GAAA7rC,MAAAiB,EAAA,GAGA,SAAAqwC,GAAAtxC,EAAAiB,GACA,IAAAmwC,EAAApxC,EAAA8qC,SAEA,OADA9qC,EAAAoxC,GAAA,OAAAA,EAAAjG,GAAAnrC,GAAAmrC,GAAApoC,KAAA/C,GACA2uC,GAAAxD,GAAAvhB,MAAAiiB,GAAA7rC,OAAA,IAAA6rC,GAAA7rC,GAAA8qC,UAAA7pC,EAAA,GAGA,SAAAswC,GAAAvxC,GACA,OAAAA,EAAA8qC,SAGA,SAAA0G,GAAAxxC,EAAAiB,GACA,OAAA0tC,GAAA3D,GAAAphB,MAAAiiB,GAAA7rC,MAAAiB,EAAA,GAGA,SAAAwwC,GAAAzxC,EAAAiB,GACA,OAAA0tC,GAAA3uC,EAAAyrC,cAAA,IAAAxqC,EAAA,GAGA,SAAAywC,GAAA1xC,EAAAiB,GACA,OAAA0tC,GAAA3uC,EAAAyrC,cAAA,IAAAxqC,EAAA,GAGA,SAAA0wC,GAAA3xC,GACA,IAAA4L,EAAA5L,EAAAqqC,oBACA,OAAAz+B,EAAA,OAAAA,IAAA,QACA+iC,GAAA/iC,EAAA,YACA+iC,GAAA/iC,EAAA,UAGA,SAAAgmC,GAAA5xC,EAAAiB,GACA,OAAA0tC,GAAA3uC,EAAAysC,aAAAxrC,EAAA,GAGA,SAAA4wC,GAAA7xC,EAAAiB,GACA,OAAA0tC,GAAA3uC,EAAAosC,cAAAnrC,EAAA,GAGA,SAAA6wC,GAAA9xC,EAAAiB,GACA,OAAA0tC,GAAA3uC,EAAAosC,cAAA,OAAAnrC,EAAA,GAGA,SAAA8wC,GAAA/xC,EAAAiB,GACA,OAAA0tC,GAAA,EAAAqD,GAAApoB,MAAA8jB,GAAA1tC,MAAAiB,EAAA,GAGA,SAAAgxC,GAAAjyC,EAAAiB,GACA,OAAA0tC,GAAA3uC,EAAAkyC,qBAAAjxC,EAAA,GAGA,SAAAkxC,GAAAnyC,EAAAiB,GACA,OAAAgxC,GAAAjyC,EAAAiB,GAAA,MAGA,SAAAmxC,GAAApyC,EAAAiB,GACA,OAAA0tC,GAAA3uC,EAAAqtC,cAAA,EAAApsC,EAAA,GAGA,SAAAoxC,GAAAryC,EAAAiB,GACA,OAAA0tC,GAAA3uC,EAAAgsC,gBAAA/qC,EAAA,GAGA,SAAAqxC,GAAAtyC,EAAAiB,GACA,OAAA0tC,GAAA3uC,EAAAiqC,gBAAAhpC,EAAA,GAGA,SAAAsxC,GAAAvyC,GACA,IAAAwyC,EAAAxyC,EAAA2sC,YACA,WAAA6F,EAAA,EAAAA,EAGA,SAAAC,GAAAzyC,EAAAiB,GACA,OAAA0tC,GAAA/B,GAAAhjB,MAAA8jB,GAAA1tC,MAAAiB,EAAA,GAGA,SAAAyxC,GAAA1yC,EAAAiB,GACA,IAAAmwC,EAAApxC,EAAA2sC,YAEA,OADA3sC,EAAAoxC,GAAA,OAAAA,EAAApE,GAAAhtC,GAAAgtC,GAAAjqC,KAAA/C,GACA2uC,GAAA3B,GAAApjB,MAAA8jB,GAAA1tC,OAAA,IAAA0tC,GAAA1tC,GAAA2sC,aAAA1rC,EAAA,GAGA,SAAA0xC,GAAA3yC,GACA,OAAAA,EAAA2sC,YAGA,SAAAiG,GAAA5yC,EAAAiB,GACA,OAAA0tC,GAAA9B,GAAAjjB,MAAA8jB,GAAA1tC,MAAAiB,EAAA,GAGA,SAAA4xC,GAAA7yC,EAAAiB,GACA,OAAA0tC,GAAA3uC,EAAAstC,iBAAA,IAAArsC,EAAA,GAGA,SAAA6xC,GAAA9yC,EAAAiB,GACA,OAAA0tC,GAAA3uC,EAAAstC,iBAAA,IAAArsC,EAAA,GAGA,SAAA8xC,KACA,cAGA,SAAAC,KACA,UAGA,SAAAC,GAAAjzC,GACA,OAAAA,EAGA,SAAAkzC,GAAAlzC,GACA,OAAAoC,KAAAc,OAAAlD,EAAA,KC1mBA2iC,GDeA,SAAAK,GACA,IAAAmQ,EAAAnQ,EAAAoQ,SACAC,EAAArQ,EAAA7G,KACAmX,EAAAtQ,EAAAuQ,KACAC,EAAAxQ,EAAAyQ,QACAC,EAAA1Q,EAAA2Q,KACAC,EAAA5Q,EAAA6Q,UACAC,EAAA9Q,EAAA+Q,OACAC,EAAAhR,EAAAiR,YAEAC,EAAArF,GAAA2E,GACAW,EAAApF,GAAAyE,GACAY,EAAAvF,GAAA6E,GACAW,EAAAtF,GAAA2E,GACAY,EAAAzF,GAAA+E,GACAW,EAAAxF,GAAA6E,GACAY,EAAA3F,GAAAiF,GACAW,EAAA1F,GAAA+E,GACAY,EAAA7F,GAAAmF,GACAW,EAAA5F,GAAAiF,GAEAY,GACA/yC,EAkPA,SAAA7B,GACA,OAAA4zC,EAAA5zC,EAAA8qC,WAlPAh3B,EAqPA,SAAA9T,GACA,OAAA0zC,EAAA1zC,EAAA8qC,WArPAhpC,EAwPA,SAAA9B,GACA,OAAAg0C,EAAAh0C,EAAAwrC,aAxPA/wB,EA2PA,SAAAza,GACA,OAAA8zC,EAAA9zC,EAAAwrC,aA3PAzrC,EAAA,KACAC,EAAAwwC,GACAlhC,EAAAkhC,GACAjrB,EAAAurB,GACAlD,EAAA6C,GACAoE,EAAAnE,GACA3/B,EAAA4/B,GACA7C,EAAA8C,GACA9wC,EAAAixC,GACAlD,EAAAmD,GACA/vC,EAoPA,SAAAjB,GACA,OAAAwzC,IAAAxzC,EAAAsqC,YAAA,MApPAgG,EAAA2C,GACA/xC,EAAAgyC,GACA1T,EAAAyR,GACAhqC,EAAAkqC,GACAhC,EAAAkC,GACAhC,EAAAiC,GACAvlC,EAAAwlC,GACAhC,EAAAiC,GACAzvC,EAAA,KACAgX,EAAA,KACArX,EAAA+vC,GACAz4B,EAAA04B,GACA/B,EAAAgC,GACA9P,IAAAmR,IAGA8B,GACAjzC,EAsOA,SAAA7B,GACA,OAAA4zC,EAAA5zC,EAAA2sC,cAtOA74B,EAyOA,SAAA9T,GACA,OAAA0zC,EAAA1zC,EAAA2sC,cAzOA7qC,EA4OA,SAAA9B,GACA,OAAAg0C,EAAAh0C,EAAAqtC,gBA5OA5yB,EA+OA,SAAAza,GACA,OAAA8zC,EAAA9zC,EAAAqtC,gBA/OAttC,EAAA,KACAC,EAAA4xC,GACAtiC,EAAAsiC,GACArsB,EAAA4sB,GACAvE,EAAAiE,GACAgD,EAAA/C,GACA/gC,EAAAghC,GACAjE,EAAAmE,GACAnyC,EAAAsyC,GACAvE,EAAAwE,GACApxC,EAwOA,SAAAjB,GACA,OAAAwzC,IAAAxzC,EAAAosC,eAAA,MAxOAkE,EAAA2C,GACA/xC,EAAAgyC,GACA1T,EAAA8S,GACArrC,EAAAsrC,GACApD,EAAAsD,GACApD,EAAAqD,GACA3mC,EAAA4mC,GACApD,EAAAqD,GACA7wC,EAAA,KACAgX,EAAA,KACArX,EAAAmxC,GACA75B,EAAA85B,GACAnD,EAAAoD,GACAlR,IAAAmR,IAGA+B,GACAlzC,EAkJA,SAAA7B,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA2zC,EAAAhd,KAAAuF,EAAAxjB,MAAA3Z,IACA,OAAAiB,GAAAX,EAAA+L,EAAAwoC,EAAA5zC,EAAA,GAAA02B,eAAA33B,EAAAiB,EAAA,GAAA2D,SAAA,GAnJAwP,EAsJA,SAAA9T,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAAyzC,EAAA9c,KAAAuF,EAAAxjB,MAAA3Z,IACA,OAAAiB,GAAAX,EAAA+L,EAAAsoC,EAAA1zC,EAAA,GAAA02B,eAAA33B,EAAAiB,EAAA,GAAA2D,SAAA,GAvJAxC,EA0JA,SAAA9B,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA+zC,EAAApd,KAAAuF,EAAAxjB,MAAA3Z,IACA,OAAAiB,GAAAX,EAAAF,EAAA60C,EAAAh0C,EAAA,GAAA02B,eAAA33B,EAAAiB,EAAA,GAAA2D,SAAA,GA3JAmW,EA8JA,SAAAza,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAA6zC,EAAAld,KAAAuF,EAAAxjB,MAAA3Z,IACA,OAAAiB,GAAAX,EAAAF,EAAA20C,EAAA9zC,EAAA,GAAA02B,eAAA33B,EAAAiB,EAAA,GAAA2D,SAAA,GA/JAvE,EAkKA,SAAAC,EAAA68B,EAAAn9B,GACA,OAAAs1C,EAAAh1C,EAAAmzC,EAAAtW,EAAAn9B,IAlKAM,EAAA6vC,GACAvgC,EAAAugC,GACAtqB,EAAA4qB,GACAvC,EAAAmC,GACA8E,EAAA9E,GACAh/B,EAAA++B,GACAhC,EAAAoC,GACApwC,EAAA8vC,GACA/B,EAAAmC,GACA/uC,EA+HA,SAAAjB,EAAA68B,EAAAn9B,GACA,IAAAiB,EAAAuzC,EAAA5c,KAAAuF,EAAAxjB,MAAA3Z,IACA,OAAAiB,GAAAX,EAAAiB,EAAAkzC,EAAAxzC,EAAA,GAAA02B,eAAA33B,EAAAiB,EAAA,GAAA2D,SAAA,GAhIAgsC,EAAAD,GACAnvC,EAAAqvC,GACA/Q,EAAAyQ,GACAhpC,EAAAgoC,GACAE,EAAAD,GACAG,EAAAD,GACArjC,EAAAijC,GACAO,EAAAD,GACAvtC,EAmJA,SAAA/B,EAAA68B,EAAAn9B,GACA,OAAAs1C,EAAAh1C,EAAAqzC,EAAAxW,EAAAn9B,IAnJAqZ,EAsJA,SAAA/Y,EAAA68B,EAAAn9B,GACA,OAAAs1C,EAAAh1C,EAAAszC,EAAAzW,EAAAn9B,IAtJAgC,EAAA+tC,GACAz2B,EAAAw2B,GACAG,EAAAD,GACA7N,IAAAuO,IAWA,SAAAzM,EAAAzB,EAAA0S,GACA,gBAAAzY,GACA,IAIAp8B,EACAk1C,EACA9d,EANA0F,KACAn9B,GAAA,EACAqR,EAAA,EACApQ,EAAAuhC,EAAA59B,OAOA,IAFA63B,aAAAC,OAAAD,EAAA,IAAAC,MAAAD,MAEAz8B,EAAAiB,GACA,KAAAuhC,EAAAkC,WAAA1kC,KACAm9B,EAAA7zB,KAAAk5B,EAAA7oB,MAAAtI,EAAArR,IACA,OAAAu1C,EAAA5G,GAAAtuC,EAAAmiC,EAAAgT,SAAAx1C,KAAAK,EAAAmiC,EAAAgT,SAAAx1C,GACAu1C,EAAA,MAAAl1C,EAAA,SACAo3B,EAAAyd,EAAA70C,QAAAo3B,EAAAgF,EAAA8Y,IACApY,EAAA7zB,KAAAjJ,GACAgR,EAAArR,EAAA,GAKA,OADAm9B,EAAA7zB,KAAAk5B,EAAA7oB,MAAAtI,EAAArR,IACAm9B,EAAAne,KAAA,KAIA,SAAAy2B,EAAAjT,EAAAkT,GACA,gBAAAvY,GACA,IAEAwY,EAAAjE,EAFApxC,EAAAiuC,GAAA,MAGA,GAFA+G,EAAAh1C,EAAAkiC,EAAArF,GAAA,OAEAA,EAAAv4B,OAAA,YAGA,SAAAtE,EAAA,WAAAo8B,KAAAp8B,EAAAswC,GAMA,GAHA,MAAAtwC,MAAA4tC,EAAA5tC,EAAA4tC,EAAA,MAAA5tC,EAAAiB,GAGA,MAAAjB,EAAA,CACA,GAAAA,EAAAqvC,EAAA,GAAArvC,EAAAqvC,EAAA,eACA,MAAArvC,MAAA+L,EAAA,GACA,MAAA/L,GAEAq1C,GADAjE,GAAAiE,EAAAtH,GAAAE,GAAAjuC,EAAA0B,KAAAirC,aACA,OAAAyE,EAAAvE,GAAA9pC,KAAAsyC,GAAAxI,GAAAwI,GACAA,EAAArD,GAAAvI,OAAA4L,EAAA,GAAAr1C,EAAAqvC,EAAA,IACArvC,EAAA0B,EAAA2zC,EAAA/H,iBACAttC,EAAAF,EAAAu1C,EAAAhI,cACArtC,IAAAq1C,EAAA5I,cAAAzsC,EAAA+L,EAAA,OAGAspC,GADAjE,GAAAiE,EAAAD,EAAAnH,GAAAjuC,EAAA0B,KAAAopC,UACA,OAAAsG,EAAApG,GAAAjoC,KAAAsyC,GAAArK,GAAAqK,GACAA,EAAAzK,GAAAnB,OAAA4L,EAAA,GAAAr1C,EAAAqvC,EAAA,IACArvC,EAAA0B,EAAA2zC,EAAA5J,cACAzrC,EAAAF,EAAAu1C,EAAA7J,WACAxrC,IAAAq1C,EAAA1K,WAAA3qC,EAAA+L,EAAA,WAEO,MAAA/L,GAAA,MAAAA,KACP,MAAAA,MAAA+L,EAAA,MAAA/L,IAAAiH,EAAA,QAAAjH,EAAA,KACAoxC,EAAA,MAAApxC,EAAA+tC,GAAAE,GAAAjuC,EAAA0B,IAAAirC,YAAAyI,EAAAnH,GAAAjuC,EAAA0B,IAAAopC,SACA9qC,EAAAF,EAAA,EACAE,IAAA,MAAAA,KAAA+L,EAAA,OAAA/L,EAAAuvC,GAAA6B,EAAA,KAAApxC,EAAA+L,EAAA,EAAA/L,EAAAmvC,GAAAiC,EAAA,MAKA,YAAApxC,GACAA,EAAA4tC,GAAA5tC,EAAA2vC,EAAA,MACA3vC,EAAA6tC,GAAA7tC,EAAA2vC,EAAA,IACA5B,GAAA/tC,IAIAo1C,EAAAp1C,IAIA,SAAAg1C,EAAAh1C,EAAAkiC,EAAArF,EAAA9rB,GAOA,IANA,IAGAhR,EACA89B,EAJAn+B,EAAA,EACAiB,EAAAuhC,EAAA59B,OACAxE,EAAA+8B,EAAAv4B,OAIA5E,EAAAiB,GAAA,CACA,GAAAoQ,GAAAjR,EAAA,SAEA,SADAC,EAAAmiC,EAAAkC,WAAA1kC,OAIA,GAFAK,EAAAmiC,EAAAgT,OAAAx1C,OACAm+B,EAAAkX,EAAAh1C,KAAAsuC,GAAAnM,EAAAgT,OAAAx1C,KAAAK,MACAgR,EAAA8sB,EAAA79B,EAAA68B,EAAA9rB,IAAA,gBACO,GAAAhR,GAAA88B,EAAAuH,WAAArzB,KACP,SAIA,OAAAA,EAgFA,OA1LA6jC,EAAA7yC,EAAA4hC,EAAA0P,EAAAuB,GACAA,EAAA77B,EAAA4qB,EAAA2P,EAAAsB,GACAA,EAAA70C,EAAA4jC,EAAAwP,EAAAyB,GACAE,EAAA/yC,EAAA4hC,EAAA0P,EAAAyB,GACAA,EAAA/7B,EAAA4qB,EAAA2P,EAAAwB,GACAA,EAAA/0C,EAAA4jC,EAAAwP,EAAA2B,IAsLA3d,OAAA,SAAA+K,GACA,IAAA3c,EAAAoe,EAAAzB,GAAA,GAAA0S,GAEA,OADArvB,EAAAgT,SAAA,WAA+B,OAAA2J,GAC/B3c,GAEAsY,MAAA,SAAAqE,GACA,IAAAjhC,EAAAk0C,EAAAjT,GAAA,GAAAyL,IAEA,OADA1sC,EAAAs3B,SAAA,WAA+B,OAAA2J,GAC/BjhC,GAEAq0C,UAAA,SAAApT,GACA,IAAA3c,EAAAoe,EAAAzB,GAAA,GAAA4S,GAEA,OADAvvB,EAAAgT,SAAA,WAA+B,OAAA2J,GAC/B3c,GAEAgwB,SAAA,SAAArT,GACA,IAAAjhC,EAAAk0C,EAAAjT,EAAA6L,IAEA,OADA9sC,EAAAs3B,SAAA,WAA+B,OAAA2J,GAC/BjhC,IClVAu0C,EAXApC,SAAA,SACAjX,KAAA,aACAoX,KAAA,eACAE,SAAA,WACAE,MAAA,wEACAE,WAAA,2CACAE,QAAA,+GACAE,aAAA,2EAKA/F,GAAAvL,GAAAxL,OACAwL,GAAA9E,MACAsQ,GAAAxL,GAAA2S,UACAlH,GAAAzL,GAAA4S,SChBAnZ,KAAAr7B,UAAA00C,aAEAtH,GARA,0BCMA,IAAA/R,KAAA,6BAEAgS,GDRA,yBCMA,ICAAsH,GAAA,IACAC,GAAA,GAAAD,GACAE,GAAA,GAAAD,GACAE,GAAA,GAAAD,GACAE,GAAA,EAAAD,GACAE,GAAA,GAAAF,GACAG,GAAA,IAAAH,GAEA,SAAAI,GAAAz0C,GACA,WAAA46B,KAAA56B,GAGA,SAAA00C,GAAA10C,GACA,OAAAA,aAAA46B,MAAA56B,GAAA,IAAA46B,MAAA56B,GAGA,SAAA20C,GAAAC,EAAAC,EAAAhB,EAAAjE,EAAAkF,EAAAC,EAAAC,EAAAC,EAAAtf,GACA,IAAA5X,EAAA0nB,EAAAT,EAAAa,EAAA,GACA96B,EAAAgT,EAAAhT,OACAie,EAAAjL,EAAAiL,OAEAksB,EAAAvf,EAAA,OACAwf,EAAAxf,EAAA,OACAyf,EAAAzf,EAAA,SACA0f,EAAA1f,EAAA,SACA2f,EAAA3f,EAAA,SACA4f,EAAA5f,EAAA,SACA6f,EAAA7f,EAAA,MACA8f,EAAA9f,EAAA,MAEA+f,IACAV,EAAA,EAAAd,KACAc,EAAA,IAAAd,KACAc,EAAA,MAAAd,KACAc,EAAA,MAAAd,KACAa,EAAA,EAAAZ,KACAY,EAAA,IAAAZ,KACAY,EAAA,MAAAZ,KACAY,EAAA,MAAAZ,KACAW,EAAA,EAAAV,KACAU,EAAA,IAAAV,KACAU,EAAA,IAAAV,KACAU,EAAA,MAAAV,KACAxE,EAAA,EAAAyE,KACAzE,EAAA,IAAAyE,KACAR,EAAA,EAAAS,KACAO,EAAA,EAAAN,KACAM,EAAA,IAAAN,KACAK,EAAA,EAAAJ,KAGA,SAAArO,EAAAxL,GACA,OAAAqa,EAAAra,KAAAua,EACAH,EAAApa,KAAAwa,EACAL,EAAAna,KAAAya,EACAxF,EAAAjV,KAAA0a,EACAR,EAAAla,KAAAkZ,EAAAlZ,KAAA2a,EAAAC,EACAX,EAAAja,KAAA6a,EACAC,GAAA9a,GAGA,SAAAgb,EAAApP,EAAA73B,EAAAqZ,EAAAxb,GAMA,GALA,MAAAg6B,MAAA,IAKA,iBAAAA,EAAA,CACA,IAAAhB,EAAA3kC,KAAAO,IAAA4mB,EAAArZ,GAAA63B,EACAroC,EAAAU,OAAA8R,EAAA,EAAA9R,CAAA,SAAAV,GAAoC,OAAAA,EAAA,KAAemoB,MAAAqvB,EAAAnQ,GACnDrnC,IAAAw3C,EAAA5yC,QACAyJ,EAAA3N,OAAA8R,EAAA,EAAA9R,CAAA8P,EAAA8lC,GAAAzsB,EAAAysB,GAAAjO,GACAA,EAAAqO,GACO12C,GAEPqO,GADArO,EAAAw3C,EAAAnQ,EAAAmQ,EAAAx3C,EAAA,MAAAw3C,EAAAx3C,GAAA,GAAAqnC,EAAArnC,EAAA,EAAAA,IACA,GACAqoC,EAAAroC,EAAA,KAEAqO,EAAA3L,KAAAsU,IAAAtW,OAAA8R,EAAA,EAAA9R,CAAA8P,EAAAqZ,EAAAwe,GAAA,GACAA,EAAA0O,GAIA,aAAA1oC,EAAAg6B,IAAA4B,MAAA57B,GAsCA,OAnCAwR,EAAAhT,OAAA,SAAA7K,GACA,WAAA06B,KAAA7vB,EAAA7K,KAGA6d,EAAAiL,OAAA,SAAAhc,GACA,OAAAD,UAAAjK,OAAAkmB,EAAAgb,EAAA3lC,KAAA2O,EAAA0nC,KAAA1rB,IAAApS,IAAA69B,KAGA12B,EAAAoK,MAAA,SAAAoe,EAAAh6B,GACA,IAIAvM,EAJAxB,EAAAwqB,IACA7c,EAAA3N,EAAA,GACA4N,EAAA5N,IAAAsE,OAAA,GACA7D,EAAAmN,EAAAD,EAKA,OAHAlN,IAAAe,EAAAmM,IAAAC,IAAApM,GAEAA,GADAA,EAAA21C,EAAApP,EAAAp6B,EAAAC,EAAAG,IACAvM,EAAAqI,MAAA8D,EAAAC,EAAA,MACAnN,EAAAe,EAAA8X,UAAA9X,GAGA+d,EAAAooB,WAAA,SAAA/d,EAAAsY,GACA,aAAAA,EAAAyF,EAAAxQ,EAAA+K,IAGA3iB,EAAAqoB,KAAA,SAAAG,EAAAh6B,GACA,IAAA/N,EAAAwqB,IACA,OAAAud,EAAAoP,EAAApP,EAAA/nC,EAAA,GAAAA,IAAAsE,OAAA,GAAAyJ,IACAyc,EAAAod,EAAA5nC,EAAA+nC,IACAxoB,GAGAA,EAAAqmB,KAAA,WACA,OAAAkB,EAAAvnB,EAAA42B,GAAAC,EAAAC,EAAAhB,EAAAjE,EAAAkF,EAAAC,EAAAC,EAAAC,EAAAtf,KAGA5X,EAGA,IAAAg0B,GAAA,WACA,OAAA4C,GAAAtK,GAAAH,GAAAX,GAAAH,GAAAL,GAAA6M,GAAAC,EAAAxN,EAAAqE,IAAA1jB,QAAA,IAAA4R,KAAA,aAAAA,KAAA,YCjIAkb,GAAA,WACA,OAAAnB,GAAAzI,GAAAH,GAAAX,GAAAoF,GAAA3F,GAAAJ,GAAAoL,EAAAxN,EAAAsE,IAAA3jB,QAAA4R,KAAA4R,IAAA,SAAA5R,KAAA4R,IAAA,YCHA,SAAAuJ,GAAAxW,GACA,IAAArsB,EAAA,EACAE,EAAA,EACAoyB,GAAA,EAEA,SAAAznB,EAAAxd,GACA,IAAAP,GAAAO,EAAA2S,IAAAE,EAAAF,GACA,OAAAqsB,EAAAiG,EAAA5kC,KAAAsU,IAAA,EAAAtU,KAAAuU,IAAA,EAAAnV,OAmBA,OAhBA+d,EAAAiL,OAAA,SAAAhc,GACA,OAAAD,UAAAjK,QAAAoQ,GAAAlG,EAAA,GAAAoG,GAAApG,EAAA,GAAA+Q,IAAA7K,EAAAE,IAGA2K,EAAAynB,MAAA,SAAAx4B,GACA,OAAAD,UAAAjK,QAAA0iC,IAAAx4B,EAAA+Q,GAAAynB,GAGAznB,EAAAwhB,aAAA,SAAAvyB,GACA,OAAAD,UAAAjK,QAAAy8B,EAAAvyB,EAAA+Q,GAAAwhB,GAGAxhB,EAAAqmB,KAAA,WACA,OAAA2R,GAAAxW,GAAAvW,QAAA9V,EAAAE,IAAAoyB,UAGAU,EAAAnoB,iqBC5BA,IAAA7E,EAAA,SAAA3Y,GACA,OAAAA,GCCAgd,EAAA,SAAAoD,GACA,SAAAA,EAAA,OAAAzH,EACA,IAAAhG,EACAC,EACAyR,EAAAjE,EAAA5C,MAAA,GACA8G,EAAAlE,EAAA5C,MAAA,GACAvK,EAAAmN,EAAA3C,UAAA,GACAvK,EAAAkN,EAAA3C,UAAA,GACA,gBAAA4nB,EAAA1nC,GACAA,IAAAgV,EAAAC,EAAA,GACA,IAAA5D,EAAA,EAAApQ,EAAAymC,EAAA9iC,OAAA6iC,EAAA,IAAA/e,MAAAznB,GAGA,IAFAwmC,EAAA,IAAAzyB,GAAA0yB,EAAA,IAAAhhB,EAAApR,EACAmyB,EAAA,IAAAxyB,GAAAyyB,EAAA,IAAA/gB,EAAApR,EACAlE,EAAApQ,GAAAwmC,EAAAp2B,GAAAq2B,EAAAr2B,OACA,OAAAo2B,ICdAqQ,EAAA,SAAAC,GACA,IAAAt4B,EAAA3d,EAAAud,EAAA04B,EAAAt1B,WACAzN,EAAAxJ,IAAAyJ,EAAAD,EAAAE,GAAAF,EAAAG,GAAAH,EAEA,SAAAgjC,EAAAz2C,IACAA,EAAAO,EAAAP,IACA,GAAAyT,MAAAzT,EAAA,IACAA,EAAA,GAAA2T,MAAA3T,EAAA,IACAA,EAAA,GAAA0T,MAAA1T,EAAA,IACAA,EAAA,GAAA4T,MAAA5T,EAAA,IAGA,SAAA02C,EAAAx3C,GACA,OAAAA,EAAA8D,MACA,yBAAA9D,EAAAiF,WAAAyK,QAAA8nC,GAAoE,MACpE,YAAAD,EAAAv3C,EAAAuE,aAA6C,MAC7C,iBAAAvE,EAAAuE,YAAAmL,QAAA6nC,IAeA,IAAAv4B,KAXAs4B,EAAAG,KAAA/nC,QAAA,SAAAwB,GAEA,IADA,IAAApQ,EAAAvB,GAAA,EAAAiB,EAAA0Q,EAAA/M,SACA5E,EAAAiB,IACAM,EAAAO,EAAA6P,EAAA3R,OACA,GAAAgV,MAAAzT,EAAA,IACAA,EAAA,GAAA2T,MAAA3T,EAAA,IACAA,EAAA,GAAA0T,MAAA1T,EAAA,IACAA,EAAA,GAAA4T,MAAA5T,EAAA,MAIAw2C,EAAAI,QACAF,EAAAF,EAAAI,QAAA14B,IAGA,OAAAzK,EAAAC,EAAAC,EAAAC,ICrCAyE,EAAA,SAAAjJ,EAAA1P,GAEA,IADA,IAAAa,EAAAuP,EAAAV,EAAA/L,OAAA5E,EAAAqR,EAAApQ,EACAjB,IAAAqR,GAAAvP,EAAA6O,EAAA3Q,GAAA2Q,EAAA3Q,KAAA2Q,EAAAU,GAAAV,EAAAU,GAAAvP,cCCAi2C,EAAAt3C,GACA,6BAAAA,EAAA8D,MACSA,KAAA,oBAAAI,SAAAlE,EAAAiF,WAAAgT,IAAA,SAAAjY,GAAmE,OAAA23C,EAAAL,EAAAt3C,MAC5E23C,EAAAL,EAAAt3C,IAGA,SAAA23C,EAAAL,EAAAt3C,GACA,IAAA43C,EAAA53C,EAAA43C,GACAP,EAAAr3C,EAAAq3C,KACAQ,EAAA,MAAA73C,EAAA63C,cAA4C73C,EAAA63C,WAC5Cl0C,EAAAm0C,EAAAR,EAAAt3C,GACA,aAAA43C,GAAA,MAAAP,GAAuCvzC,KAAA,UAAA+zC,aAAAl0C,YACvC,MAAA0zC,GAAwBvzC,KAAA,UAAA8zC,KAAAC,aAAAl0C,aACfG,KAAA,UAAA8zC,KAAAP,OAAAQ,aAAAl0C,YAGT,SAAAm0C,EAAAR,EAAAt3C,GACA,IAAA+3C,EAAAn5B,EAAA04B,EAAAt1B,WACAy1B,EAAAH,EAAAG,KAEA,SAAAvmC,EAAA3R,EAAAyP,GACAA,EAAA7K,QAAA6K,EAAAN,MACA,QAAAhN,EAAA+1C,EAAAl4C,EAAA,GAAAA,KAAAsH,EAAA,EAAArG,EAAAkB,EAAAyC,OAA2D0C,EAAArG,IAAOqG,EAClEmI,EAAAnG,KAAAkvC,EAAAr2C,EAAAmF,OAEAtH,EAAA,GAAA4Z,EAAAnK,EAAAxO,GAGA,SAAAgE,EAAA1D,GACA,OAAAi3C,EAAAj3C,GAGA,SAAAyN,EAAAkpC,GAEA,IADA,IAAAzoC,KACAzP,EAAA,EAAAiB,EAAAi3C,EAAAtzC,OAAoC5E,EAAAiB,IAAOjB,EAAA2R,EAAAumC,EAAAl4C,GAAAyP,GAE3C,OADAA,EAAA7K,OAAA,GAAA6K,EAAAnG,KAAAmG,EAAA,IACAA,EAGA,SAAAjB,EAAA0pC,GAEA,IADA,IAAAzoC,EAAAT,EAAAkpC,GACAzoC,EAAA7K,OAAA,GAAA6K,EAAAnG,KAAAmG,EAAA,IACA,OAAAA,EAGA,SAAAqB,EAAAonC,GACA,OAAAA,EAAAx/B,IAAAlK,GAkBA,OAfA,SAAApK,EAAA3D,GACA,IAAAuE,EAAAT,EAAA9D,EAAA8D,KACA,OAAAA,GACA,gCAAyCA,OAAAmB,WAAAjF,EAAAiF,WAAAgT,IAAAtU,IACzC,YAAAY,EAAAC,EAAAxE,EAAAuE,aAAuD,MACvD,iBAAAA,EAAAvE,EAAAuE,YAAA0T,IAAAzT,GAAgE,MAChE,iBAAAD,EAAAgK,EAAAvO,EAAAy3C,MAAoD,MACpD,sBAAAlzC,EAAAvE,EAAAy3C,KAAAx/B,IAAA1J,GAA6D,MAC7D,cAAAhK,EAAA8L,EAAArQ,EAAAy3C,MAAoD,MACpD,mBAAAlzC,EAAAvE,EAAAy3C,KAAAx/B,IAAA5H,GAA6D,MAC7D,oBAEA,OAAYvM,OAAAS,eAGZZ,CAAA3D,GCnEA,IAAAg4C,EAAA,SAAAV,EAAAG,GACA,IAAAQ,KACAC,KACAC,KACAC,KACAC,GAAA,EAmDA,SAAAC,EAAAH,EAAAD,GACA,QAAArxC,KAAAsxC,EAAA,CACA,IAAA/yB,EAAA+yB,EAAAtxC,UACAqxC,EAAA9yB,EAAArV,cACAqV,EAAArV,aACAqV,EAAAiW,IACAjW,EAAA1V,QAAA,SAAAnQ,GAA6B04C,EAAA14C,EAAA,GAAAA,KAAA,IAC7B64C,EAAAvvC,KAAAuc,IAQA,OA/DAqyB,EAAA/nC,QAAA,SAAAnQ,EAAAqR,GACA,IAAAvP,EAAA6P,EAAAomC,EAAAG,KAAAl4C,EAAA,GAAAA,KACA2R,EAAA/M,OAAA,IAAA+M,EAAA,QAAAA,EAAA,QACA7P,EAAAo2C,IAAAY,GAAAZ,EAAAY,GAAA94C,EAAAk4C,EAAA7mC,GAAAvP,KAIAo2C,EAAA/nC,QAAA,SAAAnQ,GACA,IAGA6lB,EAAAM,EAHAvW,EAiCA,SAAA5P,GACA,IAAAsQ,EAAAqB,EAAAomC,EAAAG,KAAAl4C,EAAA,GAAAA,KAAAqQ,EAAAsB,EAAA,GACAomC,EAAAt1B,WAAAnS,GAAA,KAAAqB,EAAAxB,QAAA,SAAA6oC,GAAmE1oC,EAAA,IAAA0oC,EAAA,GAAA1oC,EAAA,IAAA0oC,EAAA,MACnE1oC,EAAAqB,IAAA/M,OAAA,GACA,OAAA5E,EAAA,GAAAsQ,EAAAD,MAAAC,GArCA2oC,CAAAj5C,GACAwQ,EAAAZ,EAAA,GACAksB,EAAAlsB,EAAA,GAGA,GAAAiW,EAAA+yB,EAAApoC,GAIA,UAHAooC,EAAA/yB,EAAAiW,KACAjW,EAAAvc,KAAAtJ,GACA6lB,EAAAiW,MACA3V,EAAAwyB,EAAA7c,GAAA,QACA6c,EAAAxyB,EAAA3V,OACA,IAAA0oC,EAAA/yB,IAAAN,MAAAzW,OAAA+W,GACAwyB,EAAAO,EAAA1oC,MAAAqV,EAAArV,OAAAooC,EAAAM,EAAApd,IAAA3V,EAAA2V,KAAAod,OAEAP,EAAA9yB,EAAArV,OAAAooC,EAAA/yB,EAAAiW,KAAAjW,OAEK,GAAAA,EAAA8yB,EAAA7c,GAIL,UAHA6c,EAAA9yB,EAAArV,OACAqV,EAAAszB,QAAAn5C,GACA6lB,EAAArV,QACA2V,EAAAyyB,EAAApoC,GAAA,QACAooC,EAAAzyB,EAAA2V,KACA,IAAAsd,EAAAjzB,IAAAN,IAAAM,EAAA/W,OAAAyW,GACA8yB,EAAAS,EAAA5oC,MAAA2V,EAAA3V,OAAAooC,EAAAQ,EAAAtd,IAAAjW,EAAAiW,KAAAsd,OAEAT,EAAA9yB,EAAArV,OAAAooC,EAAA/yB,EAAAiW,KAAAjW,OAIA8yB,GADA9yB,GAAA7lB,IACAwQ,SAAAooC,EAAA/yB,EAAAiW,OAAAjW,IAsBAkzB,EAAAH,EAAAD,GACAI,EAAAJ,EAAAC,GACAV,EAAA/nC,QAAA,SAAAnQ,GAA4B04C,EAAA14C,EAAA,GAAAA,MAAA64C,EAAAvvC,MAAAtJ,MAE5B64C,cCpEAd,GACA,OAAAQ,EAAAR,EAAAsB,EAAAzqC,MAAAjN,KAAAkN,aAGA,SAAAwqC,EAAAtB,EAAA52C,EAAA0R,GACA,IAAAqlC,EAAAl4C,EAAAiB,EACA,GAAA4N,UAAAjK,OAAA,EAAAszC,EAKA,SAAAH,EAAA52C,EAAA0R,GACA,IAEAymC,EAFApB,KACAqB,KAGA,SAAAC,EAAAx5C,GACA,IAAAqR,EAAArR,EAAA,GAAAA,KACAu5C,EAAAloC,KAAAkoC,EAAAloC,QAAA/H,MAAkDtJ,IAAAmmB,EAAAmzB,IAGlD,SAAAG,EAAAvB,GACAA,EAAA/nC,QAAAqpC,GAGA,SAAAE,EAAAxB,GACAA,EAAA/nC,QAAAspC,GAsBA,OAfA,SAAAr1C,EAAA3D,GACA,OAAA64C,EAAA74C,IAAA8D,MACA,yBAAA9D,EAAAiF,WAAAyK,QAAA/L,GAAgE,MAChE,iBAAAq1C,EAAAh5C,EAAAy3C,MAA0C,MAC1C,oCAAAwB,EAAAj5C,EAAAy3C,MAA+D,MAC/D,mBAAAz3C,EAAAy3C,KARA/nC,QAAAupC,IAYAt1C,CAAAjD,GAEAo4C,EAAAppC,QAAA,MAAA0C,EACA,SAAA8mC,GAAyBzB,EAAA5uC,KAAAqwC,EAAA,GAAA35C,IACzB,SAAA25C,GAAyB9mC,EAAA8mC,EAAA,GAAAxzB,EAAAwzB,IAAA/0C,OAAA,GAAAuhB,IAAA+xB,EAAA5uC,KAAAqwC,EAAA,GAAA35C,KAEzBk4C,EA1CA0B,CAAA7B,EAAA52C,EAAA0R,QACA,IAAA7S,EAAA,EAAAk4C,EAAA,IAAAxvB,MAAAznB,EAAA82C,EAAAG,KAAAtzC,QAA8D5E,EAAAiB,IAAOjB,EAAAk4C,EAAAl4C,KACrE,OAAUuE,KAAA,kBAAA2zC,KAAAO,EAAAV,EAAAG,mBCFVH,GACA,OAAAQ,EAAAR,EAAA8B,EAAAjrC,MAAAjN,KAAAkN,aAGA,SAAAgrC,EAAA9B,EAAAI,GACA,IAAA2B,KACAC,KACAC,KAYA,SAAAC,EAAAnpC,GACAA,EAAAX,QAAA,SAAA3B,GACAA,EAAA2B,QAAA,SAAAwB,IACAmoC,EAAAnoC,IAAA,GAAAA,OAAAmoC,EAAAnoC,QAAArI,KAAAwH,OAGAipC,EAAAzwC,KAAAwH,GAGA,SAAAwK,EAAA9M,GACA,OAnCA,SAAAA,GAEA,IADA,IAAArM,EAAAnC,GAAA,EAAAiB,EAAAuN,EAAA5J,OAAAxC,EAAAoM,EAAAvN,EAAA,GAAAqa,EAAA,IACAtb,EAAAiB,GAAAkB,EAAAC,IAAAoM,EAAAxO,GAAAsb,GAAAnZ,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GACA,OAAAM,KAAAO,IAAAqY,GAgCA4+B,CAAA3B,EAAAR,GAA4CxzC,KAAA,UAAA2zC,MAAA1pC,KAA8BxJ,YAAA,IA6B1E,OAjDAmzC,EAAAhoC,QAEA,SAAA/L,EAAA3D,GACA,OAAAA,EAAA8D,MACA,yBAAA9D,EAAAiF,WAAAyK,QAAA/L,GAAgE,MAChE,cAAA61C,EAAAx5C,EAAAy3C,MAAsC,MACtC,mBAAAz3C,EAAAy3C,KAAA/nC,QAAA8pC,MAiBAF,EAAA5pC,QAAA,SAAAW,GACA,IAAAA,EAAAhC,EAAA,CACA,IAAA20B,KACA0W,GAAArpC,GAGA,IAFAA,EAAAhC,EAAA,EACAkrC,EAAA1wC,KAAAm6B,GACA3yB,EAAAqpC,EAAAhrC,OACAs0B,EAAAn6B,KAAAwH,GACAA,EAAAX,QAAA,SAAA3B,GACAA,EAAA2B,QAAA,SAAAwB,GACAmoC,EAAAnoC,EAAA,GAAAA,KAAAxB,QAAA,SAAAW,GACAA,EAAAhC,IACAgC,EAAAhC,EAAA,EACAqrC,EAAA7wC,KAAAwH,aASAipC,EAAA5pC,QAAA,SAAAW,UACAA,EAAAhC,KAIAvK,KAAA,eACA2zC,KAAA8B,EAAAthC,IAAA,SAAAqhC,GACA,IAAA94C,EAAAi3C,KAmBA,GAhBA6B,EAAA5pC,QAAA,SAAAW,GACAA,EAAAX,QAAA,SAAA3B,GACAA,EAAA2B,QAAA,SAAAwB,GACAmoC,EAAAnoC,EAAA,GAAAA,KAAA/M,OAAA,GACAszC,EAAA5uC,KAAAqI,UAYA1Q,GALAi3C,EAAAO,EAAAV,EAAAG,IAKAtzC,QAAA,EACA,QAAAw1C,EAAAt4C,EAAA9B,EAAA,EAAAsH,EAAAgU,EAAA48B,EAAA,IAAiDl4C,EAAAiB,IAAOjB,GACxDo6C,EAAA9+B,EAAA48B,EAAAl4C,KAAAsH,IACAxF,EAAAo2C,EAAA,GAAAA,EAAA,GAAAA,EAAAl4C,GAAAk4C,EAAAl4C,GAAA8B,EAAAwF,EAAA8yC,GAKA,OAAAlC,KCjGA,IAAA3vB,EAAA,SAAApmB,EAAAE,GAEA,IADA,IAAA2lB,EAAA,EAAAC,EAAA9lB,EAAAyC,OACAojB,EAAAC,GAAA,CACA,IAAAC,EAAAF,EAAAC,IAAA,EACA9lB,EAAA+lB,GAAA7lB,EAAA2lB,EAAAE,EAAA,EACAD,EAAAC,EAEA,OAAAF,GCLAqyB,EAAA,SAAAlC,GACA,IAAAmC,KACAH,EAAAhC,EAAAz/B,IAAA,WAA0C,WAE1C,SAAA1J,EAAAkpC,EAAAl4C,GACAk4C,EAAA/nC,QAAA,SAAAhO,GACAA,EAAA,IAAAA,MACA,IAAA1B,EAAA65C,EAAAn4C,GACA1B,IAAA6I,KAAAtJ,GACAs6C,EAAAn4C,IAAAnC,KAIA,SAAA8Q,EAAAonC,EAAAl4C,GACAk4C,EAAA/nC,QAAA,SAAAwB,GAAgC3C,EAAA2C,EAAA3R,KAQhC,IAAAu6C,GACAp1C,WAAA6J,EACA3J,gBAAAyL,EACAxL,QAAAwL,EACAtL,aAAA,SAAA0yC,EAAAl4C,GAAqCk4C,EAAA/nC,QAAA,SAAAwB,GAA6Bb,EAAAa,EAAA3R,OAKlE,QAAAA,KAFAm4C,EAAAhoC,QAZA,SAAA/L,EAAA3D,EAAAT,GACA,uBAAAS,EAAA8D,KAAA9D,EAAAiF,WAAAyK,QAAA,SAAA1P,GAA2E2D,EAAA3D,EAAAT,KAC3ES,EAAA8D,QAAAg2C,KAAA95C,EAAA8D,MAAA9D,EAAAy3C,KAAAl4C,KAYAs6C,EACA,QAAAnuB,EAAAmuB,EAAAt6C,GAAAI,EAAA+rB,EAAAvnB,OAAAyM,EAAA,EAAkEA,EAAAjR,IAAOiR,EACzE,QAAA/J,EAAA+J,EAAA,EAAyB/J,EAAAlH,IAAOkH,EAAA,CAChC,IAAArG,EAAAu5C,EAAAruB,EAAA9a,GAAAopC,EAAAtuB,EAAA7kB,IACArG,EAAAk5C,EAAAK,IAAAx6C,EAAAuoB,EAAAtnB,EAAAw5C,SAAAx5C,EAAAy5C,OAAA16C,EAAA,EAAAy6C,IACAx5C,EAAAk5C,EAAAM,IAAAz6C,EAAAuoB,EAAAtnB,EAAAu5C,SAAAv5C,EAAAy5C,OAAA16C,EAAA,EAAAw6C,GAKA,OAAAL,GCzCAQ,EAAA,SAAAl4B,GACA,SAAAA,EAAA,OAAAzH,EACA,IAAAhG,EACAC,EACAyR,EAAAjE,EAAA5C,MAAA,GACA8G,EAAAlE,EAAA5C,MAAA,GACAvK,EAAAmN,EAAA3C,UAAA,GACAvK,EAAAkN,EAAA3C,UAAA,GACA,gBAAA4nB,EAAA1nC,GACAA,IAAAgV,EAAAC,EAAA,GACA,IAAA5D,EAAA,EACApQ,EAAAymC,EAAA9iC,OACA6iC,EAAA,IAAA/e,MAAAznB,GACAiU,EAAAxS,KAAAs2B,OAAA0O,EAAA,GAAApyB,GAAAoR,GACAvR,EAAAzS,KAAAs2B,OAAA0O,EAAA,GAAAnyB,GAAAoR,GAGA,IAFA8gB,EAAA,GAAAvyB,EAAAF,IAAAE,EACAuyB,EAAA,GAAAtyB,EAAAF,IAAAE,EACA9D,EAAApQ,GAAAwmC,EAAAp2B,GAAAq2B,EAAAr2B,OACA,OAAAo2B,ICjBArG,EAAA,SAAA2W,EAAAt1B,GACA,GAAAs1B,EAAAt1B,UAAA,UAAAkgB,MAAA,qBAEA,GAAAlgB,KAAA5C,MAMA+6B,EAAA7C,EAAAD,SANA,CACA,MAAA72C,EAAAyB,KAAAc,MAAAif,KAAA,aAAAkgB,MAAA,gBAEA,IAAA1hC,EAAA+T,GADA4lC,EAAA7C,EAAAD,QAAAC,IACA,GAAA9iC,EAAA2lC,EAAA,GAAA1lC,EAAA0lC,EAAA,GAAAzlC,EAAAylC,EAAA,GACAn4B,GAAiB5C,OAAA3K,EAAAF,GAAAE,EAAAF,IAAA/T,EAAA,KAAAkU,EAAAF,GAAAE,EAAAF,IAAAhU,EAAA,MAAA6e,WAAA9K,EAAAC,IAKjB,IAAA2lC,EAAAn7B,EAAA3d,EAAA64C,EAAAl4B,GAAAo4B,EAAA9C,EAAAI,QAAA2C,KAEA,SAAAC,EAAA91C,GACA,OAAAnD,EAAAmD,GAGA,SAAA+1C,EAAAtT,GACA,IAAAD,EACA,OAAAC,EAAAnjC,MACA,yBAAAkjC,GAA2CljC,KAAA,qBAAAmB,WAAAgiC,EAAAhiC,WAAAgT,IAAAsiC,IAAgF,MAC3H,YAAAvT,GAA8BljC,KAAA,QAAAS,YAAA+1C,EAAArT,EAAA1iC,cAA8D,MAC5F,iBAAAyiC,GAAmCljC,KAAA,aAAAS,YAAA0iC,EAAA1iC,YAAA0T,IAAAqiC,IAAuE,MAC1G,eAAArT,EAKA,OAHA,MAAAA,EAAA2Q,KAAA5Q,EAAA4Q,GAAA3Q,EAAA2Q,IACA,MAAA3Q,EAAAoQ,OAAArQ,EAAAqQ,KAAApQ,EAAAoQ,MACA,MAAApQ,EAAA4Q,aAAA7Q,EAAA6Q,WAAA5Q,EAAA4Q,YACA7Q,EAYA,IAAAhoB,KAAAo7B,EAAAC,EAAAr7B,GAAAu7B,EAAAH,EAAAp7B,IAEA,OACAlb,KAAA,WACAuzC,KAAA8C,EACAn4B,YACA01B,QAAA2C,EACA5C,KAAAH,EAAAG,KAAAx/B,IAhBA,SAAAgvB,GACA,IAAAnmC,EAAAvB,EAAA,EAAAqR,EAAA,EAAApQ,EAAAymC,EAAA9iC,OAAA6iC,EAAA,IAAA/e,MAAAznB,GAEA,IADAwmC,EAAA,GAAA3lC,EAAA4lC,EAAA,QACA1nC,EAAAiB,KAAAM,EAAAO,EAAA4lC,EAAA1nC,OAAA,IAAAuB,EAAA,MAAAkmC,EAAAp2B,KAAA9P,GAGA,OAFA,IAAA8P,IAAAo2B,EAAAp2B,MAAA,MACAo2B,EAAA7iC,OAAAyM,EACAo2B,mcCrCAwT,OAAOC,kBAAkB,UACrBC,KAAM,WACFx5C,KAAKy5C,GAAGC,QAAQC,iBAAiB,yBAA0B35C,KAAK45C,uBAAuBC,KAAK75C,OAC5FA,KAAKy5C,GAAGC,QAAQC,iBAAiB,qBAAsB35C,KAAK85C,iBAAiBD,KAAK75C,QAEtF0jC,OAAQ,WACJ1jC,KAAKy5C,GAAGC,QAAQK,oBAAoB,yBAA0B/5C,KAAK45C,uBAAuBC,KAAK75C,OAC/FA,KAAKy5C,GAAGC,QAAQK,oBAAoB,qBAAsB/5C,KAAK85C,iBAAiBD,KAAK75C,QAEzF85C,iBAAkB,SAAUE,GACT/c,SAASgd,cAAc,SAC/Bpc,aAAa,QAASmc,EAAME,OAAOnF,OAE9C6E,uBAAwB,SAAUI,GAC9B,MAAMG,EAAaH,EAAME,OAAOC,WAC1BvwB,EAAaowB,EAAME,OAAOtwB,WAC1BwwB,EAAqBr7C,OAAA8R,EAAA,EAAA9R,CAAc6qB,GAAYzC,OAAO,CAACkzB,EAAKC,KAC9D,MAAMC,GAAYD,EAAK,GAAKA,EAAK,IAAI,EAGrC,OADAD,EADcF,EAAWI,IACZD,EACND,OAEL7f,EAAS2f,EAAW3xC,QAEpBgyC,EAAiBC,OAAOtkB,SAASn2B,KAAKy5C,GAAGiB,aAAa,UACtDC,EAAkBF,OAAOtkB,SAASn2B,KAAKy5C,GAAGiB,aAAa,WACvDj8B,EAAQ+7B,EAAehgB,EAAOv3B,OACpC,IAAI23C,IAAkBJ,EAAe,EAAI/7B,EAAM,GAC/C,MAAMo8B,EAAeF,EAAgB,EAC/BG,EAAUD,EAAa,EACvBE,GAAcF,EAAa,EAC3BG,EAAS/d,SAASC,cAAc,UACtC8d,EAAOnd,aAAa,QAAS,UAC7Bmd,EAAOnd,aAAa,QAAS,eAC7Bmd,EAAOnd,aAAa,QAAS,mDAC7B79B,KAAKy5C,GAAGlc,YAAYyd,GAEpB,MAAMC,EAAYl8C,OAAAqnC,EAAA,EAAArnC,CAAO,OACzB,IAAK,IAAIm7B,KAASM,EAAQ,CACtB,MAAM/O,EAASwR,SAASC,cAAc,YACtCzR,EAAOoS,aAAa,YAAaqd,UAAW,QAASz8B,MAAOA,EAAOE,OAAQk8B,IAC3EpvB,EAAOoS,aAAa,cAAe+c,MAAkBD,EAAgB,OACrElvB,EAAOoS,aAAa,WAAY,WAAW,GAC3C,MAAMob,EAAMhc,SAASC,cAAc,SACnC+b,EAAIpb,aAAa,gBAAiBid,OAClC7B,EAAIpb,aAAa,WAAY,QAAS3D,GACtC+e,EAAIpb,aAAa,SAAU,OAC3Bob,EAAIpb,aAAa,WAAYpf,KAC7Bw6B,EAAIpb,aAAa,QAAS,OAC1BpS,EAAO8R,YAAY0b,GACnB,MAAMkC,EAAQle,SAASC,cAAc,UACrCie,EAAMtd,aAAa,gBAAiBkd,OACpCI,EAAMtd,aAAa,QAAS,UAC5Bsd,EAAMtd,aAAa,QAAS,eAC5B,MAAMud,EAAiBhB,EAAmBlgB,GAC1CihB,EAAMtd,aAAa,WAAYod,EAAUG,EAAe,UAAUH,EAAUG,EAAe,OAC3F3vB,EAAO8R,YAAY4d,GACnBn7C,KAAKy5C,GAAGlc,YAAY9R,GACpBmvB,GAAiBn8B,iBCzD7B,ICLA48B,KACAC,KACAC,EAAA,GACAC,EAAA,GACAC,EAAA,GAEA,SAAAC,EAAAC,GACA,WAAAC,SAAA,eAAoCD,EAAA5kC,IAAA,SAAAnY,EAAAP,GACpC,OAAAw9C,KAAAC,UAAAl9C,GAAA,OAAAP,EAAA,MACGgf,KAAA,UA0BH,IAAA0+B,EAAA,SAAAC,GACA,IAAAC,EAAA,IAAA9vB,OAAA,KAAA6vB,EAAA,SACAE,EAAAF,EAAAjZ,WAAA,GAWA,SAAAoZ,EAAAC,EAAAl4B,GACA,IAIA/jB,EAJAk8C,KACAC,EAAAF,EAAAn5C,OACAuwC,EAAA,EACAl0C,EAAA,EAEAi9C,EAAAD,GAAA,EACAE,GAAA,EAMA,SAAAC,IACA,GAAAF,EAAA,OAAAjB,EACA,GAAAkB,EAAA,OAAAA,GAAA,EAAAnB,EAGA,IAAAh9C,EAAAK,EAAAgR,EAAA8jC,EACA,GAAA4I,EAAArZ,WAAArzB,KAAA6rC,EAAA,CACA,KAAA/H,IAAA8I,GAAAF,EAAArZ,WAAAyQ,KAAA+H,GAAAa,EAAArZ,aAAAyQ,KAAA+H,IAIA,OAHAl9C,EAAAm1C,IAAA8I,EAAAC,GAAA,GACA79C,EAAA09C,EAAArZ,WAAAyQ,QAAAgI,EAAAgB,GAAA,EACA99C,IAAA+8C,IAAgCe,GAAA,EAAYJ,EAAArZ,WAAAyQ,KAAAgI,KAAAhI,GAC5C4I,EAAApkC,MAAAtI,EAAA,EAAArR,EAAA,GAAA8jC,QAAA,WAIA,KAAAqR,EAAA8I,GAAA,CACA,IAAA59C,EAAA09C,EAAArZ,WAAA1kC,EAAAm1C,QAAAgI,EAAAgB,GAAA,OACA,GAAA99C,IAAA+8C,EAAgCe,GAAA,EAAYJ,EAAArZ,WAAAyQ,KAAAgI,KAAAhI,OAC5C,GAAA90C,IAAAw9C,EAAA,SACA,OAAAE,EAAApkC,MAAAtI,EAAArR,GAIA,OAAAk+C,GAAA,EAAAH,EAAApkC,MAAAtI,EAAA4sC,GAGA,IA7BAF,EAAArZ,WAAAuZ,EAAA,KAAAd,KAAAc,EACAF,EAAArZ,WAAAuZ,EAAA,KAAAb,KAAAa,GA4BAn8C,EAAAs8C,OAAAnB,GAAA,CAEA,IADA,IAAAlwB,KACAjrB,IAAAk7C,GAAAl7C,IAAAm7C,GAAAlwB,EAAAzjB,KAAAxH,KAAAs8C,IACAv4B,GAAA,OAAAkH,EAAAlH,EAAAkH,EAAA9rB,OACA+8C,EAAA10C,KAAAyjB,GAGA,OAAAixB,EAgBA,SAAAK,EAAAtxB,GACA,OAAAA,EAAArU,IAAA4lC,GAAAt/B,KAAA2+B,GAGA,SAAAW,EAAAP,GACA,aAAAA,EAAA,GACAH,EAAAzZ,KAAA4Z,GAAA,QAAAA,EAAAja,QAAA,eACAia,EAGA,OACA5f,MAlFA,SAAA4f,EAAAl4B,GACA,IAAA04B,EAAAjB,EAAAU,EAAAF,EAAAC,EAAA,SAAAhxB,EAAA/sB,GACA,GAAAu+C,EAAA,OAAAA,EAAAxxB,EAAA/sB,EAAA,GACAs9C,EAAAvwB,EAAAwxB,EAAA14B,EA9BA,SAAAy3B,EAAAz3B,GACA,IAAA1kB,EAAAk8C,EAAAC,GACA,gBAAAvwB,EAAA/sB,GACA,OAAA6lB,EAAA1kB,EAAA4rB,GAAA/sB,EAAAs9C,IA2BAkB,CAAAzxB,EAAAlH,GAAAw3B,EAAAtwB,KAGA,OADAixB,EAAAV,cACAU,GA6EAF,YACArmB,OA1BA,SAAAumB,EAAAV,GAEA,OADA,MAAAA,MA9EA,SAAAU,GACA,IAAAS,EAAA/9C,OAAA4sB,OAAA,MACAgwB,KAUA,OARAU,EAAA7tC,QAAA,SAAA4c,GACA,QAAA2xB,KAAA3xB,EACA2xB,KAAAD,GACAnB,EAAAh0C,KAAAm1C,EAAAC,QAKApB,EAkEAqB,CAAAX,KACAV,EAAA5kC,IAAA4lC,GAAAt/B,KAAA2+B,IAAAvuC,OAAA4uC,EAAAtlC,IAAA,SAAAqU,GACA,OAAAuwB,EAAA5kC,IAAA,SAAAgmC,GACA,OAAAJ,EAAAvxB,EAAA2xB,MACO1/B,KAAA2+B,MACF3+B,KAAA,OAqBL4/B,WAlBA,SAAAZ,GACA,OAAAA,EAAAtlC,IAAA2lC,GAAAr/B,KAAA,SCzGA6/B,EAAAnB,EAAA,KAEAoB,EAAAD,EAAA1gB,MCFA4gB,GDGAF,EAAAf,UACAe,EAAApnB,OACAonB,EAAAD,WCLAlB,EAAA,OAEAsB,EAAAD,EAAA5gB,MACA4gB,EAAAjB,UACAiB,EAAAtnB,OACAsnB,EAAAH,WCPA,SAAAK,EAAAC,GACA,IAAAA,EAAAC,GAAA,UAAAxc,MAAAuc,EAAAE,OAAA,IAAAF,EAAAG,YACA,OAAAH,EAAAnB,OAGA,IAAAuB,EAAA,SAAA5X,EAAAyT,GACA,OAAAoE,MAAA7X,EAAAyT,GAAAqE,KAAAP,ICHA,SAAAQ,EAAAthB,GACA,gBAAAuJ,EAAAyT,EAAApuB,GAEA,OADA,IAAAle,UAAAjK,QAAA,mBAAAu2C,IAAApuB,EAAAouB,SAAA73B,GACAg8B,EAAA5X,EAAAyT,GAAAqE,KAAA,SAAAN,GACA,OAAA/gB,EAAA+gB,EAAAnyB,MAaA,IAAA2yB,EAAAD,EAAAX,GACAW,EAAAT,GCnBA,SAAAW,EAAAp7C,GACA,gBAAAmjC,EAAAyT,GACA,OAAAmE,EAAA5X,EAAAyT,GAAAqE,KAAA,SAAAzB,GACA,WAAA6B,WAAAC,gBAAA9B,EAAAx5C,MAKAo7C,EAAA,mBAEAA,EAAA,aAEAA,EAAA,qBCdAG,EAAA,SAAAtd,GAEA,IADA,IAAAvhC,EAAAuhC,EAAA59B,OAAA,IAAAu3B,EAAA,IAAAzT,MAAAznB,GAAAjB,EAAA,EACAA,EAAAiB,GAAAk7B,EAAAn8B,GAAA,IAAAwiC,EAAA7oB,MAAA,EAAA3Z,EAAA,IAAAA,GACA,OAAAm8B,MCDA2jB,EAAA,gECAAA,EAAA,oDCAAA,EAAA,oDCAAA,EAAA,4ECAAA,EAAA,0DCAAA,EAAA,oDCAAA,EAAA,0DCAAA,EAAA,oDCAAA,EAAA,kFCAAC,EAAA,SAAAC,GACA,OAAAt/C,OAAAinC,EAAA,EAAAjnC,CAAAs/C,IAAAp7C,OAAA,KCAAq7C,GCYAF,EAZA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAsJ,IAAAonC,ICEAC,EAZA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAsJ,IAAAonC,IFVA,IAAAp3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAsJ,IAAAonC,OAEAC,EAAAE,GGAAF,EAZA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAsJ,IAAAonC,ICEAC,EAZA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAsJ,IAAAonC,ICEAC,EAZA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAsJ,IAAAonC,ICEAC,EAZA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAsJ,IAAAonC,ICEAC,EAZA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAsJ,IAAAonC,ICEAC,EAZA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAsJ,IAAAonC,ICAAC,EAVA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAsJ,IAAAonC,ICEAC,EAVA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAsJ,IAAAonC,ICEAC,EAVA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAsJ,IAAAonC,ICEAC,EAVA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAsJ,IAAAonC,ICEAC,EAVA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAsJ,IAAAonC,ICEAC,EAVA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAsJ,IAAAonC,ICEAC,EAVA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAsJ,IAAAonC,ICEAC,EAVA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAsJ,IAAAonC,ICEAC,EAVA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAsJ,IAAAonC,ICEAC,EAVA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAsJ,IAAAonC,ICEAC,EAVA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAsJ,IAAAonC,ICEAC,EAVA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAsJ,IAAAonC,ICEAC,EAVA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAsJ,IAAAonC,ICEAC,EAVA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAsJ,IAAAonC,ICEAC,EAVA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAsJ,IAAAonC,ICEAC,EAVA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAsJ,IAAAonC,ICEAC,EAVA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAsJ,IAAAonC,ICEAC,EAVA,IAAAr3B,MAAA,GAAAtZ,OACA,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAsJ,IAAAonC,UCRAp/C,OAAAinC,EAAA,GAAAjnC,OAAAq7B,EAAA,EAAAr7B,CAAA,UAAAA,OAAAq7B,EAAA,EAAAr7B,EAAA,WCAAA,OAAAinC,EAAA,EAAAjnC,QAAAq7B,EAAA,EAAAr7B,EAAA,aAAAA,OAAAq7B,EAAA,EAAAr7B,CAAA,YAEAA,OAAAinC,EAAA,EAAAjnC,QAAAq7B,EAAA,EAAAr7B,CAAA,aAAAA,OAAAq7B,EAAA,EAAAr7B,CAAA,YAEAA,OAAAq7B,EAAA,EAAAr7B,GCLA,SAAAw/C,EAAA/1C,GACA,IAAAlJ,EAAAkJ,EAAAvF,OACA,gBAAA9C,GACA,OAAAqI,EAAAzH,KAAAsU,IAAA,EAAAtU,KAAAuU,IAAAhW,EAAA,EAAAyB,KAAAc,MAAA1B,EAAAb,OAIAi/C,EAAAJ,EAAA,qgDAEAI,EAAAJ,EAAA,qgDAEAI,EAAAJ,EAAA,qgDAEAI,EAAAJ,EAAA,qgDCRA,MAAMK,EAAQlF,OAAOmF,MAsBfC,EAAsB//C,KAEpB+3C,GAAI/3C,EAAE+3C,GACNiI,OAAQhgD,EAAEggD,OACVC,iBAAkBjgD,EAAEigD,gBACpBC,iBAAkBlgD,EAAEkgD,gBACpBC,iBAAkBngD,EAAEmgD,gBACpBC,iBAAkBpgD,EAAEogD,gBACpBC,iBAAkBrgD,EAAEqgD,gBACpBC,iBAAkBtgD,EAAEsgD,gBACpBC,iBAAkBvgD,EAAEugD,gBACpBC,cAAexgD,EAAEigD,iBAAmBjgD,EAAEygD,oBAAoBzgD,EAAEigD,gBAC5DS,cAAe1gD,EAAEkgD,iBAAmBlgD,EAAEigD,kBAAkBjgD,EAAEkgD,gBAC1DS,cAAe3gD,EAAEmgD,iBAAmBngD,EAAEkgD,kBAAkBlgD,EAAEmgD,gBAC1DS,cAAe5gD,EAAEogD,iBAAmBpgD,EAAEmgD,kBAAkBngD,EAAEogD,gBAC1DS,cAAe7gD,EAAEqgD,iBAAmBrgD,EAAEogD,kBAAkBpgD,EAAEqgD,gBAC1DS,cAAe9gD,EAAEsgD,iBAAmBtgD,EAAEqgD,kBAAkBrgD,EAAEsgD,gBAC1DS,cAAe/gD,EAAEugD,iBAAmBvgD,EAAEsgD,kBAAkBtgD,EAAEugD,kBAI5DS,EAA2B5K,iBAAuBA,IAClD6K,EAAgC7K,aAAmBA,IAEnD8K,EAAwB,CAACv2B,EAA6Bw2B,KACxD,MAAMC,KACN,IAAK,IAAIhL,EAAO,KAAMA,GA/CT,KA+C2BA,IAAQ,CAC5C,MAAMiL,EAAaF,EAAS/K,GACtBkL,EAAgBlhD,OAAA8R,EAAA,EAAA9R,CAAOuqB,EAAO3qB,GAAMA,EAAEqhD,IAC5CD,EAAmBp4C,KAAKs4C,EAAc,GAAIA,EAAc,IAE5D,OAAOlhD,OAAA8R,EAAA,EAAA9R,CAAOghD,IAGlBzG,OAAOC,kBAAkB,yBACrB2G,cAAe,kBACfC,QACIpL,MACIqL,QAAS,QAEbC,kBACID,QAAS,IAGjB5G,KAAM,WACFx5C,KAAKsgD,uBAAyBtgD,KAAKy5C,GAAG8G,WAAW,kBACjDvgD,KAAKwgD,OAAQ,EAEb,MAAMC,EAAmB1C,EAAI,gCAAiCW,GAAoBb,KAAMv0B,IACpFtpB,KAAK0gD,eAAiBp3B,EAAKnC,OAAO,CAACw5B,EAAOhiD,KACtCgiD,EAAMhiD,EAAE+3C,IAAM/3C,EACPgiD,OAGX3gD,KAAK4gD,gBAAkBf,EAAsBv2B,EAAMq2B,GAEnD,MAAOkB,EAAaC,GAAejB,EAAsBv2B,EAAMs2B,GACzDh2B,IAAe,IAAO,IAAM,IAAM,IACxC5pB,KAAKm6C,WAAap7C,OAAAgiD,EAAA,eAAAhiD,GAAiCoqB,OAAOS,GAAYphB,MAAM81C,EAAW,IACvF,MAAM0C,GAAiBH,KAAgBj3B,EAAYk3B,GACnD9gD,KAAKy5C,GAAGwH,KAAK,0BAA4B9G,WAAYn6C,KAAKm6C,WAAYvwB,WAAYo3B,IAAiB,IAEnGp4B,IAAYs4B,QAAQt4B,MAAMA,KAExBu4B,EAAuB,IAAIC,QAASC,IACtCrhD,KAAKy5C,GAAGE,iBAAiB,iBAAkB0H,KAI/CD,QAAQE,KAAKH,EAAsBV,IAAmB5C,KAAK,KACvD79C,KAAKwgD,OAAQ,EACbxgD,KAAKuhD,UACL34B,IAAYs4B,QAAQt4B,MAAMA,MAElC44B,OAAQ,SAAUC,GACTzhD,KAAKwgD,QAGNxgD,KAAKspB,KAAK+2B,mBAAqBoB,EAAQpB,kBAAoBrgD,KAAKspB,KAAKyrB,OAAS0M,EAAQ1M,MACtF/0C,KAAKuhD,WAGbA,OAAQ,WACJ,MAAMG,EAAgB/B,EAAwB3/C,KAAKspB,KAAKyrB,MAClD4M,EAAqB/B,EAA6B5/C,KAAKspB,KAAKyrB,MAE5D6M,EAAe7iD,OAAAgiD,EAAA,YAAAhiD,GAAcoqB,OAAOnpB,KAAK4gD,iBAAiBp4C,OAAO,EAAGxI,KAAKspB,KAAK+2B,mBAEpFrgD,KAAKy5C,GAAGwH,KAAK,sBAAwBlM,KAAM/0C,KAAKspB,KAAKyrB,OAAQ,GAK7D,IAAI8M,KACAC,KAFa9hD,KAAKsgD,uBAAuByB,QAAQ/+C,SAG5CwL,QAAS9E,IACd,MAAMs4C,EAAahiD,KAAK0gD,eAAeh3C,EAAQgtC,IAAIgL,GAC7CO,EAAkBjiD,KAAK0gD,eAAeh3C,EAAQgtC,IAAIiL,GAClDznB,EAAQl6B,KAAKm6C,WAAW8H,GACxBC,EAAgBN,EAAaI,GAC7BG,GACFC,OAAQF,EACRG,cAAc,GAGZC,EAAmBtiD,KAAKsgD,uBAAuBiC,SAASC,gBAAgB94C,EAAS1J,KAAKsgD,uBAAuBhjC,YAC7GmlC,EAAeH,EAAiBI,SAAS1iD,KAAKspB,KAAKq5B,OAIzDb,EAAkBA,EAAgBr0C,OAAO60C,EAAiBM,WAAWV,IAKrE,MAAMW,EAA0B,IAAIrE,EAAMsE,gBAAgBL,EAAcN,GACnEN,EAAkB3nB,GAGnB2nB,EAAkB3nB,GAAO9P,MAAMy4B,GAF/BhB,EAAkB3nB,GAAS2oB,IAMnC,IAAK,MAAM3oB,KAAS2nB,EAAmB,CACnC,MAAMkB,EAAkBlB,EAAkB3nB,GAEpC8oB,EAAW,IAAIxE,EAAMyE,mBAAoB/oB,UACzCgpB,EAAe,IAAI1E,EAAM2E,sBAAsBjpB,MAAO,WACtDkpB,EAAc,IAAI5E,EAAM6E,KAAKN,GAAkBC,EAAUE,IAC/DljD,KAAKy5C,GAAG6J,YAAYppB,EAAOkpB,GAG/B,MAAMG,EAAkB,IAAI/E,EAAMgF,eAClCD,EAAgBE,aAAa,WAAY,IAAIjF,EAAMkF,uBAAuB5B,EAAiB,IAC3F,MAAM6B,EAAkB,IAAInF,EAAMoF,mBAAqB1pB,MAAO,WACxD2pB,EAAkB,IAAIrF,EAAMsF,aAAaP,EAAiBI,GAChE3jD,KAAKy5C,GAAG6J,YAAY,QAASO,sDCrKrCviD,EAAAP,KAAAO,IACAC,EAAAR,KAAAQ,KACAC,EAAAT,KAAAS,MAEAC,GADAV,KAAAW,KACAX,KAAAU,KACAE,EAAAZ,KAAAY,IACAE,EAAAd,KAAAc,MACAD,EAAAb,KAAAa,IACAyT,EAAAtU,KAAAsU,IACAC,EAAAvU,KAAAuU,IACAxT,EAAAf,KAAAe,IACAu1B,EAAAt2B,KAAAs2B,MACAp1B,EAAAlB,KAAAkB,MAAA,SAAAvB,GAA4C,OAAAA,EAAA,IAAAA,EAAA,QAC5CqB,EAAAhB,KAAAgB,IACAI,EAAApB,KAAAoB,IAEA4hD,EAAA,KACAC,EAAA,MACAljD,EAAAC,KAAAC,GACAC,EAAAH,EAAA,EACAI,EAAAJ,EAAA,EACAmjD,EAAAljD,KAAAmjD,QACAC,EAAAjiD,EAAA,GACAkiD,EAAAliD,EAAApB,GACAK,EAAA,EAAAL,EACAM,EAAA,IAAAN,EACAO,EAAAP,EAAA,IAMA,SAAAuB,EAAA3B,GACA,OAAAA,EAAA,EAAAO,EAAAP,GAAA,GAAAO,EAAAF,KAAAsB,KAAA3B,GAGA,SAAA0B,EAAA1B,GACA,OAAAA,EAAA,IAAAA,GAAA,EAAAI,EAAAC,KAAAqB,KAAA1B,GAGA,SAAAwB,EAAAxB,GACA,OAAAA,EAAA,EAAAK,KAAAmB,KAAAxB,GAAA,EAQA,SAAA04B,EAAA14B,GACA,OAAAiB,EAAAjB,GAAAiB,GAAAjB,IAAA,EAGA,SAAAy4B,EAAAz4B,GACA,OAAAiB,EAAAjB,GAAAiB,GAAAjB,IAAA,ECnDA,SAAA2jD,EAAAC,GACA,IAAAC,EAAApiD,EAAAmiD,EAAA,GACA7jD,EAAA,EAAAmB,EAAAH,EAAA6iD,EAAA,KAAAC,KAEA,SAAAr4C,EAAAxL,EAAAL,GACA,IAAAmkD,EAAA/iD,EAAAf,GACA+jD,EAAAhjD,EAAApB,GACAqkD,EAAA3iD,EAAA1B,GACAskD,EAAAF,EAAAD,EACA7+C,KAAA,EAAAg/C,EAAA/iD,GAAA,EAAA+iD,GAAA,MAAAA,IAAA,IAAAlkD,GAAA,EAAAkkD,IACA,OAAAh/C,EAAA8+C,EAAA1iD,EAAArB,GAAAiF,EAAA++C,GAoBA,OAjBAx4C,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,IAEA2H,EAFA5I,EAAA8C,EAAAxB,IAAAL,KACAkK,GAAA+5C,EAAA,EACAjmD,EAAA,GACA,IAAAe,EAAA,YACA,GACA,IAAAwlD,EAAAr6C,EAAA,EACAs6C,EAAApjD,EAAAmjD,GACAE,EAAA/iD,EAAA6iD,GACAG,EAAA5iD,EAAAyiD,GACAI,EAAApjD,EAAA,EAAAijD,GACAt6C,GAAAvC,GAAA,EAAA+8C,EAAAC,EAAAvkD,EAAAskD,EAAA3lD,KAAA4lD,GAAAF,KAAA,EAAArkD,GAAA,EAAAokD,YACKvjD,EAAA0G,GAAA+7C,KAAA1lD,EAAA,GACL,IAAA4mD,EAAAljD,EAAAwI,GACA,OAAA/I,EAAAd,EAAAukD,EAAA7lD,EAAAqC,EAAA8I,IAAAlI,EAAAhC,EAAA4kD,EAAA7lD,KAGA8M,EAGA,IAAAg5C,EAAA,WACA,IAAAZ,EAAArjD,EACAxC,EAAAM,OAAAomD,EAAA,qBAAApmD,CAAAslD,GACAzkD,EAAAnB,EAAA6lD,GAMA,OAJA1kD,EAAAwM,OAAA,SAAAe,GACA,OAAAD,UAAAjK,OAAAxE,EAAA6lD,EAAAn3C,EAAA9L,GAAAijD,EAAAljD,GAGAxB,EACAse,MAAA,SACA0D,UAAA,MC5CA,SAAAwjC,EAAA1kD,EAAAL,GACA,IAAAokD,EAAAhjD,EAAApB,GAAAglD,EFwBA,SAAA3kD,GACA,OAAAA,IAAAK,KAAAgB,IAAArB,GAAA,EEzBA4kD,CAAAljD,EAAAqiD,EAAAhjD,EAAAf,GAAA,KACA,SAAA+jD,EAAA1iD,EAAArB,GAAA2kD,EAAAtjD,EAAA1B,GAAAglD,GAKAD,EAAAl6C,OAAA,SAAAxK,EAAAL,GACA,KAAAK,IAAA,EAAAL,IAAAS,IAAAijD,GAAA,CACA,IAAAxwC,EAAA7S,EAAA8S,EAAAnT,EAAAhC,EAAA,GACA,GACA,IAWA6lB,EAXAqhC,EAAAxjD,EAAAwR,GACAiyC,EAAAzjD,EAAAwR,EAAA,GACAkyC,EAAAhkD,EAAA8R,EAAA,GACAmxC,EAAA3iD,EAAAyR,GACAixC,EAAAhjD,EAAA+R,GACAkyC,EAAA3jD,EAAA,EAAAyR,GACAmyC,EAAAjB,IACAkB,EAAAnB,IACAoB,EAAAL,IACA9mD,EAAA,EAAAknD,EAAAH,IACAx3C,EAAAvP,EAAA0D,EAAAqiD,EAAAgB,GAAAvjD,EAAAgiB,EAAA,EAAAxlB,GAAAwlB,EAAA,EAEA4hC,EAAA,EAAA73C,EAAAw2C,EAAAe,EAAA9kD,EACAyjB,EAAAlW,EAAAy2C,EAAArkD,EACA0lD,EAAA7hC,GAAA0hC,EAAAC,EAAA53C,EAAAw2C,EAAAgB,EAAAE,GACAK,EAAA9hC,GAAA,GAAAqhC,EAAAG,EAAA,EAAAz3C,EAAAy2C,EAAAc,GACAS,EAAA,IAAA/hC,GAAAwhC,EAAAF,EAAAv3C,EAAAy2C,EAAAkB,EAAAL,GACAW,EAAAhiC,GAAAyhC,EAAAF,EAAAx3C,EAAA43C,EAAApB,GACAl6C,EAAAy7C,EAAAC,EAAAC,EAAAH,EACA,IAAAx7C,EAAA,MACA,IAAAoJ,GAAAwQ,EAAA6hC,EAAAF,EAAAI,GAAA37C,EACAqJ,GAAAkyC,EAAAG,EAAA9hC,EAAA4hC,GAAAx7C,EACAgJ,GAAAI,EAAAH,GAAAI,SACGtS,EAAAqS,GAAAowC,GAAAziD,EAAAsS,GAAAmwC,MAAA1lD,EAAA,GACH,OAAAkV,EAAAC,KAGA,IAAA2yC,EAAA,WACA,OAAApnD,OAAAomD,EAAA,cAAApmD,CAAAqmD,GACAlnC,MAAA,SCxCA,SAAAkoC,EAAA72C,GACA,IAAAC,EAAAzN,EAAAwN,GACAE,EAAAhO,EAAA8N,GACA82C,EAAA92C,GAAA,OACA+2C,EAAAnkD,EAAAkkD,EAAA92C,GACA5J,GAAA,EAAA6J,EAAAC,GAAA,EAEA,SAAAvD,EAAA9G,EAAAC,GACA,IAAAI,EAAAhE,EAAA4D,GACAkhD,EAAA9kD,EAAA2D,GAAA,GACA,QACA,EAAAK,GAAA1D,EAAAqD,IACAihD,EAAAhhD,GAAA7D,EAAA+kD,EAAAD,GAAA,WAAAD,GAAA1gD,EAAA5D,EAAAsD,GAAAoK,GAAA,EAAAhK,GAAA+J,EAAA+2C,GA4BA,OAxBAr6C,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,IAAA+E,EAAA,EACAC,EAAA,EACAhH,EAAA,GACA,GACA,IAAAkoD,EAAA9kD,EAAA2D,GACAohD,EAAAzkD,EAAAqD,GACAK,EAAAhE,EAAA4D,GACAK,EAAA3D,EAAAsD,GACAoN,EAAA,EAAAhN,EACAqgD,EAAArzC,EAAA+zC,EAAA9lD,EACAyjB,EAAAxe,EAAAD,EAAA+J,EAAAgD,EAAAjD,EAAA+2C,EAAAlmD,EACAomD,EAAAh0C,EAAA8zC,EAAA,EACAG,GAAAF,EAAA9gD,EACAihD,EAAAn3C,EAAAiD,EAAA+zC,EAAA,EACAI,EAAAn3C,EAAAhK,EAAA+J,EAAA+2C,EAAA7gD,EACAmhD,EAAAH,EAAAC,EAAAC,EAAAH,EACAnhD,GAAA6e,EAAAuiC,EAAAZ,EAAAc,GAAAC,EAAA,EACAC,GAAAhB,EAAAa,EAAAxiC,EAAAsiC,GAAAI,EACAzhD,GAAAE,EAAAD,GAAAyhD,SACKxlD,EAAAgE,GAAAy+C,GAAAziD,EAAAwlD,GAAA/C,MAAA1lD,EAAA,GACL,OAAAgoD,EAAAhhD,GAAA7D,EAAAC,EAAA2D,GAAAkhD,GAAA,QAAAlhD,EAAAC,GAAA,MAGA6G,EAGA,IAAA66C,EAAA,WACA,IAAAx3C,EAAA,GAAAlO,EACAglD,EAAA92C,GAAA,OACA+2C,EAAAnkD,EAAAkkD,EAAA92C,GACA9Q,EAAAM,OAAAomD,EAAA,qBAAApmD,CAAAqnD,GACAxmD,EAAAnB,EAAA8Q,GACAy3C,EAAApnD,EAAA8C,OAwBA,OAtBA9C,EAAAqnD,SAAA,SAAA95C,GACA,OAAAD,UAAAjK,QACAqjD,EAAAnkD,GAAAkkD,GAAA92C,EAAApC,EAAA9L,IAAA,QAAAkO,GACA9Q,EAAA8Q,IAFAA,EAAAnO,GAKAxB,EAAA8C,OAAA,SAAAA,GACA,IAAAuJ,EAAArM,EAAAqM,SACAi7C,EAAAF,EAAAtkD,GACAykD,GAAAvnD,EAAAqM,QAAA,MAAA+6C,EAAAtkD,IAUA,OATA9C,EAAAqM,UACAi7C,EAAA/jD,OAAA,WACAgkD,EAAA/iD,eAAA+iD,EAAAjjD,YACA,QAAAkB,GAAA,IAAAihD,EAAqCA,EAAAjhD,EAAA,IAAsBA,GAAA,GAAAihD,EAAAc,EAAA7jD,MAAA8B,EAAA,GAAAihD,GAC3D,KAAAA,GAAAjhD,GAAAmK,KAAA,KACA43C,EAAA7jD,MAAA8B,EAAAihD,GAAA7kD,EAAAC,EAAA2D,EAAA/D,EAAA,GAAAilD,GAAAllD,GAEA+lD,EAAAhjD,UAAAgjD,EAAA9iD,cAEA6iD,GAGAtnD,EACAse,MAAA,SACApR,QAAA,aC3EA,SAAAs6C,EAAAhiD,EAAAC,GACA,IAAAgiD,EAAAllD,EAAAkD,EAAA,GACAM,EAAAzD,EAAA,EAAAmlD,KACA3oD,EAAA,EAAAiH,EAAAlE,EAAA2D,GAAA,GACA1E,EAAAqB,EAAAqD,GAAAO,EAAAjH,EACA2B,EAAAgnD,EAAA3oD,EACA4gB,EAAA5e,IACA6e,EAAAlf,IACA,OACA,IAAAK,GAAA,EAAA4e,EAAA,EAAAC,GACA,IAAAlf,GAAA,IAAAif,EAAAC,IAIA6nC,EAAAl8C,OAAA,SAAAxK,EAAAL,GAEA,GADAA,GAAA,MAAAK,GAAA,MACAY,EAAAjB,GAAA,cACA,IAEAR,EAAA,EAFAa,IACAL,IAEAinD,EAAAplD,GAAArC,EAAAqC,EAAArC,IAAA,EAAAQ,MAAA,GACAknD,EAAAllD,EAAAilD,GAAA,EACA38B,EAAA28B,EJoCA,SAAA5mD,GACA,OAAAkB,EAAAlB,EAAAwB,EAAAxB,IAAA,IIrCA8mD,CAAAlmD,EAAAjB,EAAAinD,IAAA,EJgCA,SAAA5mD,GACA,OAAAkB,EAAAlB,EAAAwB,EAAAxB,IAAA,IIjCA+mD,CAAAnmD,EAAAZ,IAAA,EACAgnD,EAAAjmD,EAAA8lD,GACAI,EAAAxuB,EAAAxO,GACAhsB,EAAAgpD,IAAAD,IACA,OACA,EAAAzlD,EAAAvB,GAAAc,EAAA43B,EAAAzO,GAAA+8B,EAAA,IAAA/oD,GACA,EAAAsD,EAAA5B,GAAAmB,EAAAmmD,EAAA5lD,EAAAwlD,GAAA,IAAA5oD,KAIA,IAAAipD,EAAA,WACA,OAAA7oD,OAAAomD,EAAA,cAAApmD,CAAAqoD,GACAlpC,MAAA,UClCA2pC,EAAA3lD,EAAA,GACA4lD,EAAAlmD,EAAA,EAAAuiD,GAEA,SAAA4D,EAAA3iD,EAAAC,GACA,IAAAkK,EAAAjO,EAAA+D,GACA,OAAAkK,EAAArO,GACAkE,EAAAxD,EAAAO,EAAAjB,EAAAmE,EAAA,MACAD,EAAA3D,EAAA8N,IAAA,EAAA40C,EAAA,EAAApiD,EAAAwN,IAAAtN,EAAAoD,IAAA,EAAA8+C,GAAA50C,EAAArO,GAAAU,EAAAO,EAAAoN,EAAA,MAGAw4C,EAAA78C,OAAA,SAAAxK,EAAAL,GACA,IAAAiT,EAAAhS,EAAAjB,IAAAynD,EAAA,OAAApnD,EAAA,EAAAa,EAAAI,EAAAtB,IAAAY,GACA,IAAA+G,EAAAsL,EAAAjO,EAAAnE,EAAA7C,EAAA,GACA,GACA,IAAA2pD,EAAAvmD,EAAA4D,EAAA,GAAA4iD,EAAA9lD,EAAAkD,EAAA,GACAA,GAAA2C,GAAA6/C,GAAAxiD,EAAAnE,GAAAU,EAAAqmD,GAAA30C,IAAAu0C,EAAAG,KAAA,EAAAC,UACG3mD,EAAA0G,GAAAg8C,KAAA3lD,EAAA,GACH,OAAAqC,GAAAe,EAAA4D,IAAAwiD,EAAA,EAAA9lD,EAAAsD,KAAApD,EAAA5B,GAAAgF,IAGA,IAAA6iD,EAAA,WACA,OAAAnpD,OAAAomD,EAAA,cAAApmD,CAAAgpD,GACA7pC,MAAA,UCtBA,SAAAiqC,EAAAC,GACA,IAAAziD,EAAA,EAAA7E,EAAAsnD,EAEA,SAAAl8C,EAAA9G,EAAAC,GACA,IAAAzF,EAAAb,OAAAomD,EAAA,2BAAApmD,CAAAqG,EAAAC,GACA,GAAA/D,EAAA8D,GAAAnE,EAAA,CACA,IAAAogB,EAAA7f,EAAA5B,EAAA,GAAAA,EAAA,IACAR,EAAA8C,EAAAtC,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAyoD,EAAA1iD,EAAA0xB,GAAAhW,EAAApgB,GAAA0E,GAAA1E,EACAsf,EAAA/e,EAAAO,EAAAsf,GAAAgnC,GAAA,EAAA5mD,EAAA4f,IACAA,EAAAgnC,EAAAhmD,EAAAvB,EAAA1B,EAAA2C,EAAAwe,MACA3gB,EAAA,GAAAR,EAAAqC,EAAA4f,GACAzhB,EAAA,GAAAR,EAAA2C,EAAAsf,GAEA,OAAAzhB,EAiBA,OAdAsM,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,IAAAjB,EAAA8C,EAAAxB,IAAAL,KACA,GAAAjB,EAAA6B,EAAA,CACA,IAAAogB,EAAA7f,EAAAnB,EAAAK,GACA2nD,EAAA1iD,EAAA0xB,GAAAhW,EAAApgB,GAAA0E,GAAA1E,EACApB,EAAAwhB,EAAAgnC,GAAA,IACA51C,EAAArT,EAAAqC,EAAA4mD,EAAAhnC,GACAinC,EAAA,EAAAnmD,EAAAtC,EAAAuC,GAAAqQ,EAAA3R,GAAAoB,EAAApB,KAAA,EAAA2R,GAAArT,OACAiiB,EAAAgnC,EAAA,EAAA9mD,GAAA+mD,EAAAzoD,EAAAqC,EAAAomD,IAAA,OACA5nD,EAAAtB,EAAAqC,EAAA4f,GAAAhhB,EAAAjB,EAAA2C,EAAAsf,GAEA,OAAA8jC,EAAA,2BAAAj6C,OAAAxK,EAAAL,IAGA6L,EAGA,IAAAq8C,EAAA,WACA,IAAAH,EAAA,EACA3pD,EAAAM,OAAAomD,EAAA,qBAAApmD,CAAAopD,GACAvoD,EAAAnB,EAAA2pD,GACA7qC,EAAA3d,EAAA8C,OAEAiP,GAAAlQ,EADA,IACAJ,GACAmnD,EAAAzmD,EAFA,IAEAV,GA4BA,OA1BAzB,EAAAwoD,MAAA,SAAAj7C,GACA,OAAAD,UAAAjK,OAAAxE,EAAA2pD,GAAAj7C,GAAAi7C,GAGAxoD,EAAA8C,OAAA,SAAAA,GACA,IAAAuJ,EAAArM,EAAAqM,SACAi7C,EAAA3pC,EAAA7a,GACAykD,GAAAvnD,EAAAqM,QAAA,MAAAsR,EAAA7a,IAgBA,OAfA9C,EAAAqM,UACAi7C,EAAA/jD,OAAA,WACAgkD,EAAA/iD,eAAA+iD,EAAAjjD,YACA,QAAA7F,EAAA,EAAA2J,EAAA,IAAAogD,EAAAK,EAAA,EAAA3nD,EAAAsnD,EAAA/iD,EAAA,OAAA+iD,EAAA74C,EAAAtO,EAA0G5C,EAAA+pD,IAAW/pD,EAAAgH,GAAA2C,EAAAuH,GAAAk5C,EACrHtB,EAAA7jD,MAAA9B,EAAAgnD,EAAA/mD,EAAA8N,GAAAoC,GAAAvQ,EAAAiB,EAAAmmD,EAAAzmD,EAAAwN,IAAAnO,GACAiE,GAAA,IACA8hD,EAAA7jD,OAAA,QAAA+B,EAlBA,KAmBA8hD,EAAA7jD,OAAA,QAAA+B,EAnBA,OAqBA8hD,EAAA7jD,MAAA,GAAA+B,EArBA,KAsBA8hD,EAAA7jD,MAAA,GAAA+B,EAtBA,MAyBA8hD,EAAAhjD,UAAAgjD,EAAA9iD,cAEA6iD,GAGAtnD,EACAse,MAAA,SACApR,QAAA,YACA8U,UAAA,UCxEA,SAAA8mC,EAAAj2C,EAAA2G,GAEA,GADAlM,UAAAjK,OAAA,IAAAmW,EAAA3G,GACA,IAAA2G,EAAA,OAAA+rC,EAAA,yBACA,GAAA/rC,IAAAvP,IAAA,OAAA8+C,EAEA,SAAAz8C,EAAA9G,EAAAC,GACA,IAAAhC,EAAAtE,OAAAomD,EAAA,yBAAApmD,CAAAqG,EAAAgU,EAAA/T,GAEA,OADAhC,EAAA,IAAAoP,EACApP,EASA,OANA6I,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,IAAAgD,EAAA8hD,EAAA,yBAAAj6C,OAAAxK,EAAA+R,EAAApS,GAEA,OADAgD,EAAA,IAAA+V,EACA/V,GAGA6I,EAGA,SAAAy8C,EAAAvjD,EAAAC,GACA,OACAD,EAAA3D,EAAA4D,GAAA5D,EAAA4D,GAAA,GACA,EAAAtD,EAAAsD,IAIAsjD,EAAAz9C,OAAA,SAAAxK,EAAAL,GACA,IAAAgF,EAAA,EAAAhD,EAAAhC,EAAA,GACA,OACAK,EAAAe,EAAA4D,EAAA,GAAA5D,EAAA4D,GACAA,IAIA,IAAAujD,EAAA,WACA,IAAAxvC,EAAA,EACA3a,EAAAM,OAAAomD,EAAA,qBAAApmD,CAAA2pD,GACA9oD,EAAAnB,EAAA2a,GAOA,OALAxZ,EAAAogC,YAAA,SAAA7yB,GACA,OAAAD,UAAAjK,OACAxE,EAAA2a,GAAAjM,GADAiM,GAIAxZ,EACAse,MAAA,UC3CA,SAAA2qC,IACA,IAAAC,EAAAJ,EAAA,QAGA,gBAAAtjD,EAAAC,GAEA,GAAAD,EAAAC,GAJA,IAIA,CACA,IAAAO,GAAAR,EAAAC,EAAA,MAAAD,EAAAC,EALA,KAKA,EACAD,GAAAQ,EACAP,GAAA,GAAAO,EAAA7D,EAAAsD,EAAAvE,EAAA,GAGA,IAAA1B,EAAA0pD,EAAA1jD,EAAAC,GAEA1G,GAAA,EAAA8C,EAAA2D,EAAAC,IAZA,GAqBA,OAPAjG,EAAA,OACAA,EAAA,MAAAT,GAEAS,EAAA,OACAA,EAAA,MAAAT,EAAA,IAAAS,EAAA,GAAAA,EAAA,IAGAA,GAIA,IAAA2pD,EAAA,WACA,IAAAnpD,EAAAb,OAAAomD,EAAA,cAAApmD,CAAA8pD,KAKA,OAHAjpD,EAAAqM,SAAA,kBACArM,EAAAqM,OAEArM,EACAse,MAAA,QACApR,QAAA,YCtCA,SAAAk8C,EAAAC,EAAA5jD,GACA,IAAA2C,EAAAkhD,EAAAD,EAAAlnD,EAAAsD,GAAAhH,EAAA,GACA,GAAAgH,GAAA2C,GAAA3C,EAAAtD,EAAAsD,GAAA6jD,IAAA,EAAAznD,EAAA4D,UACA/D,EAAA0G,GAAA+7C,KAAA1lD,EAAA,GACA,OAAAgH,EAAA,EAGA,SAAA8jD,GAAAt+C,EAAAC,EAAAm+C,GAEA,SAAA/8C,EAAA9G,EAAAC,GACA,OAAAwF,EAAAzF,EAAA3D,EAAA4D,EAAA2jD,EAAAC,EAAA5jD,IAAAyF,EAAA/I,EAAAsD,IAOA,OAJA6G,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,OAAAA,EAAAgC,EAAAhC,EAAAyK,IAAApK,GAAAmK,EAAApJ,EAAApB,IAAAgC,GAAA,EAAAhC,EAAA0B,EAAA,EAAA1B,IAAA4oD,KAGA/8C,EAGA,IAAAk9C,GAAAD,GAAAhF,EAAAljD,EAAAkjD,EAAArjD,GAEAuoD,GAAA,WACA,OAAAtqD,OAAAomD,EAAA,cAAApmD,CAAAqqD,IACAlrC,MAAA,UCvBAorC,GAAA,QACAC,GAAA,QAEA,SAAAC,GAAApkD,EAAAC,GACA,IAAAgc,EAAA2nC,EAAAloD,EAAAuE,GACA,OAAAikD,GAAAlkD,GAAA,EAAA3D,EAAA4D,GAAAkkD,GAAA9nD,EAAA4f,KAAAhc,EAAA8+C,EAAApiD,EAAAsf,IAAAioC,IAGAE,GAAAt+C,OAAA,SAAAxK,EAAAL,GACA,IAAA2H,EAAA3C,EAAA2f,EAAAskC,GAAAjpD,EAAAghB,EAAAhhB,EAAA,GAAAa,IAAA7C,EAAA,GACA,GACAgH,EAAA2f,EAAAm/B,EAAApiD,EAAAsf,GACAA,GAAArZ,GAAAjG,EAAA,EAAAsf,GAAA,EAAAA,EAAAvgB,EAAAiB,EAAAsD,KAAA,EAAA5D,EAAA,EAAA4f,GAAA,EAAAvgB,EAAAW,EAAA4D,GAAA8+C,EAAA1iD,EAAA4f,UACG/f,EAAA0G,GAAA+7C,KAAA1lD,EAAA,GAEH,OADAgH,EAAA2f,EAAAm/B,EAAApiD,EAAAsf,IACA3gB,GAAA,EAAAe,EAAA4D,GAAAkkD,GAAA9nD,EAAA4f,IAAAioC,GAAAjkD,IAGA,IAAAokD,GAAA,WACA,OAAA1qD,OAAAomD,EAAA,cAAApmD,CAAAyqD,IACAtrC,MAAA,UCrBAwrC,GAAA,SAAAzoC,GACA,IAAA1R,EAAA,EACA9Q,EAAAM,OAAAomD,EAAA,qBAAApmD,CAAAkiB,GACArhB,EAAAnB,EAAA8Q,GAMA,OAJA3P,EAAAqnD,SAAA,SAAA95C,GACA,OAAAD,UAAAjK,OAAAxE,EAAA8Q,EAAApC,EAAA9L,GAAAkO,EAAAnO,GAGAxB,GCTA,SAAA+pD,GAAAvkD,EAAAC,GACA,OAAAD,EAAA3D,EAAA4D,MAGAskD,GAAAz+C,OAAA,SAAAxK,EAAAL,GACA,OAAAK,EAAAe,EAAApB,OAGA,IAAAupD,GAAA,WACA,OAAA7qD,OAAAomD,EAAA,cAAApmD,CAAA4qD,IACAzrC,MAAA,SCTA,SAAA2rC,GAAAt6C,GACA,IAAAA,EAAA,OAAAo6C,GACA,IAAAG,EAAA,EAAA3nD,EAAAoN,GAEA,SAAArD,EAAA9G,EAAAC,GACA,IAAA24B,EAAA8rB,EAAAv6C,EAAAlK,EACA4I,EAAA+vB,EAAA54B,EAAA3D,EAAA4D,GAAA24B,IACA,OAAAA,EAAAj8B,EAAAkM,GAAA67C,EAAA9rB,EAAAv8B,EAAAwM,IASA,OANA/B,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,IAAA29B,EAAA97B,EAAAxB,KAAAL,EAAAypD,EAAAzpD,MACAgF,EAAAykD,EAAAv6C,EAAAyuB,EACA,OAAAA,EAAAv8B,EAAA4D,GAAA7D,EAAAd,EAAAL,GAAAgF,IAGA6G,EAGA,IAAA69C,GAAA,WACA,OAAAL,GAAAG,IACA3rC,MAAA,SACApR,QAAA,YACAm6C,SAAA,KCxBA,SAAA+C,GAAAC,GAEA,SAAA/9C,EAAA9G,EAAAC,GACA,IAAA24B,EAAA/8B,EAAAoE,EACAkiD,EAAAvpB,EAAA54B,EAAA6kD,EAAAloD,EAAAi8B,OACA,OAAAA,EAAAj8B,EAAAwlD,GAAA0C,EAAAhpD,EAAA+8B,EAAAv8B,EAAA8lD,IAWA,OARAr7C,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,IAAAkT,EAAA7S,EAAAupD,EACAz2C,EAAAvS,EAAAZ,EACA29B,EAAA97B,EAAAqR,IAAAC,KACA+zC,EAAA/lD,EAAA+R,EAAAC,GACA,QAAAwqB,IAAAj8B,EAAAi8B,GAAA,GAAAupB,EAAA0C,EAAAhpD,EAAA+8B,IAGA9xB,EAGA,IAAAg+C,GAAA,WACA,IAAAD,EAAA,GACAxrD,EAAAM,OAAAomD,EAAA,qBAAApmD,CAAAirD,IACApqD,EAAAnB,EAAAwrD,GAMA,OAJArqD,EAAAuqD,SAAA,SAAAh9C,GACA,OAAAD,UAAAjK,OAAAxE,EAAAwrD,GAAA98C,GAAA88C,GAGArqD,EACAse,MAAA,UC5BAksC,GAAAjB,GAAA,IAAAroD,KAEAupD,GAAA,WACA,OAAAtrD,OAAAomD,EAAA,cAAApmD,CAAAqrD,IACAlsC,MAAA,SCJA,SAAAosC,GAAAxD,EAAAx0C,EAAAi4C,EAAAh4C,EAAAi4C,EAAAllD,GACA,IAAAlG,EAAAqrD,EAAAhpD,EAAA6D,GACA,GAAAhE,EAAAwlD,GAAA,GAAAxlD,EAAAgE,GAAA,EACAlG,EAAAgD,EAAAmoD,EAAAC,EAAAl4C,EAAAC,EAAAk4C,OACG,CACH,IAAAC,EAAA3oD,EAAA+kD,EAAA,GAAA6D,EAAA5oD,EAAAuD,EAAA,GACAlG,EAAA,EAAAiD,EAAAH,EAAAwoD,IAAAp4C,EAAAC,EAAAo4C,MAEA,OAAArpD,EAAAlC,GAAA2kD,GAAA3kD,EAAAoC,EAAA+Q,EAAAxQ,EAAAuD,GAAAgN,EAAAk4C,EAAAD,EAAAh4C,EAAAk4C,KAAA,KAIA,SAAAG,GAAAnqD,EAAA/B,EAAA8B,GACA,OAAA4B,GAAA3B,IAAA/B,IAAA8B,MAAA,EAAAC,EAAA/B,IAIA,SAAAmsD,GAAAzlD,GACA,OAAAA,EAAA,EAAAtE,EAAAe,GAAAuD,EAAAtE,IAAA,EAAAA,IAGA,SAAAgqD,GAAAp8C,EAAAC,EAAAo8C,GAOA,IANA,IAMAtqD,EANAqN,IACAY,EAAA,GAAAA,EAAA,GAAA3M,EAAA2M,EAAA,IAAAjN,EAAAiN,EAAA,MACAC,EAAA,GAAAA,EAAA,GAAA5M,EAAA4M,EAAA,IAAAlN,EAAAkN,EAAA,MACAo8C,EAAA,GAAAA,EAAA,GAAAhpD,EAAAgpD,EAAA,IAAAtpD,EAAAspD,EAAA,MAGAvqD,EAAAsN,EAAA,GAAAzP,EAAA,EAAmCA,EAAA,IAAOA,EAAAmC,EAAAC,EAC1CA,EAAAqN,EAAAzP,GACAmC,EAAAqF,EAAAykD,GAAA7pD,EAAA,GAAAD,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAC,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAD,EAAA,IACAA,EAAA8C,OAAA,KAGA,IAAA0nD,EAAAJ,GAAA98C,EAAA,GAAAjI,EAAA,GAAAiI,EAAA,GAAAjI,EAAA,GAAAiI,EAAA,GAAAjI,EAAA,IACAolD,EAAAL,GAAA98C,EAAA,GAAAjI,EAAA,GAAAiI,EAAA,GAAAjI,EAAA,GAAAiI,EAAA,GAAAjI,EAAA,IACAqlD,EAAApqD,EAAAkqD,EAEAl9C,EAAA,GAAAxK,MAAA,KACAwK,EAAA,GAAAxK,MAAA,KAAAwK,EAAA,GAAAxK,MAAA,GAAAwK,EAAA,GAAAjI,EAAA,MAEA,IAAAgiB,GACA/Z,EAAA,GAAAxK,MAAA,GAAAwK,EAAA,GAAAxK,MAAA,GAAAwK,EAAA,GAAAjI,EAAA,GAAApE,EAAAupD,GACA,GAAAl9C,EAAA,GAAAxK,MAAA,GAAAwK,EAAA,GAAAxK,MAAA,GAAAwK,EAAA,GAAAjI,EAAA,GAAA9D,EAAAipD,KAyCA,OAtCA,SAAA5lD,EAAAC,GACA,IAEAhH,EAFAqH,EAAA3D,EAAAsD,GACAI,EAAAhE,EAAA4D,GACAQ,EAAA,IAAAkhB,MAAA,GAGA,IAAA1oB,EAAA,EAAeA,EAAA,IAAOA,EAAA,CACtB,IAAAuB,EAAAkO,EAAAzP,GAEA,GADAwH,EAAAxH,GAAAisD,GAAAjlD,EAAAzF,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAA6F,EAAAC,EAAAN,EAAAxF,EAAA,KACAiG,EAAAxH,GAAA,UAAAuB,EAAA0D,MACAuC,EAAAxH,GAAA,GAAAwsD,GAAAhlD,EAAAxH,GAAA,GAAAuB,EAAAiG,EAAA,IAIA,IAAAvC,EAAAukB,EAAA7P,QACA,IAAA3Z,EAAA,EAAeA,EAAA,IAAOA,EAAA,CACtB,IAAAqR,EAAA,GAAArR,EAAA,EAAAA,EAAA,EACAmC,EAAAoqD,GAAA98C,EAAAzP,GAAAwH,EAAA,GAAAA,EAAAxH,GAAA,GAAAwH,EAAA6J,GAAA,IACA7J,EAAAxH,GAAA,OAAAmC,MAEAnC,EAGO,GAAAA,GACPmC,EAAAyqD,EAAAzqD,EACA8C,EAAA,IAAAuC,EAAAxH,GAAA,GAAAoD,EAAAjB,GACA8C,EAAA,IAAAuC,EAAAxH,GAAA,GAAA0D,EAAAvB,KAEAA,EAAA0qD,EAAA1qD,EACA8C,EAAA,IAAAuC,EAAAxH,GAAA,GAAAoD,EAAAjB,GACA8C,EAAA,IAAAuC,EAAAxH,GAAA,GAAA0D,EAAAvB,KATA8C,EAAA,IAAAuC,EAAAxH,GAAA,GAAAoD,EAAAjB,GACA8C,EAAA,IAAAuC,EAAAxH,GAAA,GAAA0D,EAAAvB,IAaA,OADA8C,EAAA,MAAAA,EAAA,MACAA,GAMA,SAAA6nD,GAAAvrD,GACA,OAAAA,EAAA,IAAAyB,EAAAzB,EAAA,IAAAyB,EAAAzB,EAGA,SAAAwrD,KACA,OAAAC,IAAA,0BACAntC,MAAA,KACApR,QAAA,SAGA,SAAAu+C,GAAA38C,EAAAC,EAAAo8C,GACA,IAAArsD,EAAAK,OAAAomD,EAAA,YAAApmD,EAAoB6D,KAAA,aAAAS,aAAAqL,EAAAC,EAAAo8C,KACpBO,IAAA5sD,EAAA,IAAAA,EAAA,IACAU,EAAAL,OAAAomD,EAAA,YAAApmD,CAAAusD,GACA1rD,EAAAb,OAAAomD,EAAA,cAAApmD,CAAA+rD,GAAAK,GAAA/rD,EAAAsP,IAAAy8C,GAAA/rD,EAAAuP,IAAAw8C,GAAA/rD,EAAA2rD,MAAA9+C,OAAAq/C,GACAx+C,EAAAlN,EAAAkN,OAQA,cANAlN,EAAAqM,OAEArM,EAAAkN,OAAA,SAAAK,GACA,OAAAD,UAAAjK,OAAA6J,EAAA1N,EAAA+N,IAAA/N,EAAA8L,OAAA4B,MAGAlN,EACAgiB,UAAA,IChHA,SAAA2pC,GAAAnmD,EAAAC,GACA,IAAAkb,EAAAre,EAAA,EAAAH,EAAAsD,IACA,SAAA++C,EAAAh/C,EAAAmb,EAAA6jC,GAAA,EAAA7jC,IAGAgrC,GAAArgD,OAAA,SAAAxK,EAAAL,GACA,IAAA+E,KAAA/E,EAAA+jD,EAAA,GAAAh/C,EACA,OAAAA,EAAA,EAAA1E,EAAAwB,EAAApB,EAAAsE,GAAA,IAAA/C,EAAA,EAAA+C,KAGA,IAAAomD,GAAA,WACA,OAAAzsD,OAAAomD,EAAA,cAAApmD,CAAAwsD,IACArtC,MAAA,SACApR,QAAA,QCbA,SAAA2+C,GAAAl8C,GACA,IAAA+2C,EAAAnkD,EAAAoN,GAEA,SAAArD,EAAA9G,EAAAC,GACA,OAAAD,OAAArD,EAAAqD,GAAA,IAAArD,EAAAsD,GAAA5D,EAAA2D,GAAAkhD,EAAA7kD,EAAA4D,KAWA,OARA6G,EAAAhB,OAAAo7C,EAAA,SAAA5lD,EAAAL,GACAK,IAAAL,GAAA0B,EAAArB,MACA,IAAA6lD,EAAA9kD,EAAAf,GACA,OAAAA,EAAA,EAAAc,EAAAU,EAAAqkD,IAAAD,IAAAjmD,KAAAkmD,EAAAD,EAAAjmD,KACG,SAAAK,EAAAL,GACH,OAAAK,EAAA2B,EAAA3B,EAAAL,EAAA8B,EAAAzB,KAAAL,KAGA6L,EAGA,IAAAw/C,GAAA,WACA,OAAAhC,GAAA+B,IACAvtC,MAAA,SACA0D,UAAA,KCrBA+pC,GAAAzpD,EAAA,GAEA,SAAA0pD,GAAAxmD,EAAAC,GACA,OAAAsmD,GAAAvmD,GAAA,EAAA3D,EAAA,EAAA4D,EAAA,MAAA++C,EAAAuH,GAAAvH,EAAAriD,EAAAsD,EAAA,IAGAumD,GAAA1gD,OAAA,SAAAxK,EAAAL,GACA,IAAAgF,EAAA,EAAAhD,EAAAhC,GAAAsrD,GAAAvH,IACA,OAAAA,EAAA1jD,GAAAirD,IAAA,EAAAlqD,EAAA,EAAA4D,EAAA,OAAAA,IAGA,IAAAwmD,GAAA,WACA,OAAA9sD,OAAAomD,EAAA,cAAApmD,CAAA6sD,IACA1tC,MAAA,SCbA,SAAAkE,GAAA7S,GACA,IAAAE,EAAAhO,EAAA8N,GAEA,SAAArD,EAAA9G,EAAAC,GACA,OAAAD,EAAAqK,EAAA1N,EAAAsD,GAAAoK,GAOA,OAJAvD,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,OAAAK,EAAA+O,EAAApN,EAAAhC,EAAAoP,KAGAvD,EAGA,IAAA4/C,GAAA,WACA,OAAApC,GAAAtnC,IACA6kC,SAAA,OACA/oC,MAAA,UCjBA,SAAA6tC,GAAAx8C,GACA,IAAAE,EAAAhO,EAAA8N,GAEA,SAAArD,EAAA9G,EAAAC,GACA,OAAAD,EAAAqK,GAAA,EAAAA,GAAAtN,EAAAkD,EAAA,IAOA,OAJA6G,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,OAAAK,EAAA+O,EAAA,EAAAlO,EAAAlB,GAAA,EAAAoP,MAGAvD,EAGA,IAAA8/C,GAAA,WACA,OAAAtC,GAAAqC,IACA7tC,MAAA,SChBA,SAAA+tC,GAAA7mD,EAAAC,GACA,IAAAkb,EAAAre,EAAA,KAAApB,IACA,OACAyf,EAAAnb,GAAA,EAAA9D,EAAA+D,GAAAvE,GACAyf,EAAAlb,GAIA4mD,GAAA/gD,OAAA,SAAAxK,EAAAL,GACA,IAAAkgB,EAAAre,EAAA,KAAApB,IACAuE,EAAAhF,EAAAkgB,EACA,OACA7f,GAAA6f,GAAA,EAAAjf,EAAA+D,GAAAvE,IACAuE,IAIA,IAAA6mD,GAAA,WACA,OAAAntD,OAAAomD,EAAA,cAAApmD,CAAAktD,IACA/tC,MAAA,UCnBA,SAAAiuC,GAAA/mD,EAAAC,GACA,IAAAkb,EAAAre,EAAA,IAAAH,EAAAT,EAAA+D,KACA,OACA,EAAAnD,EAAA,EAAApB,GAAAsE,EAAAmb,EACAte,EAAAoD,GAAAnD,EAAA,EAAApB,EAAA,MAAAyf,IAIA4rC,GAAAjhD,OAAA,SAAAxK,EAAAL,GACA,IAAAkgB,EAAA,EAAAjf,EAAAjB,GAAA6B,EAAA,EAAApB,EAAA,GACA,OACAJ,EAAAwB,EAAA,EAAApB,IAAA,EAAAyf,GACAte,EAAA5B,GAAAgC,GAAA,EAAAke,KAAA,KAIA,IAAA6rC,GAAA,WACA,OAAArtD,OAAAomD,EAAA,cAAApmD,CAAAotD,IACAjuC,MAAA,UClBA,SAAAmuC,GAAAjnD,EAAAC,GACA,IAAAM,EAAAzD,EAAApB,GAAA,EAAAA,IACA,OACA,EAAA6E,EAAAP,GAAA,EAAAlD,EAAA,IAAAmD,KAAAvE,OACA,EAAA6E,EAAAN,GAIAgnD,GAAAnhD,OAAA,SAAAxK,EAAAL,GACA,IAAAsF,EAAAzD,EAAApB,GAAA,EAAAA,IAAA,EACA,OACAJ,EAAAiF,GAAA,EAAAzD,EAAA,EAAA7B,KAAA,EAAAS,IAAA,EAAAA,KACAT,EAAAsF,EAAA,IAIA,IAAA2mD,GAAA,WACA,OAAAvtD,OAAAomD,EAAA,cAAApmD,CAAAstD,IACAnuC,MAAA,UClBA,SAAAquC,GAAAnnD,EAAAC,GACA,IAAAM,GAAA,EAAA1E,GAAAc,EAAAsD,GACAA,GAAA,EACA,QAAAhH,EAAA,EAAA2J,EAAA6B,IAAmCxL,EAAA,IAAAiD,EAAA0G,GAAA+7C,EAAgC1lD,IAAA,CACnE,IAAAoH,EAAAhE,EAAA4D,GACAA,GAAA2C,GAAA3C,EAAAtD,EAAAsD,IAAAI,EAAA,GAAAE,IAAA,EAAAF,GAAA,EAAAA,IAEA,OACA,EAAAvD,EAAApB,GAAA,EAAAA,IAAAsE,GAAA,EAAA3D,EAAA4D,IACA,EAAAnD,EAAApB,GAAA,EAAAA,IAAAiB,EAAAsD,IAIAknD,GAAArhD,OAAA,SAAAxK,EAAAL,GACA,IAAAoS,EAAApS,EAAA6B,GAAA,EAAApB,MAAA,EACA6E,EAAAtD,EAAAoQ,GACA/T,EAAA+C,EAAAkE,GACA,OACAjF,GAAA,EAAAwB,EAAApB,GAAA,EAAAA,KAAA,EAAApC,IACA2D,GAAAsD,EAAA8M,GAAA/T,EAAA,OAAAuC,MAIA,IAAAurD,GAAA,WACA,OAAAztD,OAAAomD,EAAA,cAAApmD,CAAAwtD,IACAruC,MAAA,UCzBA,SAAAuuC,GAAArnD,EAAAC,GACA,OACAD,GAAA,EAAA3D,EAAA4D,IAAAnD,EAAA,EAAApB,GACA,EAAAuE,EAAAnD,EAAA,EAAApB,IAIA2rD,GAAAvhD,OAAA,SAAAxK,EAAAL,GACA,IAAAsF,EAAAzD,EAAA,EAAApB,GACAuE,EAAAhF,EAAAsF,EAAA,EACA,OACAA,EAAAjF,GAAA,EAAAe,EAAA4D,IACAA,IAIA,IAAAqnD,GAAA,WACA,OAAA3tD,OAAAomD,EAAA,cAAApmD,CAAA0tD,IACAvuC,MAAA,UClBA,SAAAyuC,GAAAvnD,EAAAC,GAEA,IADA,IAAAM,GAAA,EAAA1E,GAAAc,EAAAsD,GACAhH,EAAA,EAAA2J,EAAA6B,IAAmCxL,EAAA,IAAAiD,EAAA0G,GAAA+7C,EAAgC1lD,IACnEgH,GAAA2C,GAAA3C,EAAAtD,EAAAsD,GAAAM,IAAA,EAAAlE,EAAA4D,IAGA,OADAM,EAAAzD,EAAA,EAAApB,IAEAsE,GAAA,EAAA3D,EAAA4D,IAAAM,EACA,EAAAN,EAAAM,GAIAgnD,GAAAzhD,OAAA,SAAAxK,EAAAL,GACA,IAAAqP,EAAA,EAAAzO,EACA0E,EAAAzD,EAAAwN,EAAA,GACA,OACA,EAAAhP,EAAAiF,GAAA,EAAAlE,EAAApB,GAAAsF,IACAtD,GAAAhC,EAAA0B,EAAA1B,IAAAqP,KAIA,IAAAk9C,GAAA,WACA,OAAA7tD,OAAAomD,EAAA,cAAApmD,CAAA4tD,IACAzuC,MAAA,UCtBA2uC,GAAA,IAAA1I,EAEA,SAAA2I,GAAA1nD,EAAAC,GACA,IAAA0nD,EAAAhrD,EAAAqD,GAAA,GACA4N,EAAAvR,EAAA2D,GACAO,EAAAzD,EAAAT,EAAA4D,IACAiN,EAAA7Q,EAAA4D,GAAA,GACAlF,EAAA4B,EAAAsD,IAAAiN,EAAA6xC,EAAAnxC,EAAArN,GACAjH,EAAAwD,EAAA,KAAA/B,MACA0F,EAAA3D,GAAAiiD,EAAA7xC,GAAAU,EAAA+5C,GAAApnD,IAAAw+C,EAAA7xC,GAAAU,EAAA+5C,GAAApnD,IACA,OACAknD,IAAAnuD,GAAAmH,EAAA,EAAAA,GAAA,EAAAjE,EAAAiE,IACAgnD,IAAAnuD,EAAAyB,GAAA0F,EAAA,EAAAA,GAAA,EAAAtE,EAAApB,KAIA2sD,GAAA5hD,OAAA,SAAAxK,EAAAL,GACA,KAAAT,EAAAwnD,EAAAl8C,OAAAxK,EAAA,UAAAL,IAAA,YACA,IAAAT,EAAAwF,EAAAxF,EAAA,GAAAyF,EAAAzF,EAAA,GAAAvB,EAAA,GACAqC,GAAAmsD,GAAAxsD,GAAAwsD,GACA,GACA,IAAAG,EAAA5nD,EAAA,EACA6nD,EAAA5nD,EAAA,EACA0nD,EAAAhrD,EAAAirD,GACAh6C,EAAAvR,EAAAurD,GACAzC,EAAAxoD,EAAAkrD,GACA36C,EAAA7Q,EAAAwrD,GACAC,EAAAzrD,EAAA4D,GACAM,EAAAzD,EAAAgrD,GACA/sD,EAAAoqD,GAAAj4C,EAAA6xC,EAAAnxC,EAAArN,GACAgN,EAAAxS,IACAzB,EAAAwD,EAAA,KAAAyQ,IAGA4mB,GAFA4qB,EAAA7xC,GAAAU,EAAA+5C,GAAApnD,IACAw+C,EAAA7xC,GAAAU,EAAA+5C,GAAApnD,GAEAE,EAAA3D,EAAAq3B,GACA4zB,EAAAtnD,EAAA,EAAAA,EACAunD,EAAAvnD,EAAA,EAAAA,EACAigD,EAAApnD,EAAAyuD,EAAA,EAAAvrD,EAAAiE,GAAAnF,EACAyjB,EAAAzlB,EAAAyB,EAAAitD,EAAA,EAAA7rD,EAAApB,GAAAE,EACAgtD,EAAA9C,GAAAtG,EAAAt+C,EAAAonD,EAAAp6C,EAAA43C,EACA+C,GAAAnJ,EAAAnxC,EAAAV,EAAA3M,IAAA,GAAA2M,EAAA6xC,EAAAnxC,EAAArN,IAAA2M,EAAA6xC,EAAAnxC,EAAArN,MACA4nD,GAAA,GAAAptD,EAAAzB,MACA8uD,EAAAD,EAAAF,EACAI,EAAAF,EAAAD,EACA76C,KAAA,EAAAH,EAAA6xC,EAAAx+C,GAAAqN,EAAA+5C,IAAAt6C,EAAA5M,EACA6nD,GAAAvJ,EAAAnxC,EAAAV,EAAA3M,EAAAunD,GAAAz6C,EACAk7C,GAAAxJ,EAAA4I,EAAAxC,GAAA5kD,EAAA8M,GACAm7C,EAAAT,EAAAK,EAAA,EAAAE,EAAA7nD,EAAAnH,GAAAgvD,IAAAn0B,GACAs0B,EAAAV,EAAAM,EAAA,EAAAE,EAAA9nD,EAAAnH,GAAAivD,IAAAp0B,GACAu0B,EAAA3tD,EAAAitD,EAAAI,EAAA,EAAAH,GAAA,EAAA16C,GAAAjU,EAAA0uD,EAAAC,EAAA3uD,EAAAyB,GAAAutD,IAAAn0B,GACAw0B,EAAA5tD,EAAAitD,EAAAK,EAAA,EAAAH,GAAA,EAAA36C,GAAAjU,EAAA0uD,EAAAE,EAAA5uD,EAAAyB,GAAAwtD,IAAAp0B,GACAstB,EAAAgH,EAAAC,EAAAC,EAAAH,EACA,IAAA/G,EAAA,MACA,IAAAx7C,GAAA8Y,EAAA0pC,EAAA/H,EAAAiI,GAAAlH,EACAv7C,GAAAw6C,EAAAgI,EAAA3pC,EAAAypC,GAAA/G,EACAzhD,GAAAiG,EACAhG,EAAAgQ,GAAApU,EAAAqU,EAAArU,EAAAoE,EAAAiG,WACGhK,EAAA+J,GAAA04C,GAAAziD,EAAAgK,GAAAy4C,MAAA1lD,EAAA,GACH,OAAAiD,IAAA+D,GAAApE,GAAA8iD,GAAA,EAAA1+C,GAAAhH,IAAA+G,EAAAC,IAGA,IAAA2oD,GAAA,WACA,OAAAjvD,OAAAomD,EAAA,cAAApmD,CAAA+tD,IACA5uC,MAAA,UCjEA+vC,GAAAxsD,EAAA,GAAAJ,GAEA,SAAA6sD,GAAA9oD,EAAAC,GACA,IAAAlF,EAAAgC,EAAAkD,EAAA,GACA,OAAAD,EAAA6oD,GAAA/rD,EAAA,EAAA/B,MAAA,EAAA8tD,IAAA9tD,GAGA+tD,GAAAhjD,OAAA,SAAAxK,EAAAL,GACA,IAAAF,EAAAE,GAAA,EAAA4tD,IACA,OAAAvtD,MAAAutD,GAAA/rD,EAAA,EAAA/B,MAAA,EAAAoB,EAAApB,KAGA,IAAAguD,GAAA,WACA,OAAApvD,OAAAomD,EAAA,cAAApmD,CAAAmvD,IACAhwC,MAAA,UCdA,SAAAkwC,GAAAhpD,EAAAC,GACA,IAAAM,EAAAN,EAAA,EAAAgpD,EAAA5sD,EAAAkE,GACA,SAAAP,EAAAg/C,EAAA3iD,EAAA4D,GAAAgpD,IAAAjK,EAAAjiD,EAAAwD,IAGAyoD,GAAAljD,OAAA,SAAAxK,EAAAL,GACA,IAAAsF,EAAApE,EAAAlB,EAAA+jD,GAAAiK,EAAA5sD,EAAAkE,GAAAN,EAAA,EAAAM,EACA,OAAAjF,EAAA0jD,EAAA,GAAA3iD,EAAA4D,GAAAgpD,KAAAhpD,IAGA,IAAAipD,GAAA,WACA,OAAAvvD,OAAAomD,EAAA,cAAApmD,CAAAqvD,IACAlwC,MAAA,UCZA,SAAAqwC,GAAAjrD,GACA,OAAAA,EAAA,KAAAjB,EAAAF,EAAAmB,EAAA,KAAAjC,IAAAD,GAGA,SAAAotD,GAAAlrD,GACA,SAAAA,EAAA,KAAA/B,EAAAQ,EAAAuB,EAAA,GAAAjC,IAAAD,GAGA,IAAAqtD,GAAA,SAAAC,GACA,MAAAA,MAAAvJ,EAAA,iBACA,IAAA7nC,EAAAoxC,IACApqC,EAAAvlB,OAAAomD,EAAA,mBAAApmD,GAAAmf,MAAA9c,GAAA2L,UAAA,GAAA6U,UAAA,MAAAzD,WAAA,MAEA,SAAAwwC,EAAArrD,GACA,OAAAga,EAAAixC,GAAAjrD,IAmBA,SAAA7D,EAAAb,GACA+vD,EAAA/vD,GAAA,SAAAuO,GACA,OAAAD,UAAAjK,QAAAqa,EAAA1e,GAAAuO,GAAAwhD,GAAArxC,EAAA1e,MAmBA,OArCA0e,EAAApS,SAAAyjD,EAAAzjD,OAAA,SAAA5H,GACA,OAAAkrD,GAAAlxC,EAAApS,OAAA5H,MAGAqrD,EAAAjsD,OAAA,SAAAA,GACA,IAAA6nD,EAAAjtC,EAAA5a,UAAAqqD,EAAAzoC,EAAA5hB,QACAY,MAAA,SAAA8B,EAAAC,GAAoCklD,EAAAjnD,MAAA8B,EAAA,EAAA/C,EAAAF,GAAAkD,EAAA,EAAAhE,IAAAD,IACpC8C,UAAA,WAA6BqmD,EAAArmD,aAC7BC,QAAA,WAA2BomD,EAAApmD,WAC3BC,aAAA,WAAgCmmD,EAAAnmD,gBAChCC,WAAA,WAA8BkmD,EAAAlmD,gBAG9B,OADA0oD,EAAA5pD,OAAAonD,EAAApnD,OACA4pD,GASA4B,EAAA1iD,OAAA,SAAAkB,GACA,OAAAD,UAAAjK,QAAAqhB,EAAArY,OAAAkB,GAAAwhD,GAAArqC,EAAArY,UAGA0iD,EAAA7hD,OAAA,SAAAK,GACA,OAAAD,UAAAjK,QAAAqa,EAAAxQ,OAAAyhD,GAAAphD,IAAAwhD,GAAAH,GAAAlxC,EAAAxQ,WAGArN,EAAA,SACAA,EAAA,aACAA,EAAA,cACAA,EAAA,SACAA,EAAA,aACAA,EAAA,aAEAkvD,EACAzwC,MAAA,QCvDA,SAAA0wC,GAAA5wB,EAAA1+B,GACA,IAAAqG,EAAA,EAAA7E,EAAAxB,EACAuvD,EAAA7wB,IAEA,SAAA9xB,EAAA9G,EAAAC,GACA,IAAAzF,EAAAb,OAAAomD,EAAA,2BAAApmD,CAAAqG,EAAAC,GACA3E,EAAAd,EAAA,GACAS,EAAAT,EAAA,GACAkvD,EAAApuD,IAAAL,IAEA,GAAAyuD,EAAAD,EAAA,CACA,IAAAzvD,EAAA8C,EAAA4sD,GACAztC,EAAA7f,EAAAnB,EAAAK,GACA2nD,EAAA1iD,EAAA0xB,EAAAhW,EAAA1b,GACA4a,EAAAc,EAAAgnC,EACA0G,EAAA/wB,EAAAv8B,EAAA8e,GACAyuC,GAAAhxB,EAAAj8B,EAAAwe,KAAAxe,EAAAgtD,KAAA9tD,EAAA8tD,GACAE,EAAAC,GAAA3uC,EAAAyuC,GACA/gD,GAAAnN,EAAAk9B,GAAAmxB,GAAAF,EAAAF,EAAAjuD,GAEAJ,EAAAtB,EACA,IAAA4I,EAAA3J,EAAA,GACA,GACAqC,GAAAsH,GAAAg2B,EAAAmxB,GAAAF,EAAAF,EAAAruD,GAAAuN,EAAA7O,IAAA6vD,EAAAvuD,GAAAuN,SACO3M,EAAA0G,GAAA+7C,KAAA1lD,EAAA,GAEPgC,EAAAkgB,EAAAxe,EAAArB,GACAA,EAAAO,IAAAZ,GAAA2uD,GAAAtuD,EAAAO,IAEA,IAAApB,EAAAkC,EAAAsmD,GACA3pD,EAAA+C,EAAA4mD,GACAzoD,EAAA,GAAAc,EAAAhC,EAAA2B,EAAAR,EACAD,EAAA,GAAAc,EAAAb,EAAAQ,EAAA3B,EAEA,OAAAkB,EA4CA,OAzCAsM,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,IAAAyuD,EAAApuD,IAAAL,IACA,GAAAyuD,EAAAD,EAAA,CACA,IAAAzvD,EAAA8C,EAAA4sD,GACAztC,EAAA7f,EAAAnB,EAAAK,GACA2nD,EAAA1iD,EAAA0xB,EAAAhW,EAAA1b,GACAypD,EAAA/tC,EAAAgnC,EAEA3nD,EAAAtB,EAAAqC,EAAA2tD,GACA/uD,EAAAjB,EAAA2C,EAAAqtD,GAQA,IANA,IAAAC,EAAA3uD,EAAAO,EACAskD,EAAAxjD,EAAArB,GACA6f,EAAAlgB,EAAAklD,EACAv9C,EAAAtH,EAAAO,EAAA4I,IAAA,EACAxL,EAAA,KAEA,CACA,IAAAixD,EAAAtxB,EAAAj8B,EAAAwe,GACAwuC,EAAA/wB,EAAAv8B,EAAA8e,GACAgvC,EAAAxtD,EAAAgtD,GACAS,EAAAvuD,EAAA8tD,EACAC,GAAAM,EAAA/uC,EAAAgvC,GAAAC,EACAP,EAAAC,GAAA3uC,EAAAyuC,GAEA,GAAA1tD,EAAA0G,GAAAg8C,MAAA3lD,EAAA,MAEAkiB,GAAAvY,GAAAuY,EAAAglC,EAAAyJ,EAAAK,EAAAhvD,IACAklD,EAAA,EAAA8J,GACAG,GAAAT,EAAAxuC,EAAA+uC,EAAA7tD,EAAAstD,GAAAQ,GACAD,KAAA/uC,EAAAgvC,KACAC,MAIA9uD,GAFAtB,EAAA4+B,EAAAmxB,GAAAF,EAAAF,EAAAruD,IAAAI,EAAAk9B,GAAAmxB,GAAAF,EAAAF,EAAAjuD,IAEAW,EADA4f,EAAAgnC,EAAA9nC,GAEAlgB,EAAAjB,EAAA2C,EAAAsf,GAEA,OAAA8jC,EAAA,2BAAAj6C,OAAAxK,EAAAL,IAGA6L,EAGA,SAAAgjD,GAAA3uC,EAAA5a,GACA,gBAAAjF,GACA,IAAA+T,EAAA8L,EAAA9e,EAAAf,GAEA,OADAA,EAAAO,IAAAwT,GAAA9O,GACAzD,EAAA,EAAAuS,MAKA,SAAA06C,GAAAjrC,EAAA1jB,EAAAC,GAIA,IAHA,IACA4d,GAAA5d,EAAAD,GADA,GAEAX,EAAAqkB,EAAA1jB,GAAA0jB,EAAAzjB,GACApC,EAAA,EAAAqC,EAAAF,EAAwBnC,EAHxB,KAG+BA,EAAAwB,GAAA,EAAAqkB,EAAAxjB,GAAA2d,GAC/B,SAAAxe,EAAAwe,EAGA,IAAAoxC,GAAA,WACA,IAAAnwD,EAAA,EACA0+B,EAAA,GAAA38B,EACAquD,EAAAjuD,EAAAu8B,GACA2xB,EAAA5tD,EAAAi8B,GACAv/B,EAAAM,OAAAomD,EAAA,qBAAApmD,CAAA6vD,IACAhvD,EAAAnB,EAAAu/B,EAAA1+B,GACA0nD,EAAApnD,EAAA8C,OAEAiP,GAAAlQ,EADA,IACAJ,GACAmnD,EAAAzmD,EAFA,IAEAV,GA8BA,OA5BAzB,EAAAwM,OAAA,SAAAe,GACA,OAAAD,UAAAjK,QACAysD,EAAAjuD,EAAAu8B,EAAA7wB,EAAA9L,GACAsuD,EAAA5tD,EAAAi8B,GACAv/B,EAAAu/B,EAAA1+B,IAHA0+B,EAAA58B,GAMAxB,EAAAwoD,MAAA,SAAAj7C,GACA,OAAAD,UAAAjK,OACAxE,EAAAu/B,EAAA1+B,GAAA6N,GADA7N,GAIAM,EAAA8C,OAAA,SAAAA,GACA,IAAAuJ,EAAArM,EAAAqM,SACAi7C,EAAAF,EAAAtkD,GACAykD,GAAAvnD,EAAAqM,QAAA,MAAA+6C,EAAAtkD,IAUA,OATA9C,EAAAqM,UACAi7C,EAAA/jD,OAAA,WACAgkD,EAAA/iD,eAAA+iD,EAAAjjD,YACA,QAAA7F,EAAA,EAAA2J,EAAA,EAAAlH,EAAAxB,EAAA+F,EAAA,EAAkDhH,EAAAiB,IAAOjB,EAAAgH,GAAA2C,EACzDm/C,EAAA7jD,MAAA9B,EAAAgnD,EAAA/mD,EAAA4D,GAAAsM,GAAAvQ,EAAAiB,EAAAmmD,EAAAzmD,EAAAsD,IAAAjE,GACA+lD,EAAA7jD,MAAA9B,EAAAmuD,EAAAluD,EAAA4D,EAAA2C,EAAA,GAAA0nD,GAAAtuD,EAAAiB,EAAAstD,EAAA5tD,EAAAsD,EAAA2C,EAAA,IAAA5G,GAEA+lD,EAAAhjD,UAAAgjD,EAAA9iD,cAEA6iD,GAGAtnD,EACAqM,QAAA,SACAiS,MAAA,SACA0D,UAAA,UC9IAguC,GAAA,SAAApvD,EAAAC,EAAA/B,EAAAC,EAAAsP,EAAAiW,EAAAM,EAAAnG,GAGA,SAAAnS,EAAA9G,EAAAC,GACA,IAAAA,EAAA,OAAA7E,EAAA4E,EAAAtE,EAAA,GACA,IAAAse,EAAA/Z,IACAwqD,EAAArvD,EAAA4e,GAAA3e,EAAA2e,GAAA1gB,EAAA0gB,EAAAzgB,IACAmxD,EAAAzqD,GAAA4I,EAAA,EAAAmR,GAAA8E,EAAA7F,EAAAe,EAAAoF,IACA/lB,GAAAoxD,IAAAC,MAAA,EAAAA,GACAvvC,EAAAnb,EAAA/C,EAAAwtD,EAAApxD,GAAAqC,EACA,OAAArC,EAAAsD,EAAAwe,GAAAlb,GAAA,EAAA+Z,EAAAf,GAAA5f,GAAA,EAAAgD,EAAA8e,KA0CA,OAnDArT,UAAAjK,OAAA,IAAAob,EAAA,GAYAnS,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,IAEAgL,EAAAC,EAFAlG,EAAAtE,EAAAJ,EAAAF,EACA6E,EAAAhF,EACAhC,EAAA,GACA,GACA,IAAA+gB,EAAA/Z,IACAwqD,EAAArvD,EAAA4e,GAAA3e,EAAA2e,GAAA1gB,EAAA0gB,EAAAzgB,IACAmxD,EAAAzqD,GAAA4I,EAAA,EAAAmR,GAAA8E,EAAA7F,EAAAe,EAAAoF,IACA5kB,EAAAiwD,IAAAC,IACAl9C,EAAA,EAAAk9C,EACArxD,EAAAmB,EAAAgT,EACAokB,EAAAv4B,IACAsxD,EAAA1tD,EAAAwtD,EAAApxD,GAAAqC,EACAyf,EAAAnb,EAAA2qD,EACAC,EAAAH,IACAI,GAAA,EAAAxvD,EAAA2e,GAAA,EAAA1gB,EAAA,EAAA0gB,EAAAzgB,IAAA0G,EACA6qD,EAAAjiD,EAAAmR,GAAA,EAAA8E,EAAA,EAAA9E,EAAAoF,GAGA2rC,GAFA,GAAAN,EAAAI,EAAAH,GAAAI,EAAA,IAEAt9C,EAAAhT,GADA,GAAAswD,EAAA,MACAt9C,KACA4N,EAAA/e,EAAA8e,GACAE,EAAA1e,EAAAwe,GACA6vC,EAAA3xD,EAAA+hB,EACA6vC,EAAA5xD,EAAAgiB,EACA6vC,EAAAlrD,EAAAtE,GAAA,EAAAoB,EAAA,EAAA8tD,EAAAh5B,KAAAi5B,EAAAxxD,EAAAoxD,EAAAM,GAAAn5B,EACA8uB,EAAAuK,EAAA3vD,EACAyjB,EAAA9e,GAAA,EAAA+Z,EAAAf,GAAA5f,EAAA2xD,EAAA/vD,EACAwtD,EAAAsC,EAAA1vC,EAAA2vC,EAAAE,EACA1C,EAAAwC,EAAAL,EACAhC,EAAA,EAAAoC,KAAA3vC,EAAA6vC,EAAAC,GACAxC,EAAAuC,EAAAN,EACAlJ,EAAAgH,EAAAC,EAAAC,EAAAH,EACA,IAAA/G,EAAA,MACAzhD,GAAAiG,GAAA8Y,EAAA0pC,EAAA/H,EAAAiI,GAAAlH,EACAxhD,GAAAiG,GAAAw6C,EAAAgI,EAAA3pC,EAAAypC,GAAA/G,SACKvlD,EAAA+J,GAAA04C,GAAAziD,EAAAgK,GAAAy4C,MAAA1lD,EAAA,GACL,OAAA+G,EAAAC,IAGA6G,GCnDAqkD,GAAAX,GAAA,uDAEAY,GAAA,WACA,OAAAzxD,OAAAomD,EAAA,cAAApmD,CAAAwxD,IACAryC,MAAA,UCJAuyC,GAAAb,GAAA,8DAEAc,GAAA,WACA,OAAA3xD,OAAAomD,EAAA,cAAApmD,CAAA0xD,IACAvyC,MAAA,SCHAyyC,GAAAf,GAAA,IAAA9uD,GAAA,uCAEA8vD,GAAA,WACA,OAAA7xD,OAAAomD,EAAA,cAAApmD,CAAA4xD,IACAzyC,MAAA,UCLA,SAAA2yC,GAAAzrD,EAAAC,GACA,IAAAga,EAAAja,IACAga,EAAA/Z,IACA,OACAD,GAAA,UAAAga,IAAA,cAAAC,KACAha,GAAA,EAAA+Z,EAAA,KAIAyxC,GAAA3lD,OAAA,SAAAxK,EAAAL,GACA,IAEA2H,EAFA5C,EAAA1E,EACA2E,EAAAhF,EACAhC,EAAA,GACA,GACA,IAAA+gB,EAAA/Z,IACAA,GAAA2C,GAAA3C,GAAA,EAAA+Z,EAAA,IAAA/e,IAAA,EAAA+e,EAAA,SACG9d,EAAA0G,GAAA+7C,KAAA1lD,EAAA,GACHA,EAAA,GACAqC,GAAA,UAAA0e,EACA,GACA,IAAA0xC,KAAA1rD,KAAA0rD,EACA1rD,GAAA4C,GAAA5C,GAAA,cAAA0rD,GAAApwD,IAAA,cAAAowD,SACGxvD,EAAA0G,GAAA+7C,KAAA1lD,EAAA,GACH,OAAA+G,EAAAC,IAGA,IAAA0rD,GAAA,WACA,OAAAhyD,OAAAomD,EAAA,cAAApmD,CAAA8xD,IACA3yC,MAAA,UC5BA8yC,GAAApB,GAAA,wDAEAqB,GAAA,WACA,OAAAlyD,OAAAomD,EAAA,cAAApmD,CAAAiyD,IACA9yC,MAAA,UCLAgzC,GAAA,SAAAnyC,GACA,IAAApL,EAAAoL,EAAA9d,EAAA,MAAA8d,GAAA9d,EAAA,MAEA,SAAAkwD,EAAA/rD,EAAAC,GACA,IAAAxF,EAAAuF,EAAA,SACA9B,EAAAyb,EAAA3Z,EAAAvF,EAAAiB,EAAAuE,GAEA,OADA/B,EAAA,IAAAzD,EAAA8T,EACArQ,EAaA,OAVAyb,EAAA7T,SAAAimD,EAAAjmD,OAAA,SAAAxK,EAAAL,GACA,IAAAR,EAAAa,EAAA,SACA0wD,EAAAryC,EAAA7T,OAAAxK,EAAAb,EAAA8T,EAAAtT,GACA+E,EAAAgsD,EAAA,GAAAvxD,EAAAiB,EAIA,OAHAsE,GAAAtE,EAAAsE,GAAA,EAAAtE,EACAsE,EAAAtE,IAAAsE,GAAA,EAAAtE,GACAswD,EAAA,GAAAhsD,EACAgsD,IAGAD,GClBA,SAAAE,GAAAjsD,EAAAC,GACA,IAAAisD,EAAArvD,EAAAmD,GACAmsD,EAAAtvD,EAAAoD,GACAI,EAAAhE,EAAA4D,GACA3E,EAAAe,EAAA2D,GAAAK,EACApF,EAAA0B,EAAAqD,GAAAK,EACA8E,EAAAxI,EAAAwvD,EAAAlsD,GACAD,EAAA9D,EAAAE,EAAAnB,EAAAkK,IACAlF,EAAAhD,EAAA3B,GACAY,EAAA8D,EAAAnE,GAAA8iD,IAAA3+C,GAAAnE,GACA,IAAAqC,EAqBA,SAAA8B,EAAAC,GACA,GAAAA,IAAApE,EAAA,YAEA,IAaAP,EACArC,EAdAqH,EAAA3D,EAAAsD,GACAjG,EAAAsG,IACAopD,EAAA1vD,IACAsQ,EAAA,EAAAo/C,EACAnpD,EAAA,IAAAmpD,EACAl8C,EAAA,EAAAk8C,EACAvkD,EAAAlI,EAAA,EAAAH,EAAAwN,IACA7J,EAAA+M,EAAAxT,EAAAsQ,EAAAnF,EACAwgD,GAAA,EAAArlD,GAAAG,EACAjG,EAAAsC,EAAA6oD,GACAyG,EAAAzG,EAAAr7C,EACAlP,EAAA0B,EAAAsvD,GACAnzC,EAAAze,EAAAgT,EAIA,OAAAxN,EAAA,WAAAiZ,EAAAjf,EAAAoB,IAEA,IAYAwH,EAZAvC,EAAAhE,EAAA4D,GACAosD,EAAA,EAAAhsD,EACAisD,EAAA,EAAAhsD,EAAAD,EAEAksD,IAAA9rD,EAAAJ,IADA,EAAArG,EAAAmL,EAAA5E,GAAA+rD,GACA,EAAAhsD,KAAAG,KAIA+rD,GAAAH,EAAAC,EACAG,GAAAJ,GAFAryD,EAAAsQ,EAAAiiD,EAAA5G,EAAAplD,EAAA+rD,GAGAI,GAAA,EAAAL,GAJA7+C,GADA,GAAA++C,EAAA/xD,GACA,EAAAR,EAAAQ,EAAA8xD,GAKArpD,EAAA,EAAAjD,EAAAtE,EAIA,GAAAsE,EAAA,KAAAtE,GAAAuE,EAAAvE,EAAA,GAAAsE,EAAA,KAAAtE,EAAA,CAEA,GADAJ,GAAA2d,EAAAjf,EAAA8C,EAAAsvD,GAAA,EAAA1C,GAAAzwC,OAAA,EAAAywC,GACA1pD,EAAAtE,EAAA,SAAAJ,KACA,IAAA6S,EAAA7S,EAAA2S,EAAA,GAAA3S,EACAA,EAAA,IAAA2S,EAAAE,GAAAlV,EAAA,GACA,GACA,IAAAmmB,EAAAtiB,EAAAsvD,EAAA9wD,KACAwjB,EAAAxjB,GAAAoxD,EAAAF,EAAAptC,GAAAqtC,EAAAxvD,EAAA3B,EAAAF,GAAA6H,EACA,IAAA6b,EAAA,MACAA,EAAA,EAAA7Q,EAAA3S,EACA6S,EAAA7S,EACAA,EAAA,IAAA2S,EAAAE,SACKjS,EAAAiS,EAAAF,GAAA0wC,KAAA1lD,EAAA,OAIL,CACAqC,EAAAqjD,EAAA1lD,EAAA,GACA,GACA,IAAAihB,EAAA5e,IACAqxD,EAAA7vD,EAAAsvD,EAAAlyC,GACA0yC,EAAAF,EAAAF,EAAAG,EACAE,EAAAvxD,EAAAsxD,EAAAH,EAAAxvD,EAAA3B,EAAAF,GAAA6H,EACA6pD,EAAAF,GAAAH,EAAAD,EAAAtyC,GAAAyyC,EACArxD,GAAAsH,EAAA+pD,EAAAE,EAAAC,EAAA,QACK5wD,EAAA0G,GAAA+7C,KAAA1lD,EAAA,GAGL,OAAAqC,GAAA2d,EAAAjf,EAAA8C,EAAAsvD,EAAA9wD,MArFAyxD,CAAA/sD,EAAAtE,EAAA,EAAAG,EAAAmE,IAAAC,GAEA,OADAD,EAAAtE,EAAA,IAAAyJ,EAAAjH,EAAA,GAAAA,EAAA,IAAAA,EAAA,GAAAA,EAAA,IAAAiH,GACAjH,EAAA,IAAAguD,EAAAhuD,EAAA,KAAAiuD,EAAAjuD,EAGA+tD,GAAAnmD,OAAA,SAAAxK,EAAAL,GACAiB,EAAAZ,GAAA,IAAAA,EAAA,EAAAuB,EAAAvB,MACAY,EAAAjB,GAAA,IAAAA,EAAA,EAAA4B,EAAA5B,MACA,IAAA+kB,EAAAnjB,EAAAvB,GACA2kB,EAAApjB,EAAA5B,GACAgT,GAAA+R,EAAA1kB,EACA4S,GAAA+R,EAAAhlB,EACAF,EAAAmT,EAAAD,EAAA,EACAzT,EA2EA,SAAAc,EAAAL,GACA,IAAAgT,EAAA,EACAE,EAAA,EACAnU,EAAA,GACAf,EAAA,GAEA,QACA,IAAAywD,EAAA1vD,IACAsG,EAAAxD,EAAA9C,GACAmL,EAAAlI,EAAA,EAAAH,EAAA,EAAA4sD,IACAjpD,EAAA,EAAAipD,EAAA1vD,GAAA,EAAA0vD,GAAAvkD,EACAwgD,GAAA,EAAArlD,GAAAG,EACAjG,EAAAsC,EAAA6oD,GACAyG,EAAAzG,GAAA,EAAA+D,GACAzwC,EAAAze,GAAA,EAAAkvD,GACAiD,EAAAP,EAAA9wD,IACA8jB,EAAAtiB,EAAA6vD,GACAz+C,EAAAjT,EAAAge,EAAAjf,EAAAolB,EACA,GAAAljB,EAAAiS,EAAAF,GAAA2wC,GAAA,KAAA3lD,GAAA,IAAAiV,EAAA,MACAA,EAAA,EAAAD,EAAAjU,EACAmU,EAAAnU,EACAA,EAAA,IAAAiU,EAAAE,GAGA,IAAAlV,EAAA,YAEA,IAAAgH,EAAAhD,EAAAqD,GACAD,EAAAhE,EAAA4D,GACAosD,EAAA,EAAAhsD,EACAisD,EAAA,EAAAhsD,EAAAD,EAEAksD,IAAA9rD,EAAAJ,IADA,EAAArG,EAAAmL,GAAA,IAAAukD,IAAA4C,GACA,EAAAhsD,KAAAG,KAOA,OAAA/E,EAAA,GAAAJ,IAJA,EAAA+wD,GAFA,GAAAE,EAAA/xD,GACA,EAAAkvD,GAAA,EAAA1vD,EAAAQ,EAAA8xD,IAEAD,EAAAC,EAGAltC,IAFAitC,GAAAryD,GAAA,EAAA0vD,GAAA6C,EAAA5G,GAAA,IAAA+D,GAAA4C,GAEArvD,EAAA3B,EAAAwB,EAAAsvD,KAAAnsD,GAjHA+sD,CAAAjyD,EAAAmT,EAAAD,EAAAlT,EAAAkT,EAAAC,GACAlO,EAAAxF,EAAA,GACAyF,EAAAzF,EAAA,GACA6F,EAAAhE,EAAA4D,GAEA,OADAlF,IAAAiF,GAAAnE,EAAAmE,IACAggB,GAAA5jB,EAAAO,EAAAqD,GAAAK,GAAA1D,EAAAsD,IAAAvE,GAAAukB,EAAAhjB,EAAAZ,EAAA2D,GAAAK,KA+GA,IAAA4sD,GAAA,WACA,OAAAtzD,OAAAomD,EAAA,cAAApmD,CAAAmyD,GAAAG,KACAnzC,MAAA,SCxHA,SAAAo0C,GAAA1sD,EAAAnH,GACA,IAAAiiB,EAAAjgB,EAAA4E,EAAAlF,EAAAoyD,EzCkBA7xD,EyCjBA,GAAAjC,EAAAslD,EAIA,QAHA5jD,EAAA4B,EAAA6D,KAEA8a,EAAAjiB,GAAAmH,EAAAzF,GADAM,EAAAgB,EAAAmE,KACA,GAEAnF,EACAA,EAAAigB,EAAAvgB,EACA,EAAA1B,EAAA0B,IAAA,EACAyF,EAAA8a,GAGA,GAAAjiB,GAAA,EAAAslD,EAMA,OALArjC,GAAA,EAAAjiB,GAAA,EAGA4G,EAAA,GAFA5E,EAAA04B,EAAAvzB,MACAzF,IzCIAO,EAAAiB,EAAA,GADAjB,EyCHAkF,KzCKA,IAAAlF,EAAA,IyCDAggB,IAFA6xC,EAAA9xD,EAAA24B,EAAAxzB,IAEAA,IAAAnF,KACA4E,EAAAqb,EAAAvgB,EAAAkF,GAAAktD,EAAA3sD,GACAP,EAAAqb,EAAAvgB,EAAAkF,GAAAktD,EAAA3sD,GACA,EAAArE,EAAAI,EAAAiE,IAAA3E,EAAAyf,GAAA6xC,EAAA3sD,GAAAnF,GAIA,IAAAD,GAAA,mBACA9B,GAAAwD,EAAAzD,GAAA,iBACAJ,EAAA,EAIA,IAHAoC,EAAAyB,EAAA,EAAAzD,GACA8zD,EAAA,EAEAjxD,EAAA5C,EAAAL,GAAAmC,EAAAnC,IAAA0lD,GAAA1lD,EAAA,GACAqiB,EAAAlgB,EAAAnC,KACAK,EAAAL,IAAAqiB,EAAAjgB,GAAA,EACAD,EAAAnC,IAAAqiB,EAAAjgB,GAAA,EACAA,EAAAyB,EAAAwe,EAAAjgB,GACA8xD,GAAA,EAGAltD,EAAAktD,EAAA/xD,EAAAnC,GAAAuH,EACA,GAEAP,GAAAhD,EADAlC,EAAAzB,EAAAL,GAAA0D,EAAAtB,EAAA4E,GAAA7E,EAAAnC,IACAgH,GAAA,UACGhH,GAEH,OAAA0D,EAAAsD,GAAAlF,EAAAsB,EAAA4D,GAAAlF,EAAAsB,EAAA4D,EAAA5E,GAAA4E,GA4BA,SAAAmtD,GAAAntD,EAAA5G,GACA,IAAAA,EAAA,OAAA4G,EACA,OAAA5G,EAAA,OAAAmD,EAAAO,EAAAkD,EAAA,EAAAnE,IAIA,IAHA,IAAAV,EAAA,EACAC,EAAAyB,EAAA,EAAAzD,GACAC,EAAAwD,EAAAzD,GACAJ,EAAA,EAAiBiD,EAAA5C,GAAAqlD,EAAkB1lD,IAAA,CACnC,GAAAgH,EAAAvE,EAAA,CACA,IAAAgmD,EAAAvlD,EAAAd,EAAA0B,EAAAkD,GAAA7E,GACAsmD,EAAA,IAAAA,GAAAhmD,GACAuE,GAAAyhD,KAAAzhD,EAAAvE,UACKuE,KACL3G,GAAA8B,EAAAC,GAAA,EACAA,EAAAyB,EAAA1B,EAAAC,GACA/B,IAAA8B,EAAA9B,GAAA+B,GAAA,EAEA,OAAA4E,GAAAvD,EAAA,EAAAzD,GAAAmC,GC/GA,SAAAiyD,GAAArtD,EAAAC,GACA,IAAA2pD,GAAA7K,EAAA,IAAAA,EAAA,GACAx+C,EAAAzD,EAAA,EAAA8sD,KACA0D,EAAAF,GAAAvxD,EAAA0E,KAEAgtD,EAAA/wD,EAAAO,EAAArB,EAAA,EAAAQ,EAAA+D,GAAA,IACAjG,EAAAuC,GAFA,EAEAgxD,GAAAzwD,EAAA8sD,GACA4D,EAKA,SAAAlyD,EAAAL,GACA,IAAAif,EAAA5e,IACAmyD,EAAAxyD,EAAA,EACAF,EAAA,EAAAmf,EAAAjf,IACA,OACA,KAAAK,GAAA,EAAAO,MAAAO,EAAArB,EAAA,EAAAO,KACA,IAAAkB,EAAAzB,IAAA,EAAAmf,GAAA,GAAA1d,EAAAixD,IAAAvzC,IAXAwzC,CAAA1zD,EAAAqC,GAHA,EAGA2D,GAAAhG,EAAA2C,GAHA,EAGAqD,IACAjF,EDgEA,SAAAkF,EAAAstD,EAAAl0D,GACA,IAAAW,EAAAkC,EAAA+D,GAEA0tD,EAAA35B,EADA93B,EAAAqxD,IAEA,GAAAvzD,EAAA,CACA,IAAA4zD,EAAA,EAAAjxD,EAAA3C,GACA6zD,EAAA,GAAA9wD,EAAA/C,GAAA+C,EAAA/C,IACAqB,IAAAwyD,EAAAx0D,GAAAs0D,IAAAC,KAAA,EAAAv0D,GAEAy0D,IAAAzyD,EAAAyB,EAAAzB,KADAhC,EAAA,GAAAw0D,EACA,MACA,OACAT,GAAAjxD,EAAA,EAAAW,EAAAgxD,IAAAz0D,GAAAwD,EAAAoD,GACAmtD,GAAAjxD,EAAAW,GAAAgxD,EAAAD,EAAA,GAAAx0D,IAAA,EAAAA,GAAAwD,EAAA0wD,IAGA,OACA,EACAH,GAAAjxD,EAAAwxD,GAAA,EAAAt0D,GAAAwD,EAAA0wD,ICjFAQ,CAAAP,EAAA,GAAAA,EAAA,GAAAjtD,KACA,QAAAxF,EAAA,IAAAkF,GAAA,YAAAqtD,EAAAvyD,EAAA,KAqBAsyD,GAAAvnD,OAAA,SAAAxK,EAAAL,GACA,IDjCAuF,EAAAC,EAAApH,EACA+B,EAAAC,EAAA/B,ECgCAswD,GAAA7K,EAAA,IAAAA,EAAA,GACAx+C,EAAAzD,EAAA,EAAA8sD,KACA0D,EAAAF,GAAAvxD,EAAA0E,KAEA+J,GDrCA7J,GCqCAnF,EDrCAjC,ECqCAkH,KDrCAC,ECqCA,GAAA8sD,EAAAryD,ID3BAG,EAAA8xD,GAAA1sD,EAAAnH,GACAoH,GAEAnH,GADA+B,EAAA6xD,GAAAzsD,EAAA,EAAApH,IACA,GAAAgC,EAAA,GAAAhC,EAAA+B,EAAA,GAAAA,EAAA,GAAAC,EAAA,GAAAA,EAAA,KAEAD,EAAA,GAAAC,EAAA,GAAA/B,EAAA8B,EAAA,GAAAA,EAAA,GAAAC,EAAA,GAAAA,EAAA,GAAA/B,IACA8B,EAAA,GAAAC,EAAA,GAAA/B,GAAA8B,EAAA,GAAAA,EAAA,GAAAC,EAAA,GAAAA,EAAA,GAAA/B,IACA8B,EAAA,GAAAC,EAAA,GAAAA,EAAA,GAAA/B,GAAAD,EAAA+B,EAAA,GAAAA,EAAA,GAAAC,EAAA,GAAA/B,OANA8B,EAAA,OAAAA,EAAA,OAAAA,EAAA,UANA,GAFAC,EAAA6xD,GAAAzsD,EAAA,EAAApH,IAEA,GAAAgC,EAAA,KACA,EAAAA,EAAA,OACAA,EAAA,GAAAA,EAAA,QC+BA2yD,EAdA,SAAA5yD,EAAAC,GACA,IAAAomD,EAAApmD,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACA,QACAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,IAAAomD,GACArmD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,IAAAomD,GAUAwM,CAAA3jD,EAAA,GAAAA,EAAA,IAEA,OADAlO,EAAA4xD,EAAA,GAAAA,EAAA,KAHA,EAMA,EAAA7xD,EAAAI,GAAA,GAAAC,EAAAotD,EAAAoE,EAAA,GAAAA,EAAA,GAAApE,EAAAoE,EAAA,GAAAA,EAAA,MAAAnyD,IAIA,IAAAqyD,GAAA,WACA,OAAAv0D,OAAAomD,EAAA,cAAApmD,CAAAmyD,GAAAuB,KACAv0C,MAAA,UChDA,SAAAq1C,GAAAhkD,GACA,IAAAC,EAAAzN,EAAAwN,GACAE,EAAAhO,EAAA8N,GACAtD,EAAAunD,GAAAjkD,GAIA,SAAArD,EAAA9G,EAAAC,GACA,IAAAzF,EAAAqM,EAAA7G,EAAAC,GACAD,EAAAxF,EAAA,GAAAyF,EAAAzF,EAAA,GACA,IAAA8F,EAAA3D,EAAAsD,GACAI,EAAAhE,EAAA4D,GACAkhD,EAAA9kD,EAAA2D,GACAmF,EAAAnI,EAAAoN,EAAA9J,EAAA+J,EAAAhK,EAAA8gD,GACAtB,EAAAljD,EAAAwI,GACAmoD,EAAApxD,EAAA2jD,GAAAlB,EAAAx5C,EAAA06C,EAAA,EACA,OACAyN,EAAAjjD,EAAA1N,EAAAqD,IACA9D,EAAA8D,GAAAnE,EAAAyxD,OACAljD,EAAA/J,EAAAgK,EAAA/J,EAAA6gD,IAiBA,OA/BAt6C,EAAAf,OAAAsoD,IAAAjkD,GAkBArD,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,IAAA29B,EAAA97B,EAAAxB,IAAAL,KACA4kD,GAAAljD,EAAAi8B,GACA2mB,EAAAljD,EAAAu8B,GACAx9B,EAAAw9B,EAAA2mB,EACAlkD,GAAAJ,EAAA4kD,EACAvmD,EAAAs/B,EAAAxuB,EACA7Q,EAAAuD,EAAA1B,IAAAC,IAAA/B,KACA2G,EAAA7D,EAAAhB,EAAA9B,EAAA+B,EAAA9B,EAAA8B,EAAA/B,EAAA8B,EAAA7B,GACAyG,GAAA44B,EAAA/8B,GAAA,KAAAO,EAAAd,EAAAukD,EAAAjnB,EAAAv8B,EAAA4D,GAAAs/C,EAAAtkD,EAAA0B,EAAAsD,GAAA4/C,GACA,OAAAh5C,EAAAf,OAAA9F,EAAAC,IAGA6G,EAKA,SAAAsnD,GAAAjkD,GACA,IAAAC,EAAAzN,EAAAwN,GACAE,EAAAhO,EAAA8N,GAEA,gBAAAnK,EAAAC,GACA,IAAAI,EAAAhE,EAAA4D,GACA3E,EAAAe,EAAA2D,GAAAK,EACApF,EAAA0B,EAAAqD,GAAAK,EACA8E,EAAAxI,EAAAsD,GACA,OACA7D,EAAAnB,EAAAK,EAAA+O,EAAAlF,EAAAiF,GACAnN,EAAAkI,EAAAkF,EAAA/O,EAAA8O,KAKA,IAAAikD,GAAA,WACA,IAAAlkD,EAAA,EACA9Q,EAAAM,OAAAomD,EAAA,qBAAApmD,CAAAw0D,IACA3zD,EAAAnB,EAAA8Q,GACAmkD,EAAA9zD,EAAAqM,OACA+6C,EAAApnD,EAAA8C,OACAsK,EAAAjO,OAAAomD,EAAA,UAAApmD,GAsCA,OApCAa,EAAAqnD,SAAA,SAAA95C,GACA,IAAAD,UAAAjK,OAAA,OAAAsM,EAAAnO,EACA,IAAAhC,EAAAQ,EAAAqM,SACA,OAAAxN,EAAA8Q,EAAApC,EAAA9L,GAAA4K,OAAA7M,IAIAQ,EAAAqM,OAAA,SAAAkB,GACA,OAAAD,UAAAjK,QACAywD,EAAAl1D,KAAAoB,GAAAuN,EAAA,GAAAA,EAAA,GAAAoC,EAAAnO,IACA4L,EAAAF,SAAAK,EAAA,IAAAA,EAAA,KACAvN,KAHAuN,EAAAumD,EAAAl1D,KAAAoB,IAAA,IAAA2P,EAAAnO,EAAA+L,IAMAvN,EAAA8C,OAAA,SAAAA,GAmBA,OAlBAA,EAAAskD,EAAAtkD,IACAS,OAAA,WACAT,EAAA0B,eACA,IAIAxE,EAHAiN,EAAAG,EAAAZ,OAAA,MAAAY,GAAA3J,YAAA,GACA/D,EAAAuN,EAAA5J,OAAA,EACA5E,GAAA,EAGA,IADAqE,EAAAwB,cACA7F,EAAAiB,GAAAoD,EAAAY,OAAA1D,EAAAiN,EAAAxO,IAAA,GAAAuB,EAAA,IAKA,IAJA8C,EAAAyB,UAEA7E,GADAuN,EAAAG,EAAAZ,OAAA,MAAAY,GAAA3J,YAAA,IACAJ,OAAA,EACAP,EAAAwB,cACA7F,GAAA,GAAAqE,EAAAY,OAAA1D,EAAAiN,EAAAxO,IAAA,GAAAuB,EAAA,IACA8C,EAAAyB,UACAzB,EAAA2B,cAEA3B,GAGA9C,EACAse,MAAA,SACA+oC,SAAA,IACArlC,UAAA,kBCrGA+xC,GAAA,iBACAC,GAAAxxC,GAAA,GAEA,SAAAyxC,GAAAtnB,GACA,IAAAh9B,EAAAokD,GAAAtyD,EACAsS,EAAA43C,GAAAzqD,EAAAyO,GAAA,GAAAg8C,IAAAzqD,EAAAyO,GAAA,GACA+D,EAAAsgD,GAAA,EAAArkD,GAAA,GACAiE,EAAA+3C,GAAA,EAAAh8C,GAAA,GACAukD,EAAA1P,EAAA5wC,EACA7N,EAAAxE,EAAAorC,EACA7hC,EAAA,EAAAvJ,EACAkd,EAAA/K,EAAAwgD,IAAA,EAAA3yD,EAEA,SAAA+K,EAAA9G,EAAAC,GACA,IAAA/B,EACA8b,EAAA9d,EAAA+D,GACA,GAAA+Z,EAAA7P,EAAA,CACA,IAAAlR,EAAAiX,EAAAi3B,EAAA,EAAAl3B,EAAA,EAAAxT,GAAAuD,EAAAtE,GAAA6E,MAEArC,EAAAioD,GADAnmD,GAAAtE,GAAAyrC,EAAA,GAAAA,EAAAluC,EAAAsH,EACAyZ,IACA,GAAA9b,EAAA,GAAAnC,EAAAwS,EAAAxS,GAAAorC,EAAA,MAAAA,GAAAluC,EAAA8C,EAAAorC,EACAjpC,EAAA,GAAAgQ,EAAA,GAAAhQ,EAAA,GAAAkQ,GAAAsgD,EAAA3yD,EACAkE,EAAA,IAAA/B,EAAA,IAAAA,EAAA,SAEAA,EAAAswD,GAAAxuD,EAAAC,GAGA,OADA/B,EAAA,IAAAoH,EAAApH,EAAA,IAAA+a,EACA/a,EAiBA,OAdA4I,EAAAhB,OAAA,SAAAxK,EAAAL,GACAK,GAAAgK,EACA,IAAA6U,EAAAje,EADAjB,GAAAge,GAEA,GAAAkB,EAAAjM,EAAA,CACA,IAAAjV,EAAAiX,EAAAi3B,EAAA,EAAAl3B,EAAA,EAAAxT,GAAAnB,EAAAI,GAAA6E,KACAjF,KAAAI,GAAAyrC,EAAA,GAAAA,EAAAluC,EAAAsH,GAAAgO,EAAAxS,EACA,IAAAmC,EAAAioD,GAAArgD,OAAAxK,EAAA,KAAA6e,EAAAjM,GAAAnS,EAAA2yD,EAAAtgD,GAGA,OAFAlQ,EAAA,IAAAxC,GAAAyrC,EAAA,GAAAA,EAAAluC,EAAAsH,EACAtF,EAAA,IAAAiD,EAAA,IAAAA,EAAA,IACAA,EAEA,OAAAswD,GAAA1oD,OAAAxK,EAAAL,IAGA6L,EAaA,IAAA6nD,GAAA,WACA,IAAAxnB,EAAA,EACA9tC,EAAAM,OAAAomD,EAAA,qBAAApmD,CAAA80D,IACAj0D,EAAAnB,EAAA8tC,GACAya,EAAApnD,EAAA8C,OAeA,OAbA9C,EAAAwoD,MAAA,SAAAj7C,GACA,OAAAD,UAAAjK,OAAAxE,EAAA8tC,GAAAp/B,GAAAo/B,GAGA3sC,EAAA8C,OAAA,SAAAA,GACA,IAAAuJ,EAAArM,EAAAqM,SACAi7C,EAAAF,EAAAtkD,GACAykD,GAAAvnD,EAAAqM,QAAA,MAAA+6C,EAAAtkD,IAGA,OAFA9C,EAAAqM,UACAi7C,EAAA/jD,OAAA,WAzBA,IAAAuJ,EAyBsC3N,OAAAomD,EAAA,UAAApmD,EAzBtC2N,EAyBsC,IAAA6/B,GAvBtC3pC,KAAA,UACAS,aACAtE,OAAA8R,GAAA,EAAA9R,EAAA,QAAA2N,EAAA,EAAAA,GAAAqK,IAAA,SAAArW,EAAArC,GAA4D,OAAAqC,EAAA,EAAArC,EAAA,QAAAs1D,MAC5DlmD,OAAA1O,OAAA8R,GAAA,EAAA9R,CAAA,SAAA2N,EAAA,GAAAA,GAAAqK,IAAA,SAAArW,EAAArC,GAAqE,OAAAqC,EAAA,EAAArC,EAAA,SAAAs1D,UAoB/BxM,IACtCD,GAGAtnD,EACAse,MAAA,SChFA,SAAA81C,GAAAtB,GACA,IAIAt5C,EAJAqzB,EAAA,EAAAimB,EAEAuB,EAAA5xD,EADAN,EAAA,EAAA0qC,IAEAh6B,EAAA,EAAAvQ,EAAApB,GAAAsY,EAAAtY,EAAA,EAAAmzD,EAAAxnB,IAEAynB,EAAA,GAAAzhD,GAAAg6B,EAAAvqC,EAAAwwD,GAAA,EAAAA,KACAyB,EAAAzB,IACA0B,EAAA3nB,IAEA,SAAAvgC,EAAA9G,EAAAC,GACA,IACA24B,EACAq2B,EAFAl0D,EAAA,EAAA4B,EAAAsD,GAGA,GAAAlF,KAAA,GACA,IAAA6H,EAAAqZ,EAAApgB,EAAAoE,EAAAhH,EAAA,GACA,GACA,IAAAi2D,EAAAvyD,EAAAsf,GACAkzC,EAAA9yD,EAAA4f,GACAmzC,EAAAP,EAAAzyD,EAAA8yD,EAAA7nB,EAAA8nB,GACAE,EAAA,EAAAL,EAAA,EAAA3nB,EAAA8nB,EACAlzC,GAAArZ,GAAAqZ,EAAA8yC,EAAAF,EAAAxnB,EAAA6nB,EAAAG,EAAAD,EAAA,GAAAr0D,EAAAiZ,IAAA,EAAAqzB,EAAA6nB,EAAAE,SACOlzD,EAAA0G,GAAAg8C,KAAA3lD,EAAA,GACP2/B,EAAAvrB,EAAAvQ,EAAAuyD,GACAJ,EAAAjvD,EAAAovD,EAAA1zD,OAEAk9B,EAAAvrB,GAAAigD,EAAAvyD,GACAk0D,EAAAjvD,EAAA6uD,EAAAnzD,EAEA,OACAk9B,EAAAj8B,EAAAsyD,GACAH,EAAAl2B,EAAAv8B,EAAA4yD,IAgBA,OAZAnoD,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,IAAAwuD,EAAAnuD,KAAAL,GAAA6zD,GAAA7zD,EACAk0D,GAAA,EAAAH,EAAAvF,GAAAp8C,OAAA,EAAAg6B,GACAprB,EAAAjf,EAAAmyD,GACAD,EAAAvyD,EAAAsf,GACAmzC,EAAAP,EAAAzyD,EAAA8yD,EAAA7nB,EAAA8nB,GACA,OACAlyD,EAAA3B,EAAAwB,EAAA2sD,IAAA/tD,EAAA0zD,EACAnyD,EAAA,KAAAgf,EAAA8yC,EAAAF,EAAAxnB,EAAA6nB,GAAA,EAAAF,EAAA,EAAA3nB,EAAA8nB,GAAAC,GAAAp7C,KAIAlN,EAGA,IAAAwoD,GAAA,WACA,IAAAhC,EAAA,EACAj0D,EAAAM,OAAAomD,EAAA,qBAAApmD,CAAAi1D,IACAp0D,EAAAnB,EAAAi0D,GAMA,OAJA9yD,EAAA+0D,MAAA,SAAAxnD,GACA,OAAAD,UAAAjK,OAAAxE,EAAAi0D,GAAAvlD,GAAAulD,GAGA9yD,EACAse,MAAA,SACApR,QAAA,WC5DA8nD,GAAA,kBAEAC,GAAA,eAEA,SAAAC,GAAA1vD,EAAAC,GACA,OAAAA,GAAAuvD,KACAxvD,EAAAgkD,GAAAhkD,EAAAC,IAAA,IAAAwvD,GAAAzvD,GACAukD,GAAAvkD,EAAAC,GAGAyvD,GAAA5pD,OAAA,SAAAxK,EAAAL,GACA,OAAAA,GAAAu0D,GACAxL,GAAAl+C,OAAAxK,EAAAL,EAAAw0D,IACAlL,GAAAz+C,OAAAxK,EAAAL,IAGA,IAAA00D,GAAA,WACA,OAAAh2D,OAAAomD,EAAA,cAAApmD,CAAA+1D,IACA7oD,SAAA,SACAiS,MAAA,SACApR,QAAA,aClBA,SAAAkoD,GAAA5vD,EAAAC,GACA,OAAA/D,EAAA+D,GAAAuvD,KACAxvD,EAAAgkD,GAAAhkD,EAAAC,IAAA,IAAAA,EAAA,EAAAwvD,OAAAzvD,GACAukD,GAAAvkD,EAAAC,GAGA2vD,GAAA9pD,OAAA,SAAAxK,EAAAL,GACA,OAAAiB,EAAAjB,GAAAu0D,GACAxL,GAAAl+C,OAAAxK,EAAAL,KAAA,EAAAw0D,SACAlL,GAAAz+C,OAAAxK,EAAAL,IAGA,IAAA40D,GAAA,WACA,OAAAl2D,OAAAomD,EAAA,cAAApmD,CAAAi2D,IACA92C,MAAA,SCsCA,SAAAg3C,GAAAhxC,EAAA1jB,EAAAC,EAAA00D,EAAAC,QAMAzzC,IAAAwzC,IACAA,EAAA,WAEAxzC,IAAAyzC,IACAA,EAAA,IAGA,IAAAC,EAAAnxC,EAAA1jB,GACA80D,EAAApxC,EAAA,IAAA1jB,EAAAC,IACA80D,EAAArxC,EAAAzjB,GAgBA,OArFA,SAAA+0D,EAAAtxC,EAAA1jB,EAAAC,EAAA40D,EAAAC,EAAAC,EAAAE,EAAAN,EAAAC,EAAAl2C,EAAAw2C,GACA,GAAAA,EAAAC,eACA,OAAA5rD,IAGA,IAAAsU,EAAAu3C,EAAA3D,EAAA4D,EAAArN,EAAAgC,EAAA/rD,EAAAq3D,EAAAC,EAAAC,EAOA,GAJAJ,EAAA1xC,EAAA1jB,EAAA,KADA6d,EAAA5d,EAAAD,IAEAyxD,EAAA/tC,EAAAzjB,EAAA,IAAA4d,GAGA0J,MAAA6tC,GACAF,EAAAC,gBAAA,MADA,CAMA,IAAA5tC,MAAAkqC,GAUA,OAFA+D,IADAxL,GAFAqL,EAAAx3C,GAAAg3C,EAAA,EAAAO,EAAAN,GAAA,KACA9M,EAAAnqC,GAAAi3C,EAAA,EAAArD,EAAAsD,GAAA,KAEAE,GAAA,GAEAv2C,EAAAk2C,GACAM,EAAAO,gBACAzL,EAAAwL,GACGj1D,KAAAO,IAAA00D,GAAAb,EACH3K,EAAAwL,GAIAF,EAAAN,EAAAtxC,EAAA1jB,EAFA/B,EAAA+B,EAAA,GAAA6d,EAEAg3C,EAAAO,EAAAN,EAAAO,EAAA,GAAAV,EAAAC,EAAAl2C,EAAA,EAAAw2C,GAEA3tC,MAAA+tC,IACAJ,EAAAC,gBAAA,EACA5rD,MAGAgsD,EAAAP,EAAAtxC,EAAAzlB,EAAAgC,EAAA60D,EAAArD,EAAAsD,EAAA/M,EAAA,GAAA2M,EAAAC,EAAAl2C,EAAA,EAAAw2C,GAEA3tC,MAAAguC,IACAL,EAAAC,gBAAA,EACA5rD,KAGA+rD,EAAAC,IA/BAL,EAAAC,gBAAA,GAsDAH,CAAAtxC,EAAA1jB,EAAAC,EAAA40D,EAAAC,EAAAC,GAFAF,EAAA,EAAAC,EAAAC,IAAA90D,EAAAD,GAAA,EAEA20D,EAAAC,EAAA,GAjBAa,cAAA,EACAN,gBAAA,ICzDA,SAAAO,GAAA31C,EAAA5a,EAAA00B,GAEA,SAAA87B,EAAAjyC,GACA,OAAA3D,GAAA,EAAAA,GAAAze,EAAA,EAAAA,EAAAoiB,EAAAve,GAAA,EAAAA,GAGA,SAAA4E,EAAA2Z,GACA,OAAAgxC,GAAAiB,EAAA,EAAAjyC,EAAA,MAOA,IAJA,IAAAkyC,EAAA,EAAA7rD,EAAA,GACAjL,EAAA,IACAb,GAAA,QAAA23D,EACAC,KACAh4D,EAAA,EAAiBA,GAAAiB,EAAQjB,IACzBg4D,EAAA1uD,KAAA4C,EAAAlM,EAAAiB,GAAAb,GAEA,SAAAkZ,EAAA2+C,GACA,IAAAC,EAAA,EAAAC,EAAAl3D,EAAAF,EAAAE,GAAA,EACA,GACA+2D,EAAAj3D,GAAAk3D,EAAAE,EAAAp3D,EAAuCm3D,EAAAn3D,EACvCA,EAAAm3D,EAAAC,GAAA,QACKp3D,EAAAm3D,GACL,IAAA3wD,EAAAywD,EAAAj3D,EAAA,GAAAi3D,EAAAj3D,GAEA,OADAwG,OAAA0wD,EAAAD,EAAAj3D,EAAA,IAAAwG,IACAxG,EAAA,EAAAwG,GAAAtG,EAGA,IAAAq1D,EAAA,EAAAh9C,EAAA,GAAA7W,EAAAs1D,EAAA/7B,EAEAnuB,EAAA,SAAA9G,EAAAC,GACA,IAAAhF,EAAAsX,EAAArW,EAAAS,EAAAsD,KACA3E,EAAAy1D,EAAA91D,GAAA+E,EAEA,OADA/E,GAAAs0D,GACAj0D,EAAA2E,GAAA,EAAAhF,OAUA,OAPA6L,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,IAAAgF,EAGA,OADA/D,EADAjB,GAAAs0D,GACA,IAAAtvD,EAAApD,EAAA5B,GAAAgC,EAAAkI,EAAAjJ,EAAAjB,IAAA+1D,KACA11D,EAAAy1D,EAAA70D,EAAAjB,IAAAgF,IAGA6G,EAGA,IAAAuqD,GAAA,WACA,IAAAl2C,EAAA,EACA5a,EAAA,IACA00B,EAAA,SACA57B,EAAAM,OAAAomD,EAAA,qBAAApmD,CAAAm3D,IACAt2D,EAAAnB,EAAA8hB,EAAA5a,EAAA00B,GAcA,OAZAz6B,EAAA2gB,MAAA,SAAApT,GACA,OAAAD,UAAAjK,OAAAxE,EAAA8hB,GAAApT,EAAAxH,EAAA00B,GAAA9Z,GAGA3gB,EAAA+F,EAAA,SAAAwH,GACA,OAAAD,UAAAjK,OAAAxE,EAAA8hB,EAAA5a,GAAAwH,EAAAktB,GAAA10B,GAGA/F,EAAAy6B,MAAA,SAAAltB,GACA,OAAAD,UAAAjK,OAAAxE,EAAA8hB,EAAA5a,EAAA00B,GAAAltB,GAAAktB,GAGAz6B,EACAse,MAAA,SCnEA,SAAAw4C,GAAAl2D,EAAAC,GACA,OAAAa,EAAAd,EAAA,GAAAC,EAAA,IAAAsjD,GAAAziD,EAAAd,EAAA,GAAAC,EAAA,IAAAsjD,EAGA,SAAA4S,GAAAtzD,EAAA5E,GAQA,IAPA,IAGAkQ,EACAgF,EACAC,EALAvV,GAAA,EACAiB,EAAA+D,EAAAJ,OACAyL,EAAArL,EAAA,GAIAuzD,OACAv4D,EAAAiB,GAAA,CAEAqU,IADAhF,EAAAtL,EAAAhF,IACA,GAAAqQ,EAAA,IAAAjQ,EACAmV,GAAAjF,EAAA,GAAAD,EAAA,IAAAjQ,EACA,QAAAiR,EAAA,EAAmBA,EAAAjR,IAAOiR,EAAAknD,EAAAjvD,MAAA+G,EAAA,GAAAgB,EAAAiE,EAAAjF,EAAA,GAAAgB,EAAAkE,IAC1BlF,EAAAC,EAGA,OADAioD,EAAAjvD,KAAAgH,GACAioD,EA0CA,IAAAC,GAAA,SAAA93C,EAAAqpC,GACA,IAAAjlD,EAAAsG,EAEA,SAAAyC,EAAA9G,EAAAC,GAEA,IADA,IAAApD,EAAAoD,EAAA,OAAAyxD,EAAA1O,IAAA/iD,EAAA,IACAhH,EAAA,EAAAiB,EAAAw3D,EAAA7zD,OAAA,EAAwC5E,EAAAiB,GAAA8F,EAAA0xD,EAAAz4D,GAAA,QAAiCA,GACzE,IAAAuB,EAAAmf,EAAA3Z,EAAA0xD,EAAAz4D,GAAA,MAAAgH,GAEA,OADAzF,EAAA,IAAAmf,EAAA+3C,EAAAz4D,GAAA,MAAA4D,EAAAoD,EAAApD,EAAA60D,EAAAz4D,GAAA,MAAAy4D,EAAAz4D,GAAA,MAAAgH,GAAA,GACAzF,EAIAmf,EAAA7T,SAAAgB,EAAAhB,OAAA,SAAAxK,EAAAL,GAEA,IADA,IAAA02D,EAAAttD,IAAApJ,EAAA,IAAAy2D,EAAA1O,IAAA/nD,EAAA,IACAhC,EAAA,EAAAiB,EAAAy3D,EAAA9zD,OAAqC5E,EAAAiB,IAAOjB,EAAA,CAC5C,IAAAoC,EAAAs2D,EAAA14D,GACA,GAAAoC,EAAA,OAAAC,KAAAD,EAAA,OAAAA,EAAA,OAAAJ,KAAAI,EAAA,OACA,IAAAb,EAAAmf,EAAA7T,OAAAxK,EAAAqe,EAAA+3C,EAAAz4D,GAAA,YAAAgC,GAEA,OADAT,EAAA,IAAAk3D,EAAAz4D,GAAA,MACAq4D,GAAAxqD,EAAAtM,EAAA,GAAAA,EAAA,KAAAc,EAAAL,IAAAT,EAAA,SAKA,IAAAA,EAAAb,OAAAomD,EAAA,cAAApmD,CAAAmN,GACA86C,EAAApnD,EAAA8C,OAmDA,OAjDA9C,EAAA8C,OAAA,SAAAA,GACA,IAAAuJ,EAAArM,EAAAqM,SACAi7C,EAAAF,EAAAtkD,GACAykD,GAAAvnD,EAAAqM,QAAA,MAAA+6C,EAAAtkD,IAGA,OAFA9C,EAAAqM,UACAi7C,EAAA/jD,OAAA,WAAsCpE,OAAAomD,EAAA,UAAApmD,CAAAoE,EAAAgkD,IACtCD,GAGAtnD,EAAAwoD,MAAA,SAAAj7C,GACA,OAAAD,UAAAjK,QAUAE,EAtFA,SAAAilD,GACA,IACA0O,EACA1uD,EAAAmH,EAAAO,EACAuP,EAAAD,EACA/gB,EAJAgF,KAIA/D,EAAA8oD,EAAA,GAAAnlD,OAGA,IAAA5E,EAAA,EAAaA,EAAAiB,IAAOjB,EAEpB+J,GADA0uD,EAAA1O,EAAA,GAAA/pD,IACA,MAAAkR,EAAAunD,EAAA,MAAAhnD,EAAAgnD,EAAA,MACAz3C,EAAAy3C,EAAA,MAAA13C,EAAA03C,EAAA,MACAzzD,EAAAsE,KAAAgvD,KACAvuD,EAAA27C,EAAAx0C,EAAAw0C,IACA37C,EAAA27C,EAAAj0C,EAAAi0C,IACA1kC,EAAA0kC,EAAAj0C,EAAAi0C,IACA1kC,EAAA0kC,EAAA3kC,EAAA2kC,IACA,KAIA,IAAA1lD,EAAA+pD,EAAA,GAAAnlD,OAAA,EAA+B5E,GAAA,IAAQA,EAEvC+J,GADA0uD,EAAA1O,EAAA,GAAA/pD,IACA,MAAAkR,EAAAunD,EAAA,MAAAhnD,EAAAgnD,EAAA,MACAz3C,EAAAy3C,EAAA,MAAA13C,EAAA03C,EAAA,MACAzzD,EAAAsE,KAAAgvD,KACAt3C,EAAA0kC,EAAA3kC,EAAA2kC,IACA1kC,EAAA0kC,EAAAj0C,EAAAi0C,IACA37C,EAAA27C,EAAAj0C,EAAAi0C,IACA37C,EAAA27C,EAAAx0C,EAAAw0C,IACA,KAGA,OACAnhD,KAAA,UACAS,aAAAtE,OAAA8R,GAAA,EAAA9R,CAAAsE,KAmDA2zD,CAAA7pD,GAEAi7C,EAAAj7C,EAAA4J,IAAA,SAAA+/C,GACA,OAAAA,EAAA//C,IAAA,SAAAzY,GACA,QACAA,EAAA,MAAA+C,EAAA/C,EAAA,MAAA+C,IACA/C,EAAA,MAAA+C,EAAA/C,EAAA,MAAA+C,IACA/C,EAAA,MAAA+C,EAAA/C,EAAA,MAAA+C,QAKAoI,EAAA2+C,EAAArxC,IAAA,SAAA+/C,GACA,OAAAA,EAAA//C,IAAA,SAAAzY,GACA,IAIA6B,EAJAkT,EAAA0L,EAAAzgB,EAAA,MAAAA,EAAA,UACAiV,EAAAwL,EAAAzgB,EAAA,MAAAA,EAAA,UACAgV,EAAAyL,EAAAzgB,EAAA,MAAAA,EAAA,UACAkV,EAAAuL,EAAAzgB,EAAA,MAAAA,EAAA,UAGA,OADAgV,EAAAE,IAAArT,EAAAmT,IAAAE,IAAArT,KACAkT,EAAAC,IAAAC,EAAAC,QAIA5T,GAlCAwoD,EAAArxC,IAAA,SAAA+/C,GACA,OAAAA,EAAA//C,IAAA,SAAAzY,GACA,QACAA,EAAA,MAAA8C,EAAA9C,EAAA,MAAA8C,IACA9C,EAAA,MAAA8C,EAAA9C,EAAA,MAAA8C,IACA9C,EAAA,MAAA8C,EAAA9C,EAAA,MAAA8C,SAgCA,MAAAgnD,GAAAxoD,EAAAwoD,SAEAxoD,GC3IAq3D,QACA,6BACA,4BAEA,+BACA,6BACA,yBACA,2BAGAC,GAAA,WACA,OAAAL,GAAArN,GAAAyN,IACA/4C,MAAA,UCZAi5C,QACA,6BACA,4BAEA,+BACA,6BACA,yBACA,2BAGAC,GAAA,WACA,OAAAP,GAAA7B,GAAAmC,IACAj5C,MAAA,SCZAm5C,QACA,6BACA,4BAEA,+BACA,6BACA,yBACA,2BAGAC,GAAA,WACA,OAAAT,GAAAzN,GAAAiO,IACAn5C,MAAA,UCZAq5C,QACA,yBACA,2BAEA,0BACA,yBAGAC,GAAA,WACA,OAAAX,GAAAzN,GAAAmO,IACAr5C,MAAA,SACAjS,QAAA,QCXAwrD,QACA,2BACA,6BAEA,kCACA,4BACA,+BAGAC,GAAA,WACA,OAAAb,GAAA/B,GAAA2C,IACAxrD,SAAA,SACAiS,MAAA,SACApR,QAAA,aCbA6qD,QACA,6BACA,uBACA,6BAEA,8BACA,wBACA,2BAGAC,GAAA,WACA,OAAAf,GAAAlN,GAAAgO,IACAz5C,MAAA,QACAjS,SAAA,QCbA,SAAA4rD,GAAAzyD,EAAAC,GACA,SAAAlE,EAAAiE,EAAAlD,EAAApB,IAAA,EAAAuE,QAGAwyD,GAAA3sD,OAAA,SAAAxK,EAAAL,GACA,OAAAc,EAAA,EAAAT,EAAAwB,EAAApB,IAAA,EAAAT,SAGA,IAAAy3D,GAAA,WACA,OAAA/4D,OAAAomD,EAAA,cAAApmD,CAAA84D,IACA35C,MAAA,UCVA,SAAA65C,GAAAz4D,GAEA,SAAA4M,EAAA9G,EAAAC,GACA,GAAA/D,IAAA+D,GAAApE,GAAA8iD,EAAA,SAAA1+C,EAAA,QACA,IAAAK,EAAA3D,EAAAsD,GACAQ,EAAA/D,GAAA,EAAA4D,IAAA,EAAAA,GAAApG,EAAA,GACAZ,EAAA,IAAAmH,EAAA,EAAAA,GAAApE,EAAA2D,GAAA9F,GACA,OACA,EAAAyC,EAAAqD,GAAA1G,GACAmH,EAAA,EAAAA,GAAAnH,GAoBA,OAhBAwN,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,IAAAiT,EAAAhS,EAAAjB,GACA,GAAAiB,EAAAgS,EAAA,GAAAywC,EAAA,OAAArjD,EAAA,QAAAuB,EAAA5B,GAAAY,GACA,GAAAqS,EAAA,cAGA,IAAAgM,GADA5e,GAAA,GACAA,EACA6e,GAFAlf,GAAA,GAEAA,EACAF,EAAA,EAAAE,GAAA,EAAAif,EAAAC,GAEA,OADApf,EAAA2B,GAAA,EAAA3B,IAAA,EAAAA,GAAA,EAAAb,IAEAkC,EAAA,EAAAd,EAAA,EAAA4e,EAAAC,GAAAjgB,EACA+C,GAAAlC,EAAA,IAAAA,EAAA,MAIA+L,EAGA,IAAA8rD,GAAA,WACA,IAAA14D,EAAA,GACAb,EAAAM,OAAAomD,EAAA,qBAAApmD,CAAAg5D,IACAn4D,EAAAnB,EAAAa,GAMA,OAJAM,EAAAq4D,QAAA,SAAA9qD,GACA,OAAAD,UAAAjK,OAAAxE,EAAAa,GAAA6N,GAAA7N,GAGAM,EACAse,MAAA,SC1CAg6C,GAAAp3D,EAAAqjD,EAEA,SAAAgU,GAAA/yD,EAAAC,GACA,OACAD,GAAA,EAAAlD,EAAAT,EAAA4D,KAAA,EACAA,GAAA5D,EAAA4D,EAAA,GAAA5D,EAAA2D,EAAA,KAIA+yD,GAAAjtD,OAAA,SAAAxK,EAAAL,GACA,IAAAgT,EAAA/R,EAAAZ,GACA4S,EAAAhS,EAAAjB,GACA+E,EAAA2+C,EACA1+C,EAAApE,EACAqS,EAAA4kD,GAAA7yD,GAAAiO,EAAA4kD,GACA9yD,GAAA,EAAAhD,EAAA81D,GAAA5kD,GACA,QAAAjV,EAAA,EAAiBA,EAAA,GAAQA,IAAA,CACzB,IAAAqH,EAAA3D,EAAAsD,GACA+yD,EAAAl2D,EAAAT,EAAA4D,IACAgzD,EAAAt2D,EAAAsD,EAAA,GACA2iD,EAAAvmD,EAAA4D,EAAA,GACAizD,EAAAv2D,EAAAqD,EAAA,GACAmzD,EAAA92D,EAAA2D,EAAA,GACAozD,EAAA,GAAApzD,GAAA,EAAAgzD,GAAA/kD,EACAuiD,EAAAvwD,GAAA2iD,EAAAuQ,GAAAjlD,EACAmlD,EAAAL,GAAA,IAAAhzD,EAAAM,EAAA0yD,EAAA,EACAM,EAAA,MAAAN,GACAO,GAAA,KAAAtzD,EAAAgzD,EAAArQ,MAAAuQ,GACAK,EAAAvzD,EAAA2iD,GAAAsQ,EAAA,IAAAC,KACAM,EAAAJ,EAAAG,EAAAD,EAAAD,EACA5R,GAAA0R,EAAAI,EAAAhD,EAAA8C,GAAAG,EACAvzD,GAAAswD,EAAA6C,EAAAD,EAAAG,GAAAE,EAGA,GAFAxzD,GAAAyhD,EACA1hD,GAAAE,EACAhE,EAAAwlD,GAAA/C,GAAAziD,EAAAgE,GAAAy+C,EAAA,MAEA,OAAArjD,EAAA,GAAA0E,IAAA/E,EAAA,GAAAgF,MAGA,IAAAyzD,GAAA,WACA,OAAA/5D,OAAAomD,EAAA,cAAApmD,CAAAo5D,IACAj6C,MAAA,UCzCA,SAAA66C,GAAA3zD,EAAAC,GACA,IAAAga,EAAAja,IAAAga,EAAA/Z,IACA,OACAD,GAAA,QAAAga,IAAA,SAAAC,EAAA,kBAAAD,IACA/Z,GAAA,QAAAga,GAAA,iBAAAD,EAAA,UAAAC,GAAAD,GAAA,mBAAAA,KAIA25C,GAAA7tD,OAAA,SAAAxK,EAAAL,GACA,IAAA+E,EAAAnD,EAAAvB,GAAAI,EACAuE,EAAAhF,EAAA,EACAhC,EAAA,GACA,GACA,IAAAghB,EAAAja,IACAga,EAAA/Z,IACA2zD,EAAA5zD,EAAAC,EACAygD,EAAA1gD,GAAA,QAAAga,IAAA,SAAAC,EAAA,kBAAAD,IAAA1e,EACAyjB,EAAA9e,GAAA,QAAAga,GAAA,iBAAAD,EAAA,UAAAC,GAAAD,GAAA,mBAAAA,IAAA/e,EACAutD,EAAA,QAAAxuC,GAAA,UAAAC,EAAA,kBAAAD,GACAyuC,GAAAmL,GAAA,iBAAA55C,EAAA,SAAAC,GACAyuC,EAAAkL,GAAA,iBAAA35C,GAAA,MAAAD,GACA2uC,EAAA,QAAA1uC,GAAA,mBAAAA,GAAAD,GAAA,mBAAAC,GAAA,QAAAD,GACAynC,EAAAgH,EAAAC,EAAAC,EAAAH,EACAviD,GAAA8Y,EAAA0pC,EAAA/H,EAAAiI,GAAAlH,EACAv7C,GAAAw6C,EAAAgI,EAAA3pC,EAAAypC,GAAA/G,EACAzhD,GAAAiG,EAAAhG,GAAAiG,SACGhK,EAAA+J,GAAA04C,GAAAziD,EAAAgK,GAAAy4C,MAAA1lD,EAAA,GACH,OAAAA,IAAA+G,EAAAC,IAGA,IAAA4zD,GAAA,WACA,OAAAl6D,OAAAomD,EAAA,cAAApmD,CAAAg6D,IACA76C,MAAA,SChCA,SAAAg7C,GAAA9zD,EAAAC,GACA,OACAtD,EAAAqD,GAAA3D,EAAA4D,GACAlD,EAAAkD,GAAA5D,EAAA2D,IAIA8zD,GAAAhuD,OAAA,SAAAxK,EAAAL,GACA,IAAAif,EAAA5e,IAEAy4D,EADA94D,IACA,EACA+4D,EAAA95C,EAAA65C,EACA1zD,EAAA/E,EACAujD,EAAA/hD,GAAAk3D,EAAAl3D,EAAAk3D,IAAA,EAAA95C,OACA,EAAApd,EAAAi3D,GACA,OACA92D,EAAA3B,EAAA+E,GACAxD,EAAA5B,GAAA+B,EAAAqD,KAIA,IAAA4zD,GAAA,WACA,OAAAt6D,OAAAomD,EAAA,cAAApmD,CAAAm6D,IACAh7C,MAAA,SACA0D,UAAA,SCxBA,SAAA03C,GAAA/pD,GACA,IAAAE,EAAAhO,EAAA8N,GACA+2C,EAAAnkD,EAAAjB,EAAAqO,EAAA,GAEA,SAAArD,EAAA9G,EAAAC,GACA,IAAAhF,EAAAgF,EAAAkK,EACA7O,EAAAY,EAAAjB,GAAA0jD,EAAA3+C,EAAAqK,EACAnO,EAAAZ,EAAAQ,EAAAmE,EAAA,GAAA0+C,GAAAziD,IAAAZ,GAAAO,GAAA8iD,EACA,EAAA3+C,EAAA/E,EAAAuB,EAAAO,EAAAzB,GAAA4lD,GACA,OAAA5lD,EAAAL,GAcA,OAXA6L,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,IAAA+E,EACAC,EAAAhF,EAAAkP,EACA,OACAjO,EAAAjB,GAAA0jD,EAAArjD,EAAA+O,EACAnO,EAAA8D,EAAAlE,EAAAmE,EAAA,GAAA0+C,GAAAziD,IAAA8D,GAAAnE,GAAA8iD,EAAA,EACArjD,EAAAkB,EAAAO,EAAAiD,GAAAkhD,GAAAjmD,EACAgF,IAIA6G,EAGA,IAAAqtD,GAAA,WACA,OAAA7P,GAAA4P,IACArS,SAAA,IACA/oC,MAAA,UC7BA,SAAAs7C,GAAAp0D,EAAAC,GACA,OAAAD,EAAA,KAAAxD,EAAAO,EAAAjB,EAAA,GAAAmE,KAGAm0D,GAAAtuD,OAAA,SAAAxK,EAAAL,GACA,OAAAK,EAAA,IAAAa,EAAAI,EAAA,GAAAtB,IAAA,KAAAS,IAGA,IAAA24D,GAAA,WACA,OAAA16D,OAAAomD,EAAA,cAAApmD,CAAAy6D,IACAt7C,MAAA,UCVA,SAAAw7C,GAAAjF,GACA,IAAAh2D,EAAAg2D,EAAAxxD,OAAA,EAEA,SAAAiJ,EAAA9G,EAAAC,GAUA,IATA,IAQAlF,EARAsF,EAAAhE,EAAA4D,GACAM,EAAA,KAAAF,EAAAhE,EAAA2D,IACAu0D,EAAAh0D,EAAAF,EAAA1D,EAAAqD,GACAw0D,EAAAj0D,EAAA5D,EAAAsD,GACAhH,EAAAI,EACAiM,EAAA+pD,EAAAp2D,GACAw7D,EAAAnvD,EAAA,GACAgW,EAAAhW,EAAA,KAEArM,GAAA,GAEAw7D,GADAnvD,EAAA+pD,EAAAp2D,IACA,GAAAs7D,GAAAx5D,EAAA05D,GAAAD,EAAAl5C,EACAA,EAAAhW,EAAA,GAAAivD,EAAAj5C,EAAAk5C,EAAAz5D,EAIA,OAFA05D,EAAAF,GAAAx5D,EAAA05D,GAAAD,EAAAl5C,EACAA,EAAAi5C,EAAAj5C,EAAAk5C,EAAAz5D,GA0CA,OAtCA+L,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,IAAAhC,EAAA,GACAs7D,EAAAj5D,EACAk5D,EAAAv5D,EACA,GASA,IARA,IAMAF,EANAuP,EAAAjR,EACAiM,EAAA+pD,EAAA/kD,GACAmqD,EAAAnvD,EAAA,GACAgW,EAAAhW,EAAA,GACAovD,EAAA,EACAn5C,EAAA,IAGAjR,GAAA,GACAhF,EAAA+pD,EAAA/kD,GACAoqD,EAAAD,EAAAF,GAAAx5D,EAAA25D,GAAAF,EAAAj5C,EACAA,EAAAD,EAAAi5C,EAAAh5C,EAAAi5C,EAAAz5D,EACA05D,EAAAnvD,EAAA,GAAAivD,GAAAx5D,EAAA05D,GAAAD,EAAAl5C,EACAA,EAAAhW,EAAA,GAAAivD,EAAAj5C,EAAAk5C,EAAAz5D,EAOA,IAAA45D,EAAAC,EAAAnT,GALAiT,EAAAD,EAAAF,GAAAx5D,EAAA25D,GAAAF,EAAAj5C,GAKAm5C,GAJAn5C,EAAAD,EAAAi5C,EAAAh5C,EAAAi5C,EAAAz5D,GAIAwgB,EACAg5C,GAAAI,IAJAF,EAAAF,GAAAx5D,EAAA05D,GAAAD,EAAAl5C,EAAAhgB,GAIAo5D,GAHAp5C,EAAAi5C,EAAAj5C,EAAAk5C,EAAAz5D,EAAAE,GAGAsgB,GAAAkmC,EACA+S,GAAAI,GAAAt5C,EAAAo5C,EAAAD,EAAAl5C,GAAAkmC,QACKvlD,EAAAy4D,GAAAz4D,EAAA04D,GAAAjW,OAAA1lD,EAAA,GAEL,GAAAA,EAAA,CACA,IAAA2/B,EAAA97B,EAAAy3D,IAAAC,KACAl7D,EAAA,EAAA6C,EAAA,GAAAy8B,GACAi8B,EAAAl4D,EAAArD,GACA,OAAA8C,EAAAm4D,EAAAM,EAAAj8B,EAAAv8B,EAAA/C,IAAAs/B,EAAA37B,EAAAu3D,EAAAK,EAAAj8B,GAAA,KAIA9xB,EAGA,IAAAguD,KAAA,sHACAC,KAAA,gDACAC,KAAA,sMACAC,KAAA,2BACAC,KAAA,0CAEA,SAAAC,KACA,OAAAC,GAAAN,IAAA,UACAh8C,MAAA,MACApR,SAAA,kBACA8U,UAAA,IAGA,SAAA64C,KACA,OAAAD,GAAAL,IAAA,SACAj8C,MAAA,KACA0D,UAAA,IACA9U,SAAA,kBAGA,SAAA4tD,KACA,OAAAF,GAAAJ,IAAA,UACAl8C,MAAA,SACA0D,UAAA,IACA9U,SAAA,kBAGA,SAAA6tD,KACA,OAAAH,GAAAH,KAAA,SACAn8C,MAAA,SACApR,QAAA,aACA8U,UAAA,IAGA,SAAAg5C,KACA,OAAAJ,GAAAF,IAAA,SACAp8C,MAAA,KACA0D,UAAA,KACA9U,SAAA,UAGA,SAAA0tD,GAAAK,EAAA5uD,GACA,IAAArM,EAAAb,OAAAomD,EAAA,cAAApmD,CAAA26D,GAAAmB,IAAA5uD,UAAA2V,UAAA,IACAxiB,EAAAL,OAAAomD,EAAA,YAAApmD,CAAAkN,GACAa,EAAAlN,EAAAkN,OAQA,cANAlN,EAAAqM,OAEArM,EAAAkN,OAAA,SAAAK,GACA,OAAAD,UAAAjK,OAAA6J,EAAA1N,EAAA+N,IAAA/N,EAAA8L,OAAA4B,MAGAlN,ECpHA,IAAAk7D,GAAA54D,EAAA,GACA64D,GAAA74D,EAAA,GAEA,SAAA84D,GAAA51D,EAAAC,GACA,IAAAgc,EAAAhf,EAAA,EAAAN,EAAAsD,IAAA,EAAAy1D,KACA,OACAA,GAAA11D,GAAA,EAAA3D,EAAA,EAAA4f,EAAA,MAAA05C,GACA,EAAAh5D,EAAAsf,EAAA,GAAA05C,IAIAC,GAAA9vD,OAAA,SAAAxK,EAAAL,GACA,IAAAghB,EAAA,EAAAhf,EAAAhC,EAAA06D,GAAA,GACA,OACAr6D,EAAAq6D,IAAAD,IAAA,EAAAr5D,EAAA,EAAA4f,EAAA,OACAhf,EAAA,EAAAN,EAAAsf,GAAAy5C,GAAA,KAIA,IAAAG,GAAA,WACA,OAAAl8D,OAAAomD,EAAA,cAAApmD,CAAAi8D,IACA98C,MAAA,UCrBA,SAAAg9C,GAAA91D,EAAAC,GAGA,IAFA,IAEA2C,EAFArC,GAAA,EAAAs+C,GAAAliD,EAAAsD,GACAgc,EAAAhc,EACAhH,EAAA,EAAwBA,EAAA,KACxBgjB,GAAArZ,GAAAjG,EAAAsf,EAAA,GAAAtf,EAAAsf,GAAA1b,IAAA,GAAAlE,EAAA4f,EAAA,GAAA5f,EAAA4f,MACA/f,EAAA0G,GAAA+7C,IAFgC1lD,KAIhC,OACA+G,GAAA,IAAA3D,EAAA4f,GAAA5f,EAAA4f,EAAA,OAAA8iC,GACA,EAAAjiD,EAAA,GAAAH,EAAAsf,EAAA,GAAAnf,EAAA,EAAAiiD,IAIA+W,GAAAhwD,OAAA,SAAAxK,EAAAL,GACA,IAAA86D,EAAA96D,EAAA6B,EAAA,EAAAiiD,IAAA,EAAAjiD,EAAA,IACAmf,EAAA,EAAAhf,EAAA84D,GACA,OACA,EAAAhX,EAAAzjD,GAAA,IAAAe,EAAA4f,GAAA5f,EAAA4f,EAAA,IACAhf,GAAA84D,EAAAp5D,EAAAsf,KAAA,EAAA4iC,MAIA,IAAAmX,GAAA,WACA,OAAAr8D,OAAAomD,EAAA,cAAApmD,CAAAm8D,IACAh9C,MAAA,UCxBA,SAAAm9C,GAAAj2D,EAAAC,GAIA,IAHA,IAGA2C,EAHAyK,EAAAvQ,EAAA,KAAApB,IACA6E,GAAA,EAAA7E,EAAA,GAAAiB,EAAAsD,GACAgc,EAAAhc,EAAA,EACAhH,EAAA,EAAwBA,EAAA,KACxBgjB,GAAArZ,GAAAqZ,EAAA,EAAAtf,EAAAsf,GAAA1b,IAAA,GAAAlE,EAAA4f,MACA/f,EAAA0G,GAAA+7C,IAFgC1lD,KAIhC,OACAoU,GAAA,GAAAhR,EAAA4f,IAAAjc,EAAA,IACAqN,EAAA4O,GAIAg6C,GAAAnwD,OAAA,SAAAxK,EAAAL,GACA,IAAAoS,EAAAvQ,EAAA,KAAApB,IACAugB,EAAAhhB,EAAAoS,EAEA,OADAnR,IAAA+f,GAAApgB,GAAA8iD,IAAA1iC,IAAA,GAAApgB,MAEA,IAAAP,GAAA+R,GAAA,GAAAhR,EAAA4f,KACAhf,GAAAgf,EAAA,EAAAtf,EAAAsf,KAAA,EAAAvgB,EAAA,MAIA,IAAAw6D,GAAA,WACA,OAAAv8D,OAAAomD,EAAA,cAAApmD,CAAAs8D,IACAn9C,MAAA,UC1BA,SAAAq9C,GAAAn2D,EAAAC,GACA,IAAA+Z,EAAA/Z,IAAAogB,EAAArG,IAAAo8C,EAAAp8C,EAAAqG,EACA,OACArgB,GAAA,cAAAga,EAAAo8C,KAAA,OAAAp8C,EAAA,cAAAqG,EAAA,OAAA+1C,IACAn2D,GAAA,QAAAogB,KAAA,OAAArG,EAAA,cAAAqG,KAIA81C,GAAArwD,OAAA,SAAAxK,EAAAL,GACA,IAAA2H,EAAAoX,EAAAqG,EAAA+1C,EAAAn2D,EAAAhF,EAAAhC,EAAA,GACA,GAEAgH,GAAA2C,GAAA3C,GAAA,SADqBogB,GAArBrG,EAAA/Z,KAAqB+Z,GACrBqG,GAAA,OAAArG,EAAA,cAAAqG,IAAAplB,IACA,QAAAolB,KAAA,OAAArG,EAAA,eAAAqG,UACGnkB,EAAA0G,GAAAg8C,KAAA3lD,EAAA,GAEH,OACAqC,GAAA,eAFA0e,EAAA/Z,MAAuCm2D,EAAAp8C,GAApBqG,EAAArG,MAEnBo8C,GAAA,OAAAp8C,EAAA,cAAAqG,EAAA,OAAA+1C,IACAn2D,IAIA,IAAAo2D,GAAA,WACA,OAAA18D,OAAAomD,EAAA,cAAApmD,CAAAw8D,IACAr9C,MAAA,UCxBA,SAAAw9C,GAAAt2D,EAAAC,GACA,OACAD,GAAA,EAAA3D,EAAA4D,IAAA,EACA,GAAAA,EAAAlD,EAAAkD,EAAA,KAIAq2D,GAAAxwD,OAAA,SAAAxK,EAAAL,GAEA,IADA,IAAAT,EAAAS,EAAA,EACAhC,EAAA,EAAA2J,EAAA6B,IAAmCxL,EAAA,IAAAiD,EAAA0G,GAAA+7C,IAAgC1lD,EAAA,CACnE,IAAAK,EAAA+C,EAAApB,EAAA,GACAA,GAAA2H,GAAA3H,EAAA8B,EAAA9B,EAAA,GAAAT,IAAA,MAAAlB,MAEA,OACA,EAAAgC,GAAA,EAAAe,EAAApB,IACAA,IAIA,IAAAs7D,GAAA,WACA,OAAA58D,OAAAomD,EAAA,cAAApmD,CAAA28D,IACAx9C,MAAA,SClBA09C,GAAA,OACAC,GAAA,OACAC,IAAA,OACAC,GAAA,OACAC,GAAAJ,GACAK,GAAA,EAAAJ,GACAK,GAAA,EAAAJ,GACAK,GAAA,EAAAJ,GAGA,SAAAK,GAAAh3D,EAAAC,GACA,IAAA+Z,EAAA/Z,IACA,OACAD,EACAC,GAAAu2D,GAAAx8C,KAAAy8C,GAAAz8C,GAAA08C,GAAAC,GAAA38C,MAIAg9C,GAAAlxD,OAAA,SAAAxK,EAAAL,GACAA,EAXA,YAWAA,EAXA,YAYAA,GAZA,cAYAA,GAZA,aAaA,IAAA2H,EAAAq0D,EAAAh8D,EAEA,GACA,IAAAkf,EAAA88C,IACAA,GAAAr0D,GAAAq0D,GAAAT,GAAAr8C,KAAAs8C,GAAAt8C,GAAAu8C,GAAAC,GAAAx8C,KAAAlf,IAAA27D,GAAAz8C,KAAA08C,GAAA18C,GAAA28C,GAAAC,GAAA58C,WACGje,EAAA0G,GAAA+7C,GAEH,OAAArjD,EAAA27D,IAGA,IAAAC,GAAA,WACA,OAAAv9D,OAAAomD,EAAA,cAAApmD,CAAAq9D,IACAl+C,MAAA,UCpCA,SAAAq+C,GAAAn3D,EAAAC,GACA,GAAA/D,EAAA+D,GAAA0+C,EAAA,OAAA3+C,EAAA,GACA,IAAAiiD,EAAAllD,EAAAkD,GACAM,EAAAP,EAAArD,EAAAsD,GACA,OACAtD,EAAA4D,GAAA0hD,EACAhiD,GAAA,EAAA5D,EAAAkE,IAAA0hD,GAIAkV,GAAArxD,OAAA,SAAAxK,EAAAL,GACA,GAAAiB,EAAAjB,GAAA0jD,EAAA,OAAArjD,EAAA,GACA,IAEAsH,EAFArC,EAAAjF,IAAAL,IACAgF,EAAA,GAAAhF,EACAhC,EAAA,GACA,GACA,IAAAgpD,EAAAllD,EAAAkD,GACAosD,EAAA,EAAAhwD,EAAA4D,GACAqK,EAAA/J,EAAA,EAAAtF,EAAAgF,MACAA,GAAA2C,GAAAq/C,EAAA33C,EAAA,GAAArK,EAAAhF,KAAA,EAAAqP,EAAA+hD,IAAA,GAAApsD,EAAAhF,GAAAgnD,SACG/lD,EAAA0G,GAAA+7C,KAAA1lD,EAAA,GAEH,OADAgpD,EAAAllD,EAAAkD,KAEA/D,EAAAjB,GAAAiB,EAAA+D,EAAA,EAAAgiD,GAAAhlD,EAAA3B,EAAA2mD,GAAAplD,EAAAvB,IAAA0B,EAAAd,EAAAZ,EAAA2mD,IAAApmD,IAAAc,EAAAsD,GACAA,IAIA,IAAAm3D,GAAA,WACA,OAAAz9D,OAAAomD,EAAA,cAAApmD,CAAAw9D,IACAr+C,MAAA,qBCzBA1d,EAAAC,GACA,IAAAmF,EAAA62D,GAAAj8D,EAAA,GAAAA,EAAA,IACAqF,EAAA42D,GAAAh8D,EAAA,GAAAA,EAAA,IACA4E,EAkDA,SAAA7E,EAAAC,GACA,OAAAe,EAAAhB,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,IAnDAi8D,CAAA92D,EAAAC,GACAhG,EAAA88D,GAAA/2D,GAAA+2D,GAAA92D,GAEA,OAAA+2D,IACA,IAAAp8D,EAAA,MACA,IAAAA,EAAA,OACAo8D,IACA/8D,EAAA,IACA,EAAAA,EAAA,GACA+8D,IACAn7D,EAAA4D,GAAAtD,EAAAsD,GAAA,GACAtD,EAAAsD,GAAA5D,EAAA4D,GAAA,IAEA,KAAA5E,EAAA,MACA,KAAAA,EAAA,WAcA,SAAAm8D,GAAAp8D,EAAAC,GACA,OACAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GACAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GACAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GACAA,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GACAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GACAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,IAKA,SAAAi8D,GAAAj8D,EAAAC,GACA,OAAAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,IAIA,SAAAk8D,GAAA92D,GACA,OAAA3D,EAAA2D,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,oBC/CAg3D,EAAAC,EAAA19D,GAiCA,SAAA8M,EAAA9G,EAAAC,GACA,IAEAlF,EAFA48D,EAAAD,EAAA13D,EAAAC,GACA/B,EAAAy5D,EAAAh+C,SAAA3Z,EAAAhE,EAAAiE,EAAAjE,IAEA,OAAAjB,EAAA48D,EAAAj8C,YAEA3gB,EAAA,GAAAmD,EAAA,GAAAnD,EAAA,GAAAmD,EAAA,GAAAnD,EAAA,KACAA,EAAA,GAAAmD,EAAA,GAAAnD,EAAA,GAAAmD,EAAA,GAAAnD,EAAA,MAGAmD,EAAA,IAAAA,EAAA,GACAA,IAxCA,SAAA05D,EAAAD,EAAAtxC,GACAsxC,EAAAE,MAqJA,SAAAH,GAGA,IAFA,IAAAx9D,EAAAw9D,EAAA75D,OACAg6D,KACAz8D,EAAAs8D,EAAAx9D,EAAA,GAAAjB,EAAA,EAAkCA,EAAAiB,IAAOjB,EAAA4+D,EAAAt1D,MAAAnH,IAAAs8D,EAAAz+D,KACzC,OAAA4+D,EAzJAC,CAAAH,EAAAD,MAEA,GAAArxC,EAAAqxC,KAAA,CACA,IAAAK,EAAAJ,EAAAI,OAmIA,SAAA38D,EAAAC,GAEA,IADA,IAAAC,EAAAL,EAAAf,EAAAkB,EAAAyC,OAAAm6D,EAAA,KACA/+D,EAAA,EAAiBA,EAAAiB,IAAOjB,EAAA,CACxBqC,EAAAF,EAAAnC,GACA,QAAAqR,EAAAjP,EAAAwC,SAA0ByM,GAAA,GAE1B,GADArP,EAAAI,EAAAiP,GACAhP,EAAA,KAAAL,EAAA,IAAAK,EAAA,KAAAL,EAAA,IACA,GAAA+8D,EAAA,OAAAA,EAAA18D,GACA08D,EAAA18D,IA3IA28D,CAAAN,EAAAD,KAAArxC,EAAAqxC,MACAr+D,EAAAwsB,GAAAkyC,EAAApmD,IAAA0U,EAAA1M,SAAAo+C,EAAApmD,IAAAgmD,EAAAh+C,UACAg+C,EAAAj8C,UAAA2K,EAAA3K,UAAA87C,GAAAnxC,EAAA3K,UAAAriB,KAGA,IADA,IAAAw+D,EAAAxxC,EAAAwxC,MACA5+D,EAAA,EAAAiB,EAAA29D,EAAAh6D,OAAuC5E,EAAAiB,IAAOjB,EAC9Ci/D,GAAAH,EAAA,GAAAF,EAAA5+D,GAAA,KAAAi/D,GAAAH,EAAA,GAAAF,EAAA5+D,GAAA,MAAA4+D,EAAA5+D,GAAA0+D,GACAO,GAAAH,EAAA,GAAAF,EAAA5+D,GAAA,KAAAi/D,GAAAH,EAAA,GAAAF,EAAA5+D,GAAA,MAAA4+D,EAAA5+D,GAAA0+D,GAGA,IADAE,EAAAF,EAAAE,MACA5+D,EAAA,EAAAiB,EAAA29D,EAAAh6D,OAAmC5E,EAAAiB,IAAOjB,EAC1Ci/D,GAAAH,EAAA,GAAAF,EAAA5+D,GAAA,KAAAi/D,GAAAH,EAAA,GAAAF,EAAA5+D,GAAA,MAAA4+D,EAAA5+D,GAAAotB,GACA6xC,GAAAH,EAAA,GAAAF,EAAA5+D,GAAA,KAAAi/D,GAAAH,EAAA,GAAAF,EAAA5+D,GAAA,MAAA4+D,EAAA5+D,GAAAotB,QAGAsxC,EAAAj8C,UAAA2K,EAAA3K,UAEAi8C,EAAAQ,UACAR,EAAAQ,SAAA/uD,QAAA,SAAAgvD,GACAR,EAAAQ,EAAAT,KAGA,OAAAA,EA5BAC,CAAAH,GAAiB/7C,UAAA,OA+CjB28C,GAAAZ,KAAA3wD,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,IAAAgD,EAIA,SAAAq6D,EAAAX,EAAA15D,GACA,IAAA6H,EAAA6xD,EAAAh+C,QAAA7T,OACA/K,EAAA48D,EAAAj8C,UACAxd,EAAAD,EACAlD,IDrCAwF,EAAA,IADAlH,ECuCA0B,GDtCA,GAAA1B,EAAA,GAAAA,EAAA,GAAAA,EAAA,ICsCA0B,GDpCAwF,EAAAlH,EAAA,IAAAkH,EAAAlH,EAAA,GAAAkH,GAAAlH,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAkH,EAAAlH,EAAA,GAAAkH,EAAAlH,EAAA,GAAAkH,GAAAlH,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KCoCA6E,GACAnD,EAAA,GAAAmD,EAAA,GAAAnD,EAAA,GAAAmD,EAAA,GAAAnD,EAAA,GACAA,EAAA,GAAAmD,EAAA,GAAAnD,EAAA,GAAAmD,EAAA,GAAAnD,EAAA,KD1CA,IAAA1B,EACAkH,EC4CA,GAAAuF,GAAA6xD,IAQA,SAAA15D,GACA,OAAAy5D,EAAAz5D,EAAA,GAAAhC,EAAAgC,EAAA,GAAAhC,GATAs8D,CAAA/9D,EAAAsL,EAAA5H,IAAA,OAAA1D,EACA,IAAAA,EACA29D,EAAAR,EAAAQ,SACA,QAAAl/D,EAAA,EAAAiB,EAAAi+D,KAAAt6D,OAAoD5E,EAAAiB,IAAOjB,EAC3D,GAAAuB,EAAA89D,EAAAH,EAAAl/D,GAAAgF,GAAA,OAAAzD,EAnBA89D,CAAAb,GAAAn8D,GAAAL,IACA,OAAAgD,MAAA,IAAAhC,EAAAgC,EAAA,IAAAhC,EAAAgC,KA0BA,IAAAu6D,EAAA7+D,OAAAomD,EAAA,cAAApmD,CAAAmN,GACA86C,EAAA4W,EAAAl7D,OAiBA,OAfAk7D,EAAAl7D,OAAA,SAAAA,GACA,IAAAuJ,EAAA2xD,EAAA3xD,SACAi7C,EAAAF,EAAAtkD,GACAykD,GAAAyW,EAAA3xD,QAAA,MAAA+6C,EAAAtkD,IASA,OARAk7D,EAAA3xD,UACAi7C,EAAA/jD,OAAA,WACAgkD,EAAA/iD,eACA+iD,EAAAjjD,YAWA,SAAA25D,EAAAn7D,EAAAq6D,EAAAtxC,GACA,IAAAnoB,EAGAw6D,EAFAb,EAAAF,EAAAE,MACA39D,EAAA29D,EAAAh6D,OAEA86D,GAAoBn7D,KAAA,aAAAS,YAAA05D,EAAAD,MACpBkB,EAAAjB,EAAAD,KAAA5rD,OAAA,SAAAvS,GAA+C,YAAA2C,EAAA3C,EAAA,MAC/C8B,EAAA1B,OAAAomD,EAAA,UAAApmD,EAAkB6D,KAAA,aAAAS,YAAA26D,IAClBC,GAAA,EACAvuD,GAAA,EACAiE,EAAAlT,EAAA,MAAAA,EAAA,MAEA,IAAA/B,EAAA,MAAAiV,GAAA,MAAAA,IACAlT,EAAA,MAAAA,EAAA,UAAAA,EAAA,MAAAA,EAAA,UACA1B,OAAAomD,EAAA,YAAApmD,CAAAg/D,GAEA,GAAAtyC,EAAA,OAAA/b,EAAApQ,GACA29D,EAAAvtD,KAAA+b,MAEA/b,EACA,QAAArR,EAAA,EAAiBA,EAAAiB,IAAOjB,EACxBy/D,EAAAb,GAAA5+D,EAAAqR,GAAApQ,GACAynB,MAAA0C,QAAAq0C,IACAG,IACAv7D,EAAAY,SAAAvE,OAAAomD,EAAA,eAAApmD,CAAA++D,EAAA,GAAAp/D,EAAAK,CAAAglD,IAAA,GAAAzgD,EAAA,IACA26D,GAAA,GAEAv7D,EAAAY,SAAAvE,OAAAomD,EAAA,eAAApmD,CAAA++D,EAAA,GAAAp/D,EAAAK,CAAAglD,IAAA,GAAAzgD,EAAA,MAEA26D,GAAA,EACAH,IAAAryC,GAAAoyC,EAAAn7D,EAAAo7D,EAAAf,IAxCAc,CAAA1W,EAAA0V,GACA1V,EAAAhjD,UACAgjD,EAAA9iD,cAEA6iD,GAGA0W,EAAAxuD,MAAA,MAAAhQ,GAAA,GAAAA,EAAAgC,IAuCA,SAAAk8D,GAAA98D,EAAAC,GACA,OAAAD,GAAAC,GAAAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,GA0BA,SAAAg9D,GAAAV,GACA,OAAAA,EAAAh+C,QAAA7T,QAAA6xD,EAAAQ,UAAAR,EAAAQ,SAAAW,KAAAT,IC3KA,IAAAU,KACA,QACA,4BACA,QAGAC,KACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACArnD,IAAA,SAAA+lD,GACA,OAAAA,EAAA/lD,IAAA,SAAA1Y,GACA,OAAA8/D,GAAA9/D,OCbAggE,GAAA,SAAAC,GAEAA,KAAA,SAAAxB,GACA,IAAAp+D,EAAAK,OAAAomD,EAAA,YAAApmD,EAAsB6D,KAAA,aAAAS,YAAAy5D,IACtB,OAAA/9D,OAAAomD,EAAA,YAAApmD,GAAAmf,MAAA,GAAAC,WAAA,MAAAlS,SAAAvN,EAAA,IAAAA,EAAA,MAGA,IAAA6/D,EAAAH,GAAArnD,IAAA,SAAA+lD,GACA,OAAYA,OAAA/9C,QAAAu/C,EAAAxB,MAQZ,QALA,iBAAAtuD,QAAA,SAAA7P,EAAAN,GACA,IAAA0+D,EAAAwB,EAAA5/D,GACAo+D,MAAAQ,WAAAR,EAAAQ,cAAA51D,KAAA42D,EAAAlgE,MAGAmgE,GAAAD,EAAA,YAAAn5D,EAAAC,GACA,OAAAk5D,EAAAn5D,GAAAtE,EAAA,EAAAuE,EAAA,MACAD,EAAA,EAAAC,EAAA,MACAD,EAAAtE,EAAA,EAAAuE,EAAA,MACAA,EAAA,SAEA+J,OAAA,IACA8O,MAAA,SACApR,QAAA,QCvBA2xD,GAAA,EAAAv8D,EAAA,GAEA,SAAAw8D,GAAAl+D,EAAAC,GACA,IAAAb,EAAA2rD,GAAA/qD,EAAAC,GACA,OAAAb,EAAA,GAAA6+D,GAAA7+D,EAAA,IAGA8+D,GAAAxzD,OAAA,SAAAxK,EAAAL,GACA,OAAAkrD,GAAArgD,OAAAxK,EAAA+9D,GAAAp+D,IAGA,IAAAs+D,GAAA,SAAAL,GAEAA,KAAA,SAAAxB,GACA,IAAAp+D,EAAAK,OAAAomD,EAAA,YAAApmD,EAAsB6D,KAAA,aAAAS,YAAAy5D,IACtB,OAAA/9D,OAAAomD,EAAA,cAAApmD,CAAA2/D,IAAAvgD,WAAA,MAAAD,MAAA,GAAAjS,OAAAvN,EAAA,OAAAA,EAAA,WAAAA,EAAA,UAGA,IAAA6/D,EAAAH,GAAArnD,IAAA,SAAA+lD,GACA,OAAYA,OAAA/9C,QAAAu/C,EAAAxB,MAQZ,QALA,iBAAAtuD,QAAA,SAAA7P,EAAAN,GACA,IAAA0+D,EAAAwB,EAAA5/D,GACAo+D,MAAAQ,WAAAR,EAAAQ,cAAA51D,KAAA42D,EAAAlgE,MAGAmgE,GAAAD,EAAA,YAAAn5D,EAAAC,GACA,OAAAk5D,EAAAn5D,GAAAtE,EAAA,EAAAuE,EAAA,MACAD,EAAA,EAAAC,EAAA,MACAD,EAAAtE,EAAA,EAAAuE,EAAA,MACAA,EAAA,SAEA+J,OAAA,IACA8O,MAAA,SACApR,QAAA,yBCpCAwxD,GAEAA,KAAA,SAAAxB,GACA,IAAAp+D,EAAA,IAAAo+D,EAAA75D,OAAAlE,OAAAomD,EAAA,YAAApmD,EAA0C6D,KAAA,aAAAS,YAAAy5D,IAAsCA,EAAA,GAChF,OAAA/9D,OAAAomD,EAAA,YAAApmD,GAAAmf,MAAA,GAAAC,WAAA,MAAAlS,SAAAvN,EAAA,IAAAA,EAAA,MAGA,IAAAkgE,EAAAR,GAAArnD,IAAA,SAAA+lD,GAMA,IALA,IAGAr8D,EAHAo+D,EAAA/B,EAAA/lD,IAAA+nD,IACAx/D,EAAAu/D,EAAA57D,OACAzC,EAAAq+D,EAAAv/D,EAAA,GAEAy/D,KACA1gE,EAAA,EAAmBA,EAAAiB,IAAOjB,EAC1BoC,EAAAo+D,EAAAxgE,GACA0gE,EAAAp3D,KAAAq3D,IACA,kBAAAx+D,EAAA,sBAAAC,EAAA,GACA,kBAAAD,EAAA,sBAAAC,EAAA,GACA,kBAAAD,EAAA,sBAAAC,EAAA,KACAu+D,IACA,kBAAAv+D,EAAA,sBAAAD,EAAA,GACA,kBAAAC,EAAA,sBAAAD,EAAA,GACA,kBAAAC,EAAA,sBAAAD,EAAA,MAEAA,EAAAC,EAEA,OAAAs+D,IAGAE,KAEAC,IAAA,iBAEAN,EAAApwD,QAAA,SAAAuwD,EAAArvD,GAIA,IAHA,IAyDAlP,EAAAC,EAzDAq8D,EAAAsB,GAAA1uD,GACApQ,EAAAw9D,EAAA75D,OACAk8D,EAAAF,EAAAvvD,MACArR,EAAA,EAAmBA,EAAAiB,IAAOjB,EAC1BugE,EAAAj3D,MACAm1D,EAAAz+D,GACA0gE,GAAA,EAAA1gE,EAAA,MAAAiB,IACAy/D,GAAA,EAAA1gE,EAAA,MAAAiB,MAEA4/D,EAAAv3D,KAAA+H,GACAyvD,EAAAx3D,MA+CAnH,EA9CAs+D,GAAAC,GAAA,EAAA1gE,EAAA,MAAAiB,KA8CAmB,EA7CAq+D,GAAAC,GAAA,EAAA1gE,EAAA,MAAAiB,MA+CAkB,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GACAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GACAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,QA5CA,IAAA89D,EAAAK,EAAA7nD,IAAA,SAAA+lD,GACA,OACA/9C,QAAAu/C,EAAAxB,GACAA,UA0BA,OAtBAoC,EAAA1wD,QAAA,SAAA7P,EAAAN,GACA,IAAAotB,EAAA8yC,EAAA5/D,GACA8sB,MAAA8xC,WAAA9xC,EAAA8xC,cAAA51D,KAAA42D,EAAAlgE,MAoBAmgE,GAAAD,EAAA,GAjBA,SAAAn5D,EAAAC,GACA,IAAA+5D,EAAA39D,EAAA4D,GACAzF,GAAAw/D,EAAA39D,EAAA2D,GAAAg6D,EAAAr9D,EAAAqD,GAAArD,EAAAsD,IAEA05D,EAAA35D,GAAAtE,EAAA,EAAAuE,EAAA,MACAD,EAAA,EAAAC,EAAA,MACAD,EAAAtE,EAAA,EAAAuE,EAAA,MACAA,EAAA,MAEA/F,EAAA2/D,EAAAF,GAEA,OAAAR,EAAAc,GAAA//D,EAAA,GAAAM,GAAA,MAAAm/D,EACAM,GAAA//D,EAAA,GAAAM,GAAA,MAAAm/D,EAAA,EACAM,GAAA//D,EAAA,GAAAM,GAAA,MAAAm/D,EAAA,EACAA,KAIA3vD,OAAA,IACA8O,MAAA,SACApR,QAAA,QAGA,SAAAuyD,GAAA7+D,EAAAC,GACA,QAAApC,EAAA,EAAAiB,EAAAkB,EAAAyC,OAAApD,EAAA,EAAsCxB,EAAAiB,IAAOjB,EAAAwB,GAAAW,EAAAnC,GAAAoC,EAAApC,GAC7C,OAAAwB,EAYA,SAAAm/D,GAAAh5D,GACA,OACAxE,EAAAwE,EAAA,GAAAA,EAAA,IAAA5E,EACAiB,EAAAgT,GAAA,EAAAC,EAAA,EAAAtP,EAAA,MAAA5E,GAKA,SAAA09D,GAAAz7D,GACA,IAAA+B,EAAA/B,EAAA,GAAAhC,EACAgE,EAAAhC,EAAA,GAAAhC,EACA+9D,EAAA39D,EAAA4D,GACA,OACA+5D,EAAA39D,EAAA2D,GACAg6D,EAAAr9D,EAAAqD,GACArD,EAAAsD,ICxHA,IAAA9C,GAAA,aCKA+8D,GAAA,SAAA9/D,EAAA8d,GACA,IAAAyB,EAAArc,EAAA4a,EAAA5a,OACA,IAAAA,EAAA,UAAAs+B,MAAA,sBACA,OAAAxhC,KAAAoD,MACA,cAAAmc,EAAAwgD,GAA6C,MAC7C,wBAAAxgD,EAAAygD,GAAiE,MACjE,QAAAzgD,EAAA0gD,GAEA,OAAA1gD,EAAAvf,EAAAkD,IAGA,SAAA88D,GAAA1gE,EAAA4D,GACA,OACAE,KAAA,oBACAI,SAAAlE,EAAAkE,SAAA+T,IAAA,SAAAmN,GACA,OAAAq7C,GAAAr7C,EAAAxhB,MAKA,SAAA68D,GAAAzgE,EAAA4D,GACA,OACAE,KAAA,UACA8zC,GAAA53C,EAAA43C,GACAC,WAAA73C,EAAA63C,WACAl0C,SAAAg9D,GAAA3gE,EAAA2D,SAAAC,IAaA,SAAA+8D,GAAA3gE,EAAA4D,GACA,IAAA5D,EAAA,YACA,0BAAAA,EAAA8D,KAAA,OAXA,SAAA9D,EAAA4D,GACA,OACAE,KAAA,qBACAmB,WAAAjF,EAAAiF,WAAAgT,IAAA,SAAAjY,GACA,OAAA2gE,GAAA3gE,EAAA4D,MAOAg9D,CAAA5gE,EAAA4D,GACA,IAAA4N,EACA,OAAAxR,EAAA8D,MACA,YACA,iBAAA0N,EAAAqvD,GAAwC,MACxC,iBACA,sBAAArvD,EAAAsvD,GAA4C,MAC5C,cACA,mBACA,aAAAtvD,EAAAuvD,GAAsC,MACtC,oBAGA,OADA9gE,OAAAomD,EAAA,UAAApmD,CAAAD,EAAA4D,EAAA4N,IACAA,EAAA3C,SAGA,IAAAmyD,MACAC,MAEAJ,IACAr8D,MAAA,SAAA5C,EAAAL,GACAy/D,GAAAn4D,MAAAjH,EAAAL,KAEAsN,OAAA,WACA,IAAAA,EAAAmyD,GAAA78D,OACA68D,GAAA78D,OAAA,GAA+BL,KAAA,QAAAS,YAAAy8D,GAAA,KACpBl9D,KAAA,aAAAS,YAAAy8D,IAFX,KAIA,OADAA,MACAnyD,IAIAiyD,IACA17D,UAAA3B,GACAe,MAAA,SAAA5C,EAAAL,GACAy/D,GAAAn4D,MAAAjH,EAAAL,KAEA8D,QAAA,WACA27D,GAAA78D,SAAA88D,GAAAp4D,KAAAm4D,YAEAnyD,OAAA,WACA,IAAAA,EAAAoyD,GAAA98D,OACA88D,GAAA98D,OAAA,GAA8BL,KAAA,aAAAS,YAAA08D,GAAA,KACnBn9D,KAAA,kBAAAS,YAAA08D,IAFX,KAIA,OADAA,MACApyD,IAIAkyD,IACAz7D,aAAA7B,GACA2B,UAAA3B,GACAe,MAAA,SAAA5C,EAAAL,GACAy/D,GAAAn4D,MAAAjH,EAAAL,KAEA8D,QAAA,WACA,IAAA7E,EAAAwgE,GAAA78D,OACA,GAAA3D,EAAA,CACA,GAAAwgE,GAAAn4D,KAAAm4D,GAAA,GAAA9nD,iBAAwC1Y,EAAA,GACxCygE,GAAAp4D,KAAAm4D,YAGAz7D,WAAA9B,GACAoL,OAAA,WACA,IAAAoyD,GAAA98D,OAAA,YACA,IAAAm1C,KACA4nB,KAoBA,OAjBAD,GAAAvxD,QAAA,SAAA3B,IClHA,SAAAA,GACA,IAAAvN,EAAAuN,EAAA5J,QAAA,WAIA,IAHA,IACA3D,EADAjB,EAAA,EAEAsb,EAAA9M,EAAAvN,EAAA,MAAAuN,EAAA,MAAAA,EAAAvN,EAAA,MAAAuN,EAAA,QACAxO,EAAAiB,GAAAqa,GAAA9M,EAAAxO,EAAA,MAAAwO,EAAAxO,GAAA,GAAAwO,EAAAxO,EAAA,MAAAwO,EAAAxO,GAAA,GACA,OAAAsb,GAAA,ED6GAsmD,CAAApzD,GACAmzD,EAAAr4D,KAAAkF,GADAurC,EAAAzwC,MAAAkF,MAIAmzD,EAAAxxD,QAAA,SAAA0xD,GACA,IAAA58D,EAAA48D,EAAA,GACA9nB,EAAA8lB,KAAA,SAAA/uD,GACA,GE1HA,SAAAtC,EAAAvJ,GAIA,IAHA,IAAA5C,EAAA4C,EAAA,GACAjD,EAAAiD,EAAA,GACA4T,GAAA,EACA7Y,EAAA,EAAAiB,EAAAuN,EAAA5J,OAAAyM,EAAApQ,EAAA,EAA6CjB,EAAAiB,EAAOoQ,EAAArR,IAAA,CACpD,IAAAyC,EAAA+L,EAAAxO,GAAAssB,EAAA7pB,EAAA,GAAAq/D,EAAAr/D,EAAA,GACAs/D,EAAAvzD,EAAA6C,GAAAkb,EAAAw1C,EAAA,GAAAC,EAAAD,EAAA,GACAD,EAAA9/D,EAAAggE,EAAAhgE,GAAAK,GAAAkqB,EAAAD,IAAAtqB,EAAA8/D,IAAAE,EAAAF,GAAAx1C,IAAAzT,MAEA,OAAAA,EFiHAA,CAAA/H,EAAA,GAAA7L,GAEA,OADA6L,EAAAxH,KAAAu4D,IACA,KAEO9nB,EAAAzwC,MAAAu4D,MAGPH,MAEA3nB,EAAAn1C,OACAm1C,EAAAn1C,OAAA,GAAiCL,KAAA,eAAAS,YAAA+0C,IACtBx1C,KAAA,UAAAS,YAAA+0C,EAAA,IAFX,OGhIAkoB,GAAA,SAAAvhD,GACA,IAAApL,EAAAoL,EAAA9d,EAAA,MAAA8d,GAAA9d,EAAA,MAEA,SAAAs/D,EAAAn7D,EAAAC,GACA,IAAAlF,EAAAmB,EAAA8D,GAAAnE,EACArB,EAAAmf,EAAA5e,EAAAiF,IAAA,EAAAA,EAAAtE,EAAAsE,EAAAtE,EAAAuE,GACA3E,GAAAd,EAAA,GAAAA,EAAA,IAAAqkD,EACA5jD,GAAAT,EAAA,GAAAA,EAAA,IAAAqkD,EACA,GAAA9jD,EAAA,OAAAO,EAAAL,GACA,IAAA1B,EAAAgV,EAAAswC,EACApkD,EAAAa,EAAA,EAAAL,EAAA,OACA,OAAAR,EAAAa,EAAAuB,EAAA5B,GAAA1B,EAAAkB,EAAAQ,EAAA4B,EAAAvB,GAAA/B,GAsBA,OAnBAogB,EAAA7T,SAAAq1D,EAAAr1D,OAAA,SAAAmI,EAAAC,GACA,IAAA5S,GAAA2S,EAAAC,GAAA2wC,EACA5jD,GAAAiT,EAAAD,GAAA4wC,EACA9jD,EAAAmB,EAAAZ,GAAA,GAAAiT,GAAArS,EAAAjB,GAAA,GAAAsT,EAEA,IAAAxT,EAAA,CACA,IAAAxB,EAAAgV,EAAAswC,EACApkD,EAAAa,EAAA,EAAAL,EAAA,OACAkT,GAAA1T,EAAAwT,GAAAhT,EAAA,QAAA1B,EACA6U,GAAA3T,EAAAyT,GAAA5S,EAAA,QAAA/B,EACA+B,IAAA6S,EAAAC,GAAAywC,EACA5jD,GAAAkT,EAAAC,GAAAywC,EAGA,IAAArkD,EAAAmf,EAAA7T,OAAAxK,EAAAL,GAEA,OADAF,IAAAP,EAAA,IAAAc,EAAA,EAAAI,MACAlB,IAGAb,OAAAomD,EAAA,cAAApmD,CAAAwhE,GACAt0D,SAAA,YACA2V,UAAA,UCnCA4+C,GAAA,WACA,OAAAF,GAAAjP,IACAnzC,MAAA,UCFAuiD,GAAA,WACA,OAAAH,GAAA7N,IACAv0C,MAAA,SCLAuhB,GAAA,SAAAsG,EAAA26B,GACA,SAAAA,UAAA,cAAA1/B,MAAA,kBAEA,SAAAoY,EAAArT,GACA,IAAAzmC,EAAAymC,EAAA9iC,OAAA5E,EAAA,EAAAynC,EAAA,IAAA/e,MAAAznB,GAGA,IAFAwmC,EAAA,IAAAC,EAAA,GAAAtF,QAAAigC,GACA56B,EAAA,IAAAC,EAAA,GAAAtF,QAAAigC,GACAriE,EAAAiB,GAAAwmC,EAAAznC,GAAA0nC,EAAA1nC,OACA,OAAAynC,EAGA,SAAA66B,EAAA56B,GACA,OAAAA,EAAAhvB,IAAAqiC,GAGA,SAAAwnB,EAAA76B,GACA,OAAAA,EAAAhvB,IAAA4pD,GAGA,SAAAtnB,EAAAtT,GACA,SAAAA,EAAA,OAAAA,EACA,IAAAD,EACA,OAAAC,EAAAnjC,MACA,yBAAAkjC,GAA2CljC,KAAA,qBAAAmB,WAAAgiC,EAAAhiC,WAAAgT,IAAAsiC,IAAgF,MAC3H,YAAAvT,GAA8BljC,KAAA,QAAAS,YAAA+1C,EAAArT,EAAA1iC,cAA8D,MAC5F,kCAAAyiC,GAAsDljC,KAAAmjC,EAAAnjC,KAAAS,YAAAs9D,EAAA56B,EAAA1iC,cAAkE,MACxH,oCAAAyiC,GAAwDljC,KAAAmjC,EAAAnjC,KAAAS,YAAAu9D,EAAA76B,EAAA1iC,cAAmE,MAC3H,mBAAAyiC,GAAqCljC,KAAA,eAAAS,YAAA0iC,EAAA1iC,YAAA0T,IAAA6pD,IAA2E,MAChH,eAAA76B,EAGA,OADA,MAAAA,EAAAoQ,OAAArQ,EAAAqQ,KAAApQ,EAAAoQ,MACArQ,EAGA,SAAA+6B,EAAA96B,GACA,IAAAD,GAAkBljC,KAAA,UAAA+zC,WAAA5Q,EAAA4Q,WAAAl0C,SAAA42C,EAAAtT,EAAAtjC,WAGlB,OAFA,MAAAsjC,EAAA2Q,KAAA5Q,EAAA4Q,GAAA3Q,EAAA2Q,IACA,MAAA3Q,EAAAoQ,OAAArQ,EAAAqQ,KAAApQ,EAAAoQ,MACArQ,EAGA,SAAAC,EAAA,OAAAA,EAAAnjC,MACA,qBAAAi+D,EAAA96B,GACA,wBACA,IAAAD,GAAoBljC,KAAA,oBAAAI,SAAA+iC,EAAA/iC,SAAA+T,IAAA8pD,IAEpB,OADA,MAAA96B,EAAAoQ,OAAArQ,EAAAqQ,KAAApQ,EAAAoQ,MACArQ,EAEA,eAAAuT,EAAAtT,GAGA,OAAAA,GChDA,SAAA+6B,GAAAvxD,GACA,IAAAC,EAAAzN,EAAAwN,GAEA,SAAArD,EAAA9G,EAAAC,GACA,IAAAoN,EAAAjD,EAAArN,EAAAiD,EAAAoK,EAAA,GAAAA,EAAApK,EAAA,EACA,IAAAC,EAAA,SAAAoN,GAAAlD,GACA,IAAAy3B,EAAA,EAAAzlC,EAAAkR,EAAA1Q,EAAAsD,IACA07D,EAAA,EAAA5+D,EAAAkD,GACA,OACAtD,EAAAilC,GAAA+5B,EACA17D,GAAA,EAAA5D,EAAAulC,IAAA+5B,EAAAxxD,GAwBA,OAnBArD,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,GAAAiB,EAAAjB,GAAAkP,GAAAw0C,EAAA,OAAAv0C,EAAA,EAAAjO,EAAAiO,EAAA9O,EAAA,GAAA8O,EAAA9O,EAAA,GACA,IAEAsH,EAFArC,EAAAjF,IAAAL,IACAgF,EAAA,EACAhH,EAAA,GACA,GACA,IAAAgpD,EAAAllD,EAAAkD,GACAosD,EAAA,EAAAhwD,EAAA4D,GACAqK,EAAA/J,EAAA,EAAAtF,EAAAgF,MACAA,GAAA2C,GAAAq/C,EAAA33C,EAAA,GAAArK,EAAAhF,KAAA,EAAAqP,EAAA+hD,IAAA,GAAApsD,EAAAhF,GAAAgnD,SACK/lD,EAAA0G,GAAA+7C,KAAA1lD,EAAA,GACL,IAAA2oC,EAAAtmC,GAAA2mD,EAAAllD,EAAAkD,IACAoN,EAAAtQ,EAAAb,EAAAjB,GAAAiB,EAAA+D,EAAA,EAAAgiD,GAAA,GAAAhlD,EAAA2kC,GAAA,GAAA5kC,EAAA4kC,GAAAlmC,EAAA,GAAAiB,EAAAsD,GACA,OACAmK,EAAA,EAAAjO,EAAAiO,EAAAiD,GAAAjD,EAAA,EAAAiD,EACApN,IAIA6G,EAGA,IAAA80D,GAAA,WACA,OAAAtX,GAAAoX,IACA5iD,MAAA,UCvCA+iD,KACA,cACA,MACA,aACA,aACA,WACA,aACA,WACA,WACA,aACA,cACA,cACA,cACA,aACA,cACA,cACA,cACA,cACA,cACA,cACA,UAOA,SAAAC,GAAA97D,EAAAC,GACA,IASAM,EATAtH,EAAAiX,EAAA,MAAAhU,EAAA+D,GAAAvE,GACAsmB,EAAAvlB,EAAAxD,GACA8iE,EAAA9iE,EAAA+oB,EACA3T,GAAA9N,EAAAs7D,GAAA75C,IAAA,GACA1T,EAAA/N,EAAA,GACAy7D,GAAAz7D,EAAAs7D,KAAA75C,IAAA,GACAi6C,EAAA17D,EAAA,GACAkF,GAAAlF,EAAAs7D,GAAA3rD,EAAA,KAAA8R,KAAA,GACAtc,EAAAnF,EAAA,GAEA,OACAP,GAAAg8D,EAAAD,GAAAt2D,EAAA4I,GAAA,EAAA0tD,KAAAt2D,EAAA,EAAAu2D,EAAA3tD,GAAA,IACApO,EAAA,EAAApE,OAAAogE,EAAAF,GAAAr2D,EAAA4I,GAAA,EAAAytD,KAAAr2D,EAAA,EAAAu2D,EAAA3tD,GAAA,IAjBAutD,GAAAzyD,QAAA,SAAA7P,GACAA,EAAA,aAoBAuiE,GAAAh2D,OAAA,SAAAxK,EAAAL,GACA,IAAAihE,EAAAjhE,EAAAY,EACAoE,EAAA,GAAAi8D,EACAjjE,EAAAiX,EAAA,GAAAhU,EAAA+D,EAAA,IACA+hB,EAAA/R,EAAA,EAAAxT,EAAAxD,IACA,GACA,IAAAqV,EAAAutD,GAAA75C,GAAA,GACAi6C,EAAAJ,GAAA75C,EAAA,MACAtc,EAAAm2D,GAAA3rD,EAAA,GAAA8R,EAAA,OACAxhB,EAAAkF,EAAA4I,EACA7N,EAAAiF,EAAA,EAAAu2D,EAAA3tD,EACAvT,EAAA,GAAAmB,EAAAggE,GAAAD,GAAAz7D,EACAlH,EAAAmH,EAAAD,EACAu7D,EAAAhhE,GAAA,EAAAzB,EAAAyB,GAAA,IAAAzB,EAAAyB,IACA,GAAAghE,GAAA,OAAA/5C,EAAA,CACA/hB,GAAAhF,GAAA,SAAA8gE,EAAA9iE,GACA,IAAA2J,EAAA0H,EAAA,GACA,GAGAyxD,GAFA9iE,EAAAiX,EAAA,GAAAhU,EAAA+D,GAAA,KACA+hB,EAAAvlB,EAAAxD,IAEAqV,EAAAutD,GAAA75C,GAAA,GACAi6C,EAAAJ,GAAA75C,EAAA,MACAtc,EAAAm2D,GAAA3rD,EAAA,GAAA8R,EAAA,OACA/hB,IAAA2C,GAAA3H,GAAA,EAAAY,OAAAogE,EAAAF,GAAAr2D,EAAA4I,GAAA,EAAAytD,KAAAr2D,EAAA,EAAAu2D,EAAA3tD,GAAA,GAAArT,GAAAe,QACOE,EAAA0G,GAAAg8C,KAAAt0C,EAAA,GACP,eAEG0X,GAAA,GACH,IAAA3T,EAAAwtD,GAAA75C,GAAA,GACAg6C,EAAAH,GAAA75C,EAAA,MACAvc,EAAAo2D,GAAA3rD,EAAA,GAAA8R,EAAA,OACA,OACA1mB,GAAA0gE,EAAAD,GAAAt2D,EAAA4I,GAAA,EAAA0tD,KAAAt2D,EAAA,EAAAu2D,EAAA3tD,GAAA,GACApO,EAAAhE,IAIA,IAAAkgE,GAAA,WACA,OAAAxiE,OAAAomD,EAAA,cAAApmD,CAAAmiE,IACAhjD,MAAA,SC7DA,SAAAsjD,GAAAC,EAAApN,GACA,IAAAqN,EAxBA,SAAAD,GACA,SAAAv1D,EAAA9G,EAAAC,GACA,IAAAI,EAAAhE,EAAA4D,GACAM,GAAA87D,EAAA,IAAAA,EAAAh8D,EAAAhE,EAAA2D,IACA,OACAO,EAAAF,EAAA1D,EAAAqD,GACAO,EAAA5D,EAAAsD,IAcA,OAVA6G,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,IAAAwuD,EAAAnuD,IAAAL,IACA29B,EAAA97B,EAAA2sD,GACAoL,GAAAwH,EAAAv/D,EAAA,EAAA2sD,GAAA4S,EAAA,IAAAA,EAAA,OAAAA,EAAA,GAAAzjC,KAAAyjC,EAAA,IACA,OACAjgE,EAAAd,EAAAu5D,EAAAj8B,EAAA97B,EAAA,EAAA+3D,MACAj8B,EAAA37B,EAAAhC,EAAA45D,EAAAj8B,GAAA,IAIA9xB,EAIAy1D,CAAAF,GACA,IAAApN,EAAA,OAAAqN,EACA,IAAAE,EAAAngE,EAAA4yD,GACAwN,EAAA9/D,EAAAsyD,GAEA,SAAAnoD,EAAA9G,EAAAC,GACA,IAAAhC,EAAAq+D,EAAAt8D,EAAAC,GACAhF,EAAAgD,EAAA,GACAoP,EAAApS,EAAAwhE,GAAAJ,EAAA,GAAAG,EACA,OACAv+D,EAAA,GAAAu+D,EAAAnvD,EACApS,EAAAoS,GASA,OALAvG,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,IAAAsF,GAAA87D,EAAA,IAAAA,EAAA,EAAAphE,EAAAwhE,GACA,OAAAH,EAAAx2D,OAAAvF,EAAAjF,EAAAiF,EAAAtF,EAAAuhE,IAGA11D,oBAIA,IAAAqK,EAAA,EACA89C,EAAA,EACA51D,EAAAM,OAAAomD,EAAA,qBAAApmD,CAAAyiE,IACA5hE,EAAAnB,EAAA8X,EAAA89C,GAaA,OAVAz0D,EAAA2W,SAAA,SAAApJ,GACA,OAAAD,UAAAjK,OACAxE,EAAA8X,GAAApJ,EAAAknD,GADA99C,GAIA3W,EAAAkiE,KAAA,SAAA30D,GACA,OAAAD,UAAAjK,OACAxE,EAAA8X,EAAA89C,EAAAlnD,EAAA9L,GADAgzD,EAAAjzD,GAIAxB,EACAse,MAAA,SACA0D,UAAAxf,EAAA,EAAAmU,GAAAnV,EAAA,OCpEA2gE,GAAA,IACAC,IAAA,IAAAC,GAAAD,GAFA,KAGAE,GAAA,IAAAC,GAAAD,GAHA,KAIAE,IAAA,GAAAC,GAAAD,GAJA,KAKAE,GAAA,GAAAC,GAAAD,GALA,KAOA,SAAAE,GAAAn/D,GACA,OAAAA,EAAAJ,OAAA,EAOA,SAAAw/D,GAAApiE,GACA,OAAAA,IAAA+hE,IAAA/hE,IAAAiiE,IAAA,EAAAjiE,IAAA2hE,IALAthE,EAKAL,EAJAU,KAAAc,MAAAnB,EAAAqhE,SADA,IAAArhE,EAQA,SAAAgiE,GAAA9iE,GACA,IAAAc,EAAAd,EAAA,GAAAS,EAAAT,EAAA,GAAA+iE,GAAA,EAKA,OAJAjiE,GAAAuhE,IAAAvhE,EAAAshE,GAAAW,GAAA,GACAjiE,GAAAyhE,KAAAzhE,EAAAwhE,GAAAS,GAAA,GACAtiE,GAAAgiE,IAAAhiE,EAAA+hE,GAAAO,GAAA,GACAtiE,GAAAkiE,KAAAliE,EAAAiiE,GAAAK,GAAA,GACAA,GAAAjiE,EAAAL,GAAAT,EAGA,SAAAgjE,GAAA90D,GACA,OAAAA,EAAAiJ,IAAA2rD,IAIA,SAAAG,GAAAC,EAAA3zD,EAAA+nC,GACA,QAAAxnC,EAAA,EAAAjR,EAAAqkE,EAAA7/D,OAAmCyM,EAAAjR,IAAOiR,EAAA,CAC1C,IAAA7C,EAAAi2D,EAAApzD,GAAAsI,QAGAk/B,EAAAvvC,MAAoBk0B,OAAA,EAAA1sB,UAAAtC,SAEpB,QAAAxO,EAAA,EAAAiB,EAAAuN,EAAA5J,OAAoC5E,EAAAiB,IAAOjB,EAAA,CAC3C,IAAAiF,EAAAuJ,EAAAxO,GACAqC,EAAA4C,EAAA,GACAjD,EAAAiD,EAAA,GAGA,GAAA5C,GAAAuhE,IAAAvhE,GAAAyhE,IAAA9hE,GAAAgiE,IAAAhiE,GAAAkiE,GAAA,CACA11D,EAAAxO,GAAAqkE,GAAAp/D,GAGA,QAAAqC,EAAAtH,EAAA,EAA2BsH,EAAArG,IAAOqG,EAAA,CAClC,IAAAo9D,EAAAl2D,EAAAlH,GACAq9D,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACA,GAAAC,EAAAf,IAAAe,EAAAb,IAAAc,EAAAZ,IAAAY,EAAAV,GAAA,MAMA,GAAA58D,IAAAtH,EAAA,WAKA,GAAAA,EAAA,CACA,IAAA6kE,GAAgCrnC,OAAA,EAAA1sB,UAAAtC,OAAAmL,MAAA,EAAA3Z,EAAA,IAChC6kE,EAAAr2D,KAAAq2D,EAAAr2D,KAAA5J,OAAA,GAAAw/D,GAAApiE,GACA62C,IAAAj0C,OAAA,GAAAigE,OAKAhsB,EAAA1pC,MAIA,GAAA7H,GAAArG,EAAA,MAGA43C,EAAAvvC,MAAwBk0B,OAAA,EAAA1sB,UAAAtC,SAAAmL,MAAArS,EAAA,KACxBkH,EAAA,GAAA41D,GAAA51D,EAAA,OACAxO,GAAA,EACAiB,EAAAuN,EAAA5J,UAOA,SAAAkgE,GAAAjsB,GACA,IAAA74C,EAKA+kE,EACAv0D,EACAw0D,EACAlpC,EACAmpC,EATAhkE,EAAA43C,EAAAj0C,OAGA+zC,KACAC,KAQA,IAAA54C,EAAA,EAAaA,EAAAiB,IAAOjB,EAEpBwQ,GADAu0D,EAAAlsB,EAAA74C,IACAwO,KAAA,GACAstB,EAAAipC,EAAAv2D,KAAAu2D,EAAAv2D,KAAA5J,OAAA,GAGA4L,EAAA,KAAAsrB,EAAA,IAAAtrB,EAAA,KAAAsrB,EAAA,IAMAipC,EAAAvnC,MAAAx9B,EACA24C,EAAAnoC,GAAAooC,EAAA9c,GAAAipC,IANAA,EAAAj0D,QAAAxH,KAAAy7D,EAAAv2D,MACAqqC,EAAA74C,GAAA,MASA,IAAAA,EAAA,EAAaA,EAAAiB,IAAOjB,EAEpB,GADA+kE,EAAAlsB,EAAA74C,GACA,CAUA,GATAwQ,EAAAu0D,EAAAv2D,KAAA,GACAstB,EAAAipC,EAAAv2D,KAAAu2D,EAAAv2D,KAAA5J,OAAA,GACAogE,EAAApsB,EAAApoC,GACAy0D,EAAAtsB,EAAA7c,UAEA6c,EAAAnoC,UACAooC,EAAA9c,GAGAtrB,EAAA,KAAAsrB,EAAA,IAAAtrB,EAAA,KAAAsrB,EAAA,IACAipC,EAAAj0D,QAAAxH,KAAAy7D,EAAAv2D,MACA,SAGAw2D,UACApsB,EAAApoC,UACAmoC,EAAAqsB,EAAAx2D,KAAA,IACAw2D,EAAAx2D,KAAAW,MACA0pC,EAAAmsB,EAAAxnC,OAAA,KACAunC,GAAoBvnC,OAAA,EAAA1sB,QAAAk0D,EAAAl0D,QAAAtC,KAAAw2D,EAAAx2D,KAAAY,OAAA21D,EAAAv2D,OAEpBw2D,IAAAC,EAEAF,EAAAj0D,QAAAxH,KAAAy7D,EAAAv2D,OAEAu2D,EAAAvnC,MAAAv8B,IACA43C,EAAAvvC,KAAAqvC,EAAAosB,EAAAv2D,KAAA,IAAAoqC,EAAAmsB,EAAAv2D,KAAAu2D,EAAAv2D,KAAA5J,OAAA,IAAAmgE,KAEOE,UACPtsB,EAAA7c,UACA8c,EAAAqsB,EAAAz2D,KAAAy2D,EAAAz2D,KAAA5J,OAAA,IACAmgE,EAAAv2D,KAAAW,MACA41D,GAAoBvnC,MAAAv8B,IAAA6P,QAAAm0D,EAAAn0D,QAAAtC,KAAAu2D,EAAAv2D,KAAAY,OAAA61D,EAAAz2D,OACpBqqC,EAAAosB,EAAAznC,OAAA,KACAqb,EAAAvvC,KAAAqvC,EAAAosB,EAAAv2D,KAAA,IAAAoqC,EAAAmsB,EAAAv2D,KAAAu2D,EAAAv2D,KAAA5J,OAAA,IAAAmgE,KAEAA,EAAAv2D,KAAAlF,KAAAy7D,EAAAv2D,KAAA,IACAu2D,EAAAj0D,QAAAxH,KAAAy7D,EAAAv2D,QAMA,SAAA02D,GAAAx9B,GACA,IAAAD,GAAgBljC,KAAA,UAAAH,SAAA+gE,GAAAz9B,EAAAtjC,WAIhB,OAHA,MAAAsjC,EAAA2Q,KAAA5Q,EAAA4Q,GAAA3Q,EAAA2Q,IACA,MAAA3Q,EAAAoQ,OAAArQ,EAAAqQ,KAAApQ,EAAAoQ,MACA,MAAApQ,EAAA4Q,aAAA7Q,EAAA6Q,WAAA5Q,EAAA4Q,YACA7Q,EAGA,SAAA09B,GAAAz9B,GACA,SAAAA,EAAA,OAAAA,EACA,IAAAD,EAAAoR,EAAA74C,EAAAiB,EACA,OAAAymC,EAAAnjC,MACA,yBAAAkjC,GAAyCljC,KAAA,qBAAAmB,WAAAgiC,EAAAhiC,WAAAgT,IAAAysD,KAA8E,MACvH,YAAA19B,GAA4BljC,KAAA,QAAAS,YAAAq/D,GAAA38B,EAAA1iC,cAA2D,MACvF,kCAAAyiC,GAAoDljC,KAAAmjC,EAAAnjC,KAAAS,YAAAu/D,GAAA78B,EAAA1iC,cAA+D,MACnH,sBAAAyiC,GAAsCljC,KAAA,kBAAAS,YAAA0iC,EAAA1iC,YAAA0T,IAAA6rD,KAA0E,MAChH,cACA,IAAAzzD,KACA0zD,GAAA98B,EAAA1iC,YAAA8L,EAAA+nC,MACAisB,GAAAjsB,GACApR,GAAgBljC,KAAA,UAAAS,YAAA8L,GAChB,MAEA,mBACA+nC,KAAA74C,GAAA,EAAAiB,EAAAymC,EAAA1iC,YAAAJ,OAEA,IADA,IAAAm1C,EAAA,IAAArxB,MAAAznB,KACAjB,EAAAiB,GAAAujE,GAAA98B,EAAA1iC,YAAAhF,GAAA+5C,EAAA/5C,MAAA64C,GACAisB,GAAAjsB,GACApR,GAAgBljC,KAAA,eAAAS,YAAA+0C,EAAAlnC,OAAAsxD,KAChB,MAEA,eAAAz8B,EAGA,OADA,MAAAA,EAAAoQ,OAAArQ,EAAAqQ,KAAApQ,EAAAoQ,MACArQ,EAGA,IAAAgR,GAAA,SAAA/Q,GACA,SAAAA,EAAA,OAAAA,EACA,OAAAA,EAAAnjC,MACA,qBAAA2gE,GAAAx9B,GACA,wBACA,IAAAD,GAAoBljC,KAAA,oBAAAI,SAAA+iC,EAAA/iC,SAAA+T,IAAAwsD,KAEpB,OADA,MAAAx9B,EAAAoQ,OAAArQ,EAAAqQ,KAAApQ,EAAAoQ,MACArQ,EAEA,eAAA09B,GAAAz9B,KCjNA,SAAA09B,GAAAr+D,EAAAC,GACA,IAAAlF,EAAAgC,EAAAkD,EAAA,GACAxF,EAAAkC,EAAAb,EAAAf,GACA,OACAiF,GAAA,cAAAvF,KACA,QAAAM,GAIAsjE,GAAAv4D,OAAA,SAAAxK,EAAAL,GACA,IAAAF,EAAAE,EAAA,QACAR,EAAAkC,EAAAb,EAAAf,GACA,OACAO,GAAA,cAAAb,KACA,EAAA0B,EAAApB,KAIA,IAAAujE,GAAA,WACA,OAAA3kE,OAAAomD,EAAA,cAAApmD,CAAA0kE,IACAvlD,MAAA,UCjBAylD,GAAA,SAAAC,EAAAl1D,EAAAC,GACA,IAAAtQ,EAAAU,OAAAomD,EAAA,eAAApmD,CAAA2P,EAAAC,GACA7P,EAAAT,EAAA,IACAmC,EAAAzB,OAAAomD,EAAA,YAAApmD,GAAAD,EAAA,IAAAA,EAAA,IAAAC,CAAA2P,GACAjO,EAAApC,EAAAkY,SAAA,EACAlW,GAAAgC,EAAAN,EAAAvB,EAAA,GAAAa,GAAAU,EAAAtB,IACA6qD,IAAAxsD,EAAA,IAAAA,EAAA,KAAA0B,EAAA,KAAAM,EAAAT,KAAAe,GACAxB,EAAAb,OAAAomD,EAAA,cAAApmD,CAAA6kE,EAAAnjE,IAAAwL,OAAAq/C,GACAlsD,EAAAL,OAAAomD,EAAA,YAAApmD,CAAAusD,GACAx+C,EAAAlN,EAAAkN,OAQA,cANAlN,EAAAqM,OAEArM,EAAAkN,OAAA,SAAAK,GACA,OAAAD,UAAAjK,OAAA6J,EAAA1N,EAAA+N,IAAA/N,EAAA8L,OAAA4B,MAGAlN,EACAgiB,UAAA,KCpBA,SAAAiiD,GAAAllE,GACA,IAAAmlE,EAAAriE,EAAA9C,GAEA,SAAAuN,EAAA9G,EAAAC,GACA,IAAAhC,EAAAtE,OAAAomD,EAAA,eAAApmD,CAAAqG,EAAAC,GAEA,OADAhC,EAAA,IAAAygE,EACAzgE,EAOA,OAJA6I,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,OAAA8kD,EAAA,eAAAj6C,OAAAxK,EAAAojE,EAAAzjE,IAGA6L,EAGA,SAAA63D,KACA,OAAAC,KAAA,oBACApiD,UAAA,IACA1D,MAAA,KAGA,SAAA8lD,GAAAt1D,EAAAC,GACA,OAAAg1D,GAAAE,GAAAn1D,EAAAC,GCtBA,SAAAs1D,GAAAC,GACA,KAAAA,GAAA,UAAA/e,EAAA,2BACA,IAAAgf,GAAAD,EAAA,EACAE,GAAAD,EACAE,EAAAH,IACAI,EAAAniE,EAAAiiE,GACAjmC,EAAA,GAAAp8B,EAAAqiE,GAEA,SAAAl4D,EAAA9G,EAAAC,GACA,IAAAk/D,EAAAniE,EAAAX,EAAA4D,GAAA5D,EAAA2D,EAAA++D,IACAK,EAAApiE,EAAAX,EAAA4D,GAAA5D,EAAA2D,EAAAg/D,IAGA,SADAG,OAAAC,QAEA,EAAAN,IAHA7+D,EAAA,QAIAnD,EAAA,EAAAmiE,EAAAG,GAAAH,EAAAE,EAAAC,IAAAH,EAAAE,EAAAC,KAAA,EAAAN,IAgBA,OAZAh4D,EAAAhB,OAAA,SAAAxK,EAAAL,GACA,IAGAF,EACAxB,EAJA4gB,EAAAlf,IACAokE,EAAAhjE,EAAAS,EAAAqd,GAAApf,EAAAO,EAAAyjE,GAAAhkE,IACAukE,EAAAjjE,EAAAS,EAAAqd,GAAApf,EAAAO,EAAA0jE,GAAAjkE,IAGA,OACAqB,EAAA7C,EAAA8lE,EAAAC,EAAAvkE,GAAAskE,EAAAC,GAAAJ,IACAjkE,EAAA,QAAA+B,EAAAF,EAAA/B,IAAAxB,KAAAw/B,KAIAjyB,EAGA,SAAAy4D,KACA,OAAAC,KAAA,oBACAhjD,UAAA,KACA1D,MAAA,SAGA,SAAA0mD,GAAAl2D,EAAAC,GACA,OAAAg1D,GAAAM,GAAAv1D,EAAAC,GC3CA,SAAAk2D,GAAAz/D,EAAAC,GACA,GAAA/D,EAAA+D,GAAA0+C,EAAA,OAAA3+C,EAAA,GACA,IAAAkvD,EAAAhzD,EAAA+D,EAAApE,GACAogB,EAAAhf,EAAAiyD,GACA,GAAAhzD,EAAA8D,GAAA2+C,GAAAziD,IAAA+D,GAAApE,GAAA8iD,EAAA,SAAA9hD,EAAAoD,GAAAvE,EAAAqB,EAAAkf,EAAA,IACA,IAAAkzC,EAAA9yD,EAAA4f,GACA5O,EAAAnR,EAAAR,EAAAsE,IAAAtE,GAAA,EACAgkE,EAAAryD,IACA2jD,EAAA7B,GAAAD,EAAAC,EAAA,GACAkN,EAAArL,GAAA,EAAA9B,EAAA,GACAyQ,EAAAtD,IACAuD,EAAAD,EAAAD,EACAG,EAAA7O,EAAA2O,EACA91B,EAAA61B,EAAA1O,EACA,OACAn0D,EAAAmD,GAAAtE,GAAA2R,EAAAwyD,EAAA/iE,EAAA4iE,EAAAG,IAAAD,GAAA5O,IAAA2O,KAAAC,EACA/iE,EAAAoD,GAAAvE,GAAA2gE,EAAAxyB,EAAAx8B,EAAAvQ,GAAA4iE,EAAA,GAAAE,EAAA/1B,MAAA+1B,GAIAH,GAAA35D,OAAA,SAAAxK,EAAAL,GACA,GAAAiB,EAAAjB,GAAA0jD,EAAA,OAAArjD,EAAA,GACA,GAAAY,EAAAZ,GAAAqjD,EAAA,SAAA9iD,EAAAc,EAAA,EAAAR,EAAAlB,EAAAS,KACA,IAAAwe,GAAA5e,GAAAI,GAAAJ,EACA6e,GAAAlf,GAAAS,GAAAT,EACA6kE,EAAA5lD,EAAAC,EACAhV,EAAA26D,IACA5yD,GAAAhR,EAAAjB,IAAA,EAAA6kE,GACA3yD,EAAAD,EAAA,EAAAiN,EAAAD,EACA6lD,GAAA,EAAA7yD,EAAA,IAAAiN,EAAAhV,EACA5L,EAAA4gB,EAAA4lD,GAAA,EAAA5yD,OAAA4yD,OAAA,EAAA7yD,EAAAC,GAAA4yD,MAAA,GACAnxD,GAAA1B,EAAAC,KAAA,EAAA4yD,MACApuC,EAAA,EAAA70B,GAAA8R,EAAA,GACAoxD,EAAAhjE,EAAA,EAAAzD,GAAAqV,EAAA+iB,IAAA,EACA,OACAj2B,GAAAokE,EAAA,EAAAhjE,EAAA,KAAAod,EAAAC,GAAAhV,KAAA,EAAA7J,GACAuB,EAAA5B,GAAAS,IAAAi2B,EAAAt1B,EAAA2jE,EAAAtkE,EAAA,GAAAyR,GAAA,EAAA4yD,MAIA,IAAAE,GAAA,WACA,OAAAtmE,OAAAomD,EAAA,cAAApmD,CAAA8lE,IACA3mD,MAAA,UC1CA,SAAAonD,GAAAlgE,EAAAC,GACA,GAAA/D,EAAA+D,GAAA0+C,EAAA,OAAA3+C,EAAA,GACA,IAAAkvD,EAAAhzD,EAAA+D,EAAApE,GACAogB,EAAAhf,EAAAiyD,GACA,GAAAhzD,EAAA8D,GAAA2+C,GAAAziD,IAAA+D,GAAApE,GAAA8iD,EAAA,SAAA9hD,EAAAoD,GAAAvE,EAAAqB,EAAAkf,EAAA,IACA,IAAAkzC,EAAA9yD,EAAA4f,GACA5O,EAAAnR,EAAAR,EAAAsE,IAAAtE,GAAA,EACAgkE,EAAAryD,IACAc,EAAAghD,GAAAryD,EAAA,EAAA4iE,GAAAryD,EAAA8hD,IAAA,EAAAuQ,EAAAxQ,KACA,OACAryD,EAAAmD,GAAAtE,EAAAyS,EACAtR,EAAAoD,GAAAvE,EAAAoB,EAAA,EAAAqR,GAAA,EAAAd,EAAAc,KAIA+xD,GAAAp6D,OAAA,SAAAxK,EAAAL,GACA,IAAAK,EAAA,SAAAO,EAAAc,EAAA,EAAAR,EAAAlB,EAAAS,KACA,IAAAyS,EAAAjS,EAAAZ,EAAAI,GACA2R,GAAA,EAAAc,KAAAlT,GAAAS,GAAAT,IAAA,EAAAkT,GAEA6F,EAAAlX,EADAuQ,IACA,GACA,OACAxQ,EAAAvB,GAAAI,GAAAsY,EAAA3G,GACAxQ,EAAA5B,GAAAY,EAAAc,EAAA,EAAAP,EAAAU,GAAA,IAAAuQ,EAAAc,IAAAd,EAAA2G,GAAA7F,GAAArR,EAAAkX,EAAA3G,EAAAc,OAIA,IAAAgyD,GAAA,WACA,OAAAxmE,OAAAomD,EAAA,cAAApmD,CAAAumE,IACApnD,MAAA,UC7BA,SAAAsnD,GAAApgE,EAAAC,GACA,GAAA/D,EAAA+D,GAAA0+C,EAAA,OAAA3+C,EAAA,GACA,IAAAkvD,EAAAjvD,EAAApE,EACAogB,EAAAhf,EAAAiyD,GACA,GAAAhzD,EAAA8D,GAAA2+C,GAAAziD,IAAA+D,GAAApE,GAAA8iD,EAAA,SAAAjjD,EAAAqB,EAAAkf,EAAA,IACA,IAAA5O,GAAA3R,EAAAsE,IAAAtE,GAAA,EACA0S,EAAA8gD,GAAA,EAAA7yD,EAAA4f,IACA,OACAvgB,GAAAmB,EAAAmD,GAAAlD,EAAAuQ,IAAA,EAAAe,KAAAf,GACA3R,EAAA0S,GAIAgyD,GAAAt6D,OAAA,SAAAxK,EAAAL,GACA,IAAAA,EAAA,OAAAK,EAAA,GACA,IAAA8S,EAAAnT,EAAAS,EACA2R,GAAA3R,KAAA,EAAA0S,KAAA9S,MAAA,EAAAI,EAAAJ,GACA,OACAA,EAAAI,GAAAmB,EAAAvB,GAAAwB,EAAAuQ,IAAA,GAAAA,GAAA,EACAxR,EAAAc,EAAA,EAAAR,EAAAiS,MAIA,IAAAiyD,GAAA,WACA,OAAA1mE,OAAAomD,EAAA,cAAApmD,CAAAymE,IACAtnD,MAAA,UCzBA,SAAAwnD,GAAAtgE,EAAAC,GACA,IAAAA,EAAA,OAAAD,EAAA,GACA,IAAAmK,EAAAjO,EAAA+D,GACA,IAAAD,GAAAmK,IAAAtO,EAAA,SAAAoE,GACA,IAAA+T,EAAA7J,EAAAtO,EACA0kE,EAAAvsD,IACAq7C,GAAA,EAAAr7C,EAAAusD,KAAA,SAAAA,GAAAvsD,EAAA,IACAwsD,EAAAnR,IACAoR,EAAAzsD,EAAAq7C,EACAqR,EAAAH,EAAAC,EAAA,EAAAC,EACAE,EAAA3sD,EAAA,EAAAq7C,EACArsD,EAAAhD,EAAAnE,EACAoH,EAAAD,EAAA,EAAAA,EACA49D,EAAA/jE,EAAAX,EAAA8D,GAAAnE,GAAAiB,EAAAmG,IAAA,GACA49D,EAAAD,IAEAzyD,GAAAyyD,GAAAF,EAAAF,EAAA,KAAA1jE,EADA4jE,GAAAH,EAAAC,EAAAK,EAAA,MAAAN,OAAAI,IAAA,EAAAH,GAAA,GAAAC,EAAAD,EAAA,EAAAA,QACA,EAAAE,EAAAG,GACA,OACAhkE,EAAAmD,GAAAnE,EAAAsS,EACAtR,EAAAoD,GAAApE,EAAAiB,EAAA,EAAA8jE,EAAA1kE,EAAAiS,SAIAmyD,GAAAx6D,OAAA,SAAAxK,EAAAL,GACA,IAAA2H,EACA,IAAAtH,IAAAL,EAAA,OAAAK,EAAAL,GACAA,GAAAS,EACA,IAAAyS,EAAAtR,EAAAvB,KAAAO,EACA+kE,GAAAzyD,IAAA,IAAAlT,KAAAiB,EAAAiS,GACA0yD,EAAAD,IACA5sD,EAAA,EAAA/Y,EACAhC,EAAA,GACA,GACA,IAAAsnE,EAAAvsD,IACAq7C,GAAA,EAAAr7C,EAAAusD,KAAA,SAAAA,GAAAvsD,EAAA,IACA8sD,GAAA,EAAA9sD,EAAAusD,EAAAvsD,EAAA,OAAAusD,EAAAvsD,GACAwsD,EAAAnR,IACAoR,EAAAzsD,EAAAq7C,EACA0R,EAAA/sD,EAAAq7C,EACAqR,EAAAK,IACAJ,EAAA3sD,EAAA,EAAAq7C,EAEA2R,GAAA,EAAAD,GAAA,EAAAN,EAAAD,GAAA,IAAAD,EAAA,EAAAA,MAAA,EAAAO,GAAAN,GAAA,GAAAD,EAAA,EAAAM,GAAA,EAAAN,EAAA,IAAAM,GAAAC,GAAAL,GAAA,GAAAF,EAAA,MAAAA,EAAA,GAAAM,GAAAC,IACAG,EAAAnkE,EAFA4jE,GAAAH,EAAAC,EAAAK,EAAA,MAAAN,OAAAI,IAAA,EAAAH,MAAA,GAAAC,EAAA,EAAAD,KAKAxsD,GAAApR,GAFAg+D,GAAAF,EAAAF,EAAA,KAAAS,EAAA9yD,GAAA,EAAAuyD,EAAAG,KACAD,GAAA,EAAAvR,EAAAyR,EAAA,EAAAC,GAAA,EAAAD,IAAAE,EAAAC,EAAA,EAAAF,GAAAH,IAAA,EAAAJ,EAAAE,GAAA,EAAAO,IAAA,EAAAH,IAAAD,EAAA,EAAAH,UAEG99D,EAAA+7C,KAAA1lD,EAAA,GACH,OACA4D,EAAAvB,IAAAwB,EAAA8jE,IAAA,GAAAA,GAAAllE,EAAA,EACAG,EAAAmY,IAIA,IAAAktD,GAAA,WACA,OAAAvnE,OAAAomD,EAAA,cAAApmD,CAAA2mE,IACAxnD,MAAA,SCvDAqoD,GAAA,EAAAzlE,EAAA,EAAAoB,EAAA,GACAskE,GAAA,EAAAtkE,EAAA,EAAApB,EAAAoB,EAAA,GAAAqkE,IAEAE,GAAAtd,GAAAqd,GAAAtkE,EAAA,GAAApB,EAAA0lE,GAAAD,GAAA,GAEAG,GAAA,WACA,OAAA3nE,OAAAomD,EAAA,cAAApmD,CAAA0nE,IACAvoD,MAAA,SCRA,SAAAyoD,GAAAvhE,EAAAC,GACA,OAAAD,EAAAlD,EAAA,IAAAmD,KAAAvE,MAAAuE,GAGAshE,GAAAz7D,OAAA,SAAAxK,EAAAL,GACA,OAAAK,EAAAwB,EAAA,IAAA7B,KAAAS,MAAAT,IAGA,IAAAumE,GAAA,WACA,OAAA7nE,OAAAomD,EAAA,cAAApmD,CAAA4nE,IACAzoD,MAAA,SCVA,SAAA2oD,GAAAzhE,EAAAC,GACA,IAAAxF,EAAA,OAAAkC,EAAAsD,GACA2N,EAAA9Q,EAAA,EAAArC,KACAyS,EAAApQ,EAAA,KAAA8Q,EAAAvR,EAAA2D,GAAA,KACA,OACA,QAAA4N,EAAAV,EAAAvQ,EAAAqD,GACA,QAAAvF,EAAAyS,GAIAu0D,GAAA37D,OAAA,SAAAxK,EAAAL,GACA,IAAAkM,EAAA7L,EAAA,QACAiS,EAAAtS,EAAA,QACAT,EAAAsC,EAAAqK,IAAAoG,KACAjU,EAAA,EAAA2D,EAAAzC,EAAA,GACA,OACA,EAAA4B,EAAAd,EAAAyB,EAAAzD,GAAA,QAAAkB,GACAA,GAAAyC,EAAAhC,EAAA0B,EAAArD,IAAA,eAAAkB,MAIA,IAAAknE,GAAA,WACA,OAAA/nE,OAAAomD,EAAA,cAAApmD,CAAA8nE,IACA3oD,MAAA,UCvBA,SAAA6oD,GAAA3hE,EAAAC,GACA,IAAAI,EAAAhE,EAAA4D,GACAK,EAAAjE,EAAA2D,GAAAK,EACAuhE,EAAA,EAAAthE,EACA6gD,EAAA9kD,EAAA2D,EAAA5D,EAAAO,EAAAqD,GAAAK,GAAA1D,EAAAsD,KACAmhD,EAAAzkD,EAAAqD,GAEA,OACAohD,GAFA/gD,EAAAvD,EAAA,EAAAwD,MAEA6gD,EAAAygB,GACAzgB,EAAA9gD,EAAA+gD,EAAAwgB,GAIAD,GAAA77D,OAAA,SAAAxK,EAAAL,GACA,IAAAqK,GAAAhK,IAAAL,MAAA,EACAsF,EAAAzD,GAAAwI,GAAA,EAAAA,IACAjK,EAAAJ,EAAAqK,EAAAhK,EAAAiF,EACAnF,EAAAE,EAAAgK,EAAArK,EAAAsF,EACAqgE,EAAA9jE,EAAA1B,IAAAC,KACA,OACAe,EAAAmE,EAAAlF,EAAAulE,GAAA,EAAAt7D,IACAs7D,GAAA3jE,EAAAsD,EAAAnF,EAAAwlE,GAAA,IAIA,IAAAiB,GAAA,WACA,OAAAloE,OAAAomD,EAAA,cAAApmD,CAAAgoE,IACA96D,QAAA,WACAiS,MAAA,QACA0D,UAAA,UC5BA,SAAAslD,GAAA9hE,EAAAC,GACA,IAAAhC,EAAA+hD,EAAAhgD,EAAAC,GACA,QACAhC,EAAA,GAAA+B,EAAAnE,GAAA,GACAoC,EAAA,GAAAgC,GAAA,GAIA6hE,GAAAh8D,OAAA,SAAAxK,EAAAL,GACA,IAAA+E,EAAA1E,EAAA2E,EAAAhF,EAAAhC,EAAA,GACA,GACA,IAWA8oE,EAXA/H,EAAA39D,EAAA4D,GACAixD,EAAAv0D,EAAAsD,GACA+hE,EAAArlE,EAAA,EAAAsD,GACAgiE,EAAA/Q,IACAgR,EAAAlI,IACAmI,EAAAxlE,EAAAqD,GACAoiE,EAAA/lE,EAAA2D,EAAA,GACAqiE,EAAA1lE,EAAAqD,EAAA,GACAsiE,EAAAD,IACAhT,EAAA,EAAA6S,EAAAE,IACAxgC,EAAAytB,EAAAryD,EAAAg9D,EAAAoI,GAAAtlE,EAAAilE,EAAA,EAAA1S,GAAA0S,EAAA,EAEArhB,EAAA,MAAA9e,EAAAo4B,EAAAqI,EAAAriE,EAAAnE,GAAAP,EACAyjB,EAAA,IAAA6iB,EAAAsvB,EAAAjxD,GAAAhF,EACAsnE,EAAA,GAAAR,GAAAG,EAAAI,EAAA1gC,EAAAo4B,EAAAoI,EAAAH,GAAA,GAAApmE,EACA2mE,EAAAT,GAAAI,EAAAH,EAAA,EAAApgC,EAAAsvB,EAAAmR,GACAI,EAAA,KAAAV,GAAAC,EAAAK,EAAAzgC,EAAAsvB,EAAAgR,EAAAC,GACAO,EAAA,GAAAX,GAAAE,EAAAG,EAAAxgC,EAAA0gC,EAAAtI,GAAA,GACAvY,EAAA+gB,EAAAC,EAAAC,EAAAH,EACAI,GAAA5jD,EAAAyjD,EAAA9hB,EAAAgiB,GAAAjhB,EACAmhB,GAAAliB,EAAA+hB,EAAA1jD,EAAAwjD,GAAA9gB,EACAzhD,GAAA2iE,EAAA1iE,GAAA2iE,SACG1mE,EAAAymE,GAAAhkB,GAAAziD,EAAA0mE,GAAAjkB,MAAA1lD,EAAA,GACH,OAAA+G,EAAAC,IAGA,IAAA4iE,GAAA,WACA,OAAAlpE,OAAAomD,EAAA,cAAApmD,CAAAmoE,IACAhpD,MAAA,2pQC3CA,IAAAgqD,EAAAnpE,OAAAopE,UAAyBlqE,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEzBG,EAAAD,SAMAiqE,gBAAA,SAAAC,GACA,IAAA/qD,EAAA4qD,EAAAG,GACA,sBAAA/qD,EACA,MAAA0jB,MAAA,4EAEA,OAAA1jB,KAWAgrD,kBAAA,SAAA3pD,EAAAF,GACA,MAAA/d,EAAAwnE,EAAAK,cAAAp/C,QAAA,EAAA1K,IAAAjW,QAAAiW,EAAA,EAAAA,EAAA,IACApe,EAAA6nE,EAAAK,cAAAp/C,QAAA,EAAAxK,IAAAnW,OAAAmW,EAAA,GAAAA,EAAA,IAEA,OAAAupD,EAAAM,cACAllE,MAAA,SAAAmlE,EAAAC,GACA1oE,KAAA0C,OAAAY,MAAA5C,EAAA+nE,GAAApoE,EAAAqoE,QAcAC,oBAAA,SAAAN,EAAAtmB,EAAApjC,EAAAF,GACA,IAAAnB,EAAAtd,KAAAooE,gBAAAC,GAAAvmD,SAAArD,EAAAE,GAAAojC,GACA6mB,EAAA5oE,KAAAsoE,kBAAA3pD,EAAAF,GAGA,OACA/b,OAAA,SAAA7C,GACA,OAAAyd,EAAA5a,OAAAkmE,EAAAlmE,OAAA7C,uBC1CA,SAAAgpE,EAAAC,GACA9oE,KAAA8oE,YAGAD,EAAAnpE,UAAAqpE,UAAA,aAIAF,EAAAnpE,UAAA2c,OAAA,SAAA3b,EAAAL,GACAL,KAAA8oE,UAAAzsD,OAAA3b,EAAAL,IAGAwoE,EAAAnpE,UAAA4c,OAAA,SAAA5b,EAAAL,GACAL,KAAA8oE,UAAAxsD,OAAA5b,EAAAL,IAGAwoE,EAAAnpE,UAAAsQ,IAAA,SAAAtP,EAAAL,EAAA+L,EAAA48D,EAAAC,GACAjpE,KAAA8oE,UAAAI,YAAAl5D,IAAAtP,EAAAL,EAAA+L,EAAA48D,EAAAC,IAGAJ,EAAAnpE,UAAA0c,UAAA,WACApc,KAAA8oE,UAAAI,YAAA9sD,aAoBAysD,EAAAnpE,UAAAgjD,SAAA,SAAAC,EAAAwmB,GACA,OAAAnpE,KAAA8oE,UAAApmB,SAAAC,EAAAwmB,IAYAN,EAAAnpE,UAAAkjD,WAAA,SAAAr4C,GACA,IAAA6+D,KACAC,EAAA9+D,GAAA,EAmBA,OAlBAvK,KAAA8oE,UAAAQ,SAAA96D,QAAA,SAAAiP,GACAA,EAAA8rD,OAAA/6D,QAAA,SAAAg7D,GACAA,EAAAC,aACAL,EAAAzhE,KAAA6hE,EAAAlwC,GAAA54B,GACA0oE,EAAAzhE,KAAA6hE,EAAAlwC,GAAAj5B,GACA+oE,EAAAzhE,KAAA0hE,GACAD,EAAAzhE,KAAA6hE,EAAAjwC,GAAA74B,GACA0oE,EAAAzhE,KAAA6hE,EAAAjwC,GAAAl5B,GACA+oE,EAAAzhE,KAAA0hE,IAEAG,EAAAE,YAAAl7D,QAAA,SAAAlL,GACA8lE,EAAAzhE,KAAArE,EAAA5C,GACA0oE,EAAAzhE,KAAArE,EAAAjD,GACA+oE,EAAAzhE,KAAA0hE,SAKAD,GAGAhrE,EAAAD,SACA0qE,yCCxFA,IAAAX,EAAAjqE,EAAA,GACA4qE,EAAA5qE,EAAA,IAAA4qE,qBAEApqB,EAAAnF,OAAAmF,MAUA,SAAA+D,EAAAT,EAAAzkC,GACA,IAAAwrD,EAAA,IAAArqB,EAAAkrB,UACArnB,EAAA,IAAAumB,EAAAC,GAGA,OAFAZ,EAAA0B,QAAAtsD,EAAAglC,EACAunB,CAAA9nB,GACAO,EAYA,SAAAf,EAAAQ,EAAAzkC,EAAAqlC,EAAAK,GACA,IAAAV,EAAAtiD,KAAAwiD,gBAAAT,EAAAzkC,GACA7a,EAAAzC,KAAA8pE,eAAAxnB,EAAAK,GACA,OAAA3iD,KAAA+pE,WAAAtnE,EAAAugD,GAGA5kD,EAAAD,SACAkP,MACAk0C,SACAiB,kBACAsnB,eAAA,SAAAxnB,GACA,IAAA0nB,EAAA,IAAAvrB,EAAA+E,eACAymB,EAAA3nB,EAAAM,aAEA,OADAonB,EAAAvmB,aAAA,eAAAhF,EAAAiF,uBAAAumB,EAAA,IACAD,GAEAD,WAAA,SAAAtnE,EAAAugD,GACA,WAAAvE,EAAAqF,aAAArhD,EAAAugD,KAIAknB,OACA3oB,SACAiB,kBACAsnB,eAAA,SAAAxnB,EAAAK,GACA,MAAAwnB,EAAA7nB,EAAAI,SAAAC,GACA,WAAAlE,EAAA2rB,oBAAAD,IAEAJ,WAAA,SAAAtnE,EAAAugD,GACA,WAAAvE,EAAA4E,KAAA5gD,EAAAugD,KAIAqnB,SACA9oB,SACAiB,kBACAsnB,eAAA,SAAAxnB,EAAAK,GACA,MAIA2nB,EAAAhoB,EAAAI,SAAAC,GACA,WAAAlE,EAAA8rB,sBAAAD,GAJAloB,OAAA,EACAC,cAAA,KAKA0nB,WAAA,SAAAtnE,EAAAugD,GACA,WAAAvE,EAAA4E,KAAA5gD,EAAAugD,qBC3EA,IAAAvE,EAAAnF,OAAAmF,MAEAnF,OAAAkxB,eAAA,aACArqB,QACAsqB,UAAerqB,QAAA3B,EAAAisB,gBACfxwC,OAAYt3B,KAAA,QAAAw9C,QAAA,OAAAuqB,GAAA,WACZC,WAAgBxqB,SAAA,GAChByqB,WAAgBzqB,QAAA3B,EAAAqsB,gBAChBC,YAAiB3qB,SAAA,GACjB4qB,KAAU5qB,SAAA,GACV6qB,WAAgB7qB,QAAA,GAChB8qB,SAAc9qB,QAAA,SACd+qB,UAAe/qB,QAAA,SACf3pB,SAAc2pB,QAAA,GACdgrB,MAAWhrB,QAAA3B,EAAA4sB,WACXC,aAAkBlrB,SAAA,GAClBmrB,cAAmBnrB,QAAA3B,EAAA+sB,UACnB15D,SAAcsuC,SAAA,IAEd5G,KAAA,SAAAlwB,UACAA,EAAAgwB,OAAAmyB,MAAAjgD,UAAiClC,IACjCoiD,mBACApiD,EAAAqiD,cACAriD,EAAAsiD,YACAtiD,EAAAuiD,cACAviD,EAAA8e,OACApoC,KAAAgjD,SAAA,IAAAvE,EAAAmF,kBAAAt6B,GACAtpB,KAAAwhD,OAAAl4B,IAEAk4B,OAAA,SAAAl4B,GACAtpB,KAAAgjD,SAAA8oB,MAAAxiD,uBC5BArrB,EAAA,IACA,IAAA8tE,EAAA9tE,EAAA,IACA+tE,EAAA/tE,EAAA,GACAguE,EAAAhuE,EAAA,GAEA,uBAAAq7C,OACA,UAAAtY,MAAA,gEAEA,IAAAyd,EAAAnF,OAAAmF,MAMAnF,OAAAC,kBAAA,kBACA2G,cAAA,YAEAC,QACA+rB,KACAtpE,KAAA,SAEAupE,SACAC,OAAA,sBACAhsB,QAAA,WAEAisB,gBACAzpE,KAAA,UAEA+/C,OACA//C,KAAA,UACAw9C,SAAA,GAEA9iC,YACA8iC,QAAA,eAEAksB,UACAF,OAAA,0BACAhsB,QAAA,QAEA3hC,OAAY2hC,QAAA,GACZzhC,QAAayhC,QAAA,IAMb5G,KAAA,WACAx5C,KAAAusE,OAAA,IAAA9tB,EAAA+tB,YAOAhrB,OAAA,SAAAC,GAEA,GADAzhD,KAAAuiD,SAAAwpB,EAAA/rE,KAAAspB,KAAAgjD,UACAtsE,KAAAspB,KAAA4iD,IAAA,CAGA,IAAAO,EAAAnzB,OAAAmyB,MAAAiB,KAAAjrB,EAAAzhD,KAAAspB,MACAvqB,OAAA6kC,KAAA6oC,GAAAxpE,OAAA,GACAjD,KAAAusE,OAAAI,KAAA3sE,KAAAspB,KAAA4iD,IAAAlsE,KAAA4sE,YAAA/yB,KAAA75C,SAIA4sE,YAAA,SAAAxwB,GACAp8C,KAAA+hD,QAAA/hD,KAAA6sE,aAAAzwB,GACAp8C,KAAAsd,WAAA0uD,EAAArD,oBAAA3oE,KAAAspB,KAAAhM,WAAAtd,KAAA+hD,QAAA/hD,KAAAspB,KAAA3K,OAAA3e,KAAAspB,KAAA7K,OACAze,KAAAuhD,SACAvhD,KAAAy5C,GAAAwH,KA5DA,kBA6DAX,uBAAAtgD,QAIA6sE,aAAA,SAAAzwB,GACA,IAAA0wB,EAAAjxB,KAAArf,MAAA4f,GAEA2F,EAAA+qB,EACA,gBAAA9sE,KAAAspB,KAAA6iD,QAAA,CACA,IAAAY,EAAA/sE,KAAAspB,KAAA+iD,eACArsE,KAAAspB,KAAA+iD,iBACAU,EAAAhuE,OAAA6kC,KAAAkpC,EAAAt2B,SAAA,IAEAuL,EAAAkqB,EAAAviE,QAAAojE,IAAAt2B,QAAAu2B,IAEA,OAAAhrB,GAGAR,OAAA,WACA,IAAAyB,EAAAhjD,KAAAy5C,GAAA8G,WAAAyC,kBACAgqB,EAAAhtE,KAAAuiD,SAAAhB,OAAAvhD,KAAA+hD,QAAA/hD,KAAAsd,WAAAtd,KAAAspB,KAAAq5B,MAAAK,GACAhjD,KAAAy5C,GAAA6J,YAAA,MAAA0pB,IAOAtpC,OAAA,WACA1jC,KAAAy5C,GAAAwzB,YAAA,QAEAjtE,KAAAy5C,GAAAyzB,eAAA,UAKA9uE,EAAAD,SACAgvE,qBAlGA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","// Adds floating point numbers with twice the normal precision.\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n// 305–363 (1997).\n// Code adapted from GeographicLib by Charles F. F. Karney,\n// http://geographiclib.sourceforge.net/\n\nexport default function() {\n  return new Adder;\n}\n\nfunction Adder() {\n  this.reset();\n}\n\nAdder.prototype = {\n  constructor: Adder,\n  reset: function() {\n    this.s = // rounded value\n    this.t = 0; // exact error\n  },\n  add: function(y) {\n    add(temp, y, this.t);\n    add(this, temp.s, this.s);\n    if (this.s) this.t += temp.t;\n    else this.s = temp.t;\n  },\n  valueOf: function() {\n    return this.s;\n  }\n};\n\nvar temp = new Adder;\n\nfunction add(adder, a, b) {\n  var x = adder.s = a + b,\n      bv = x - a,\n      av = x - bv;\n  adder.t = (a - av) + (b - bv);\n}\n","export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\n\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n","export default function noop() {}\n","function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\nexport default function(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n","import adder from \"./adder\";\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nexport var areaRingSum = adder();\n\nvar areaSum = adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum.reset();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function(object) {\n  areaSum.reset();\n  stream(object, areaStream);\n  return areaSum * 2;\n}\n","import {asin, atan2, cos, sin, sqrt} from \"./math\";\n\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nexport function cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n","import adder from \"./adder\";\nimport {areaStream, areaRingSum} from \"./area\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport {abs, degrees, epsilon, radians} from \"./math\";\nimport stream from \"./stream\";\n\nvar lambda0, phi0, lambda1, phi1, // bounds\n    lambda2, // previous lambda-coordinate\n    lambda00, phi00, // first point\n    p0, // previous 3D point\n    deltaSum = adder(),\n    ranges,\n    range;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum.reset();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    else if (deltaSum > epsilon) phi1 = 90;\n    else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n}\n\n// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function(feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream);\n\n  // First, sort ranges by their minimum longitudes.\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare);\n\n    // Then, merge any ranges that overlap.\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    }\n\n    // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n\n  return lambda0 === Infinity || phi0 === Infinity\n      ? [[NaN, NaN], [NaN, NaN]]\n      : [[lambda0, phi0], [lambda1, phi1]];\n}\n","import {asin, atan2, cos, degrees, epsilon, epsilon2, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar W0, W1,\n    X0, Y0, Z0,\n    X1, Y1, Z1,\n    X2, Y2, Z2,\n    lambda00, phi00, // first point\n    x0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n};\n\n// Arithmetic mean of Cartesian vectors.\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00, phi00);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = sqrt(cx * cx + cy * cy + cz * cz),\n      w = asin(m), // line weight = angle\n      v = m && -w / m; // area weight multiplier\n  X2 += v * cx;\n  Y2 += v * cy;\n  Z2 += v * cz;\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nexport default function(object) {\n  W0 = W1 =\n  X0 = Y0 = Z0 =\n  X1 = Y1 = Z1 =\n  X2 = Y2 = Z2 = 0;\n  stream(object, centroidStream);\n\n  var x = X2,\n      y = Y2,\n      z = Z2,\n      m = x * x + y * y + z * z;\n\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1;\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = x * x + y * y + z * z;\n    // If the feature still has an undefined ccentroid, then return.\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(a, b) {\n\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function(x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n\n  return compose;\n}\n","import compose from \"./compose\";\nimport {asin, atan2, cos, degrees, pi, radians, sin, tau} from \"./math\";\n\nfunction rotationIdentity(lambda, phi) {\n  return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nexport default function(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}\n","import {cartesian, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport constant from \"./constant\";\nimport {acos, cos, degrees, epsilon, radians, sin, tau} from \"./math\";\nimport {rotateRadians} from \"./rotation\";\n\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: \"Polygon\", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}\n","import noop from \"../noop\";\n\nexport default function() {\n  var lines = [],\n      line;\n  return {\n    point: function(x, y) {\n      line.push([x, y]);\n    },\n    lineStart: function() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}\n","import {abs, epsilon} from \"./math\";\n\nexport default function(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n","import pointEqual from \"../pointEqual\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nexport default function(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    // If the first and last points of a segment are coincident, then treat as a\n    // closed ring. TODO if all rings are closed, then the winding order of the\n    // exterior ring should be checked.\n    if (pointEqual(p0, p1)) {\n      stream.lineStart();\n      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n      stream.lineEnd();\n      return;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n","import adder from \"./adder\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian\";\nimport {asin, atan2, cos, epsilon, halfPi, pi, quarterPi, sin, tau} from \"./math\";\n\nvar sum = adder();\n\nexport default function(polygon, point) {\n  var lambda = point[0],\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  sum.reset();\n\n  if (sinPhi === 1) phi = halfPi + epsilon;\n  else if (sinPhi === -1) phi = -halfPi - epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = point0[0],\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = point1[0],\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);\n}\n","import clipBuffer from \"./buffer\";\nimport clipRejoin from \"./rejoin\";\nimport {epsilon, halfPi} from \"../math\";\nimport polygonContains from \"../polygonContains\";\nimport {merge} from \"d3-array\";\n\nexport default function(pointVisible, clipLine, interpolate, start) {\n  return function(sink) {\n    var line = clipLine(sink),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, start);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      line.point(lambda, phi);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      ringSink.point(lambda, phi);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}\n","import clip from \"./index\";\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \"../math\";\n\nexport default clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n","import {cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical} from \"../cartesian\";\nimport {circleStream} from \"../circle\";\nimport {abs, cos, epsilon, pi, radians, sqrt} from \"../math\";\nimport pointEqual from \"../pointEqual\";\nimport clip from \"./index\";\n\nexport default function(radius) {\n  var cr = cos(radius),\n      delta = 6 * radians,\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        // Handle degeneracies.\n        // TODO ignore if not clipping polygons.\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {\n            point1[0] += epsilon;\n            point1[1] += epsilon;\n            v = visible(point1[0], point1[1]);\n          }\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1]);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n","export default function(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}\n","import {abs, epsilon} from \"../math\";\nimport clipBuffer from \"./buffer\";\nimport clipLine from \"./line\";\nimport clipRejoin from \"./rejoin\";\nimport {merge} from \"d3-array\";\n\nvar clipMax = 1e9, clipMin = -clipMax;\n\n// TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nexport default function clipRectangle(x0, y0, x1, y1) {\n\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0, a1 = 0;\n    if (from == null\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n        || comparePoint(from, to) < 0 ^ direction > 0) {\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb\n        : ca === 0 ? b[1] - a[1]\n        : ca === 1 ? a[0] - b[0]\n        : ca === 2 ? a[1] - b[1]\n        : b[0] - a[0];\n  }\n\n  return function(stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__, y__, v__, // first point\n        x_, y_, v_, // previous point\n        first,\n        clean;\n\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n        }\n      }\n\n      return winding;\n    }\n\n    // Buffer geometry within a polygon and then clip it en masse.\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n      if (cleanInside || visible) {\n        stream.polygonStart();\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n        if (visible) {\n          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n        }\n        stream.polygonEnd();\n      }\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    }\n\n    // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);\n        else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n","import clipRectangle from \"./rectangle\";\n\nexport default function() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 960,\n      y1 = 500,\n      cache,\n      cacheStream,\n      clip;\n\n  return clip = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);\n    },\n    extent: function(_) {\n      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\n    }\n  };\n}\n","import adder from \"./adder\";\nimport {abs, atan2, cos, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar lengthSum = adder(),\n    lambda0,\n    sinPhi0,\n    cosPhi0;\n\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\n}\n\nexport default function(object) {\n  lengthSum.reset();\n  stream(object, lengthStream);\n  return +lengthSum;\n}\n","import length from \"./length\";\n\nvar coordinates = [null, null],\n    object = {type: \"LineString\", coordinates: coordinates};\n\nexport default function(a, b) {\n  coordinates[0] = a;\n  coordinates[1] = b;\n  return length(object);\n}\n","import {default as polygonContains} from \"./polygonContains\";\nimport {default as distance} from \"./distance\";\nimport {epsilon, radians} from \"./math\";\n\nvar containsObjectType = {\n  Feature: function(object, point) {\n    return containsGeometry(object.geometry, point);\n  },\n  FeatureCollection: function(object, point) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;\n    return false;\n  }\n};\n\nvar containsGeometryType = {\n  Sphere: function() {\n    return true;\n  },\n  Point: function(object, point) {\n    return containsPoint(object.coordinates, point);\n  },\n  MultiPoint: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPoint(coordinates[i], point)) return true;\n    return false;\n  },\n  LineString: function(object, point) {\n    return containsLine(object.coordinates, point);\n  },\n  MultiLineString: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsLine(coordinates[i], point)) return true;\n    return false;\n  },\n  Polygon: function(object, point) {\n    return containsPolygon(object.coordinates, point);\n  },\n  MultiPolygon: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;\n    return false;\n  },\n  GeometryCollection: function(object, point) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) if (containsGeometry(geometries[i], point)) return true;\n    return false;\n  }\n};\n\nfunction containsGeometry(geometry, point) {\n  return geometry && containsGeometryType.hasOwnProperty(geometry.type)\n      ? containsGeometryType[geometry.type](geometry, point)\n      : false;\n}\n\nfunction containsPoint(coordinates, point) {\n  return distance(coordinates, point) === 0;\n}\n\nfunction containsLine(coordinates, point) {\n  var ab = distance(coordinates[0], coordinates[1]),\n      ao = distance(coordinates[0], point),\n      ob = distance(point, coordinates[1]);\n  return ao + ob <= ab + epsilon;\n}\n\nfunction containsPolygon(coordinates, point) {\n  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\n}\n\nfunction ringRadians(ring) {\n  return ring = ring.map(pointRadians), ring.pop(), ring;\n}\n\nfunction pointRadians(point) {\n  return [point[0] * radians, point[1] * radians];\n}\n\nexport default function(object, point) {\n  return (object && containsObjectType.hasOwnProperty(object.type)\n      ? containsObjectType[object.type]\n      : containsGeometry)(object, point);\n}\n","import {range} from \"d3-array\";\nimport {abs, ceil, epsilon} from \"./math\";\n\nfunction graticuleX(y0, y1, dy) {\n  var y = range(y0, y1 - epsilon, dy).concat(y1);\n  return function(x) { return y.map(function(y) { return [x, y]; }); };\n}\n\nfunction graticuleY(x0, x1, dx) {\n  var x = range(x0, x1 - epsilon, dx).concat(x1);\n  return function(y) { return x.map(function(x) { return [x, y]; }); };\n}\n\nexport default function graticule() {\n  var x1, x0, X1, X0,\n      y1, y0, Y1, Y0,\n      dx = 10, dy = dx, DX = 90, DY = 360,\n      x, y, X, Y,\n      precision = 2.5;\n\n  function graticule() {\n    return {type: \"MultiLineString\", coordinates: lines()};\n  }\n\n  function lines() {\n    return range(ceil(X0 / DX) * DX, X1, DX).map(X)\n        .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n        .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))\n        .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));\n  }\n\n  graticule.lines = function() {\n    return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n  };\n\n  graticule.outline = function() {\n    return {\n      type: \"Polygon\",\n      coordinates: [\n        X(X0).concat(\n        Y(Y1).slice(1),\n        X(X1).reverse().slice(1),\n        Y(Y0).reverse().slice(1))\n      ]\n    };\n  };\n\n  graticule.extent = function(_) {\n    if (!arguments.length) return graticule.extentMinor();\n    return graticule.extentMajor(_).extentMinor(_);\n  };\n\n  graticule.extentMajor = function(_) {\n    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n    X0 = +_[0][0], X1 = +_[1][0];\n    Y0 = +_[0][1], Y1 = +_[1][1];\n    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.extentMinor = function(_) {\n    if (!arguments.length) return [[x0, y0], [x1, y1]];\n    x0 = +_[0][0], x1 = +_[1][0];\n    y0 = +_[0][1], y1 = +_[1][1];\n    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.step = function(_) {\n    if (!arguments.length) return graticule.stepMinor();\n    return graticule.stepMajor(_).stepMinor(_);\n  };\n\n  graticule.stepMajor = function(_) {\n    if (!arguments.length) return [DX, DY];\n    DX = +_[0], DY = +_[1];\n    return graticule;\n  };\n\n  graticule.stepMinor = function(_) {\n    if (!arguments.length) return [dx, dy];\n    dx = +_[0], dy = +_[1];\n    return graticule;\n  };\n\n  graticule.precision = function(_) {\n    if (!arguments.length) return precision;\n    precision = +_;\n    x = graticuleX(y0, y1, 90);\n    y = graticuleY(x0, x1, precision);\n    X = graticuleX(Y0, Y1, 90);\n    Y = graticuleY(X0, X1, precision);\n    return graticule;\n  };\n\n  return graticule\n      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])\n      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);\n}\n\nexport function graticule10() {\n  return graticule()();\n}\n","import {asin, atan2, cos, degrees, haversin, radians, sin, sqrt} from \"./math\";\n\nexport default function(a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n\n  var interpolate = d ? function(t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [\n      atan2(y, x) * degrees,\n      atan2(z, sqrt(x * x + y * y)) * degrees\n    ];\n  } : function() {\n    return [x0 * degrees, y0 * degrees];\n  };\n\n  interpolate.distance = d;\n\n  return interpolate;\n}\n","import adder from \"../adder\";\nimport {abs} from \"../math\";\nimport noop from \"../noop\";\n\nvar areaSum = adder(),\n    areaRingSum = adder(),\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;\n    areaSum.add(abs(areaRingSum));\n    areaRingSum.reset();\n  },\n  result: function() {\n    var area = areaSum / 2;\n    areaSum.reset();\n    return area;\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaPointFirst(x, y) {\n  areaStream.point = areaPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction areaPoint(x, y) {\n  areaRingSum.add(y0 * x - x0 * y);\n  x0 = x, y0 = y;\n}\n\nfunction areaRingEnd() {\n  areaPoint(x00, y00);\n}\n\nexport default areaStream;\n","export default function(x) {\n  return x;\n}\n","import noop from \"../noop\";\n\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;\n","import {sqrt} from \"../math\";\n\n// TODO Enforce positive area for exterior, negative area for interior?\n\nvar X0 = 0,\n    Y0 = 0,\n    Z0 = 0,\n    X1 = 0,\n    Y1 = 0,\n    Z1 = 0,\n    X2 = 0,\n    Y2 = 0,\n    Z2 = 0,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar centroidStream = {\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.point = centroidPoint;\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  },\n  result: function() {\n    var centroid = Z2 ? [X2 / Z2, Y2 / Z2]\n        : Z1 ? [X1 / Z1, Y1 / Z1]\n        : Z0 ? [X0 / Z0, Y0 / Z0]\n        : [NaN, NaN];\n    X0 = Y0 = Z0 =\n    X1 = Y1 = Z1 =\n    X2 = Y2 = Z2 = 0;\n    return centroid;\n  }\n};\n\nfunction centroidPoint(x, y) {\n  X0 += x;\n  Y0 += y;\n  ++Z0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidPointFirstLine;\n}\n\nfunction centroidPointFirstLine(x, y) {\n  centroidStream.point = centroidPointLine;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidPointLine(x, y) {\n  var dx = x - x0, dy = y - y0, z = sqrt(dx * dx + dy * dy);\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingStart() {\n  centroidStream.point = centroidPointFirstRing;\n}\n\nfunction centroidRingEnd() {\n  centroidPointRing(x00, y00);\n}\n\nfunction centroidPointFirstRing(x, y) {\n  centroidStream.point = centroidPointRing;\n  centroidPoint(x00 = x0 = x, y00 = y0 = y);\n}\n\nfunction centroidPointRing(x, y) {\n  var dx = x - x0,\n      dy = y - y0,\n      z = sqrt(dx * dx + dy * dy);\n\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n\n  z = y0 * x - x0 * y;\n  X2 += z * (x0 + x);\n  Y2 += z * (y0 + y);\n  Z2 += z * 3;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nexport default centroidStream;\n","import {tau} from \"../math\";\nimport noop from \"../noop\";\n\nexport default function PathContext(context) {\n  this._context = context;\n}\n\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._context.moveTo(x, y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._context.lineTo(x, y);\n        break;\n      }\n      default: {\n        this._context.moveTo(x + this._radius, y);\n        this._context.arc(x, y, this._radius, 0, tau);\n        break;\n      }\n    }\n  },\n  result: noop\n};\n","import adder from \"../adder\";\nimport {sqrt} from \"../math\";\nimport noop from \"../noop\";\n\nvar lengthSum = adder(),\n    lengthRing,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar lengthStream = {\n  point: noop,\n  lineStart: function() {\n    lengthStream.point = lengthPointFirst;\n  },\n  lineEnd: function() {\n    if (lengthRing) lengthPoint(x00, y00);\n    lengthStream.point = noop;\n  },\n  polygonStart: function() {\n    lengthRing = true;\n  },\n  polygonEnd: function() {\n    lengthRing = null;\n  },\n  result: function() {\n    var length = +lengthSum;\n    lengthSum.reset();\n    return length;\n  }\n};\n\nfunction lengthPointFirst(x, y) {\n  lengthStream.point = lengthPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction lengthPoint(x, y) {\n  x0 -= x, y0 -= y;\n  lengthSum.add(sqrt(x0 * x0 + y0 * y0));\n  x0 = x, y0 = y;\n}\n\nexport default lengthStream;\n","export default function PathString() {\n  this._string = [];\n}\n\nPathString.prototype = {\n  _radius: 4.5,\n  _circle: circle(4.5),\n  pointRadius: function(_) {\n    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\n    return this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._string.push(\"Z\");\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._string.push(\"M\", x, \",\", y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._string.push(\"L\", x, \",\", y);\n        break;\n      }\n      default: {\n        if (this._circle == null) this._circle = circle(this._radius);\n        this._string.push(\"M\", x, \",\", y, this._circle);\n        break;\n      }\n    }\n  },\n  result: function() {\n    if (this._string.length) {\n      var result = this._string.join(\"\");\n      this._string = [];\n      return result;\n    } else {\n      return null;\n    }\n  }\n};\n\nfunction circle(radius) {\n  return \"m0,\" + radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n      + \"z\";\n}\n","import identity from \"../identity\";\nimport stream from \"../stream\";\nimport pathArea from \"./area\";\nimport pathBounds from \"./bounds\";\nimport pathCentroid from \"./centroid\";\nimport PathContext from \"./context\";\nimport pathMeasure from \"./measure\";\nimport PathString from \"./string\";\n\nexport default function(projection, context) {\n  var pointRadius = 4.5,\n      projectionStream,\n      contextStream;\n\n  function path(object) {\n    if (object) {\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n      stream(object, projectionStream(contextStream));\n    }\n    return contextStream.result();\n  }\n\n  path.area = function(object) {\n    stream(object, projectionStream(pathArea));\n    return pathArea.result();\n  };\n\n  path.measure = function(object) {\n    stream(object, projectionStream(pathMeasure));\n    return pathMeasure.result();\n  };\n\n  path.bounds = function(object) {\n    stream(object, projectionStream(pathBounds));\n    return pathBounds.result();\n  };\n\n  path.centroid = function(object) {\n    stream(object, projectionStream(pathCentroid));\n    return pathCentroid.result();\n  };\n\n  path.projection = function(_) {\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\n  };\n\n  path.context = function(_) {\n    if (!arguments.length) return context;\n    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n    return path;\n  };\n\n  path.pointRadius = function(_) {\n    if (!arguments.length) return pointRadius;\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n    return path;\n  };\n\n  return path.projection(projection).context(context);\n}\n","export default function(methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\n\nexport function transformer(methods) {\n  return function(stream) {\n    var s = new TransformStream;\n    for (var key in methods) s[key] = methods[key];\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function(x, y) { this.stream.point(x, y); },\n  sphere: function() { this.stream.sphere(); },\n  lineStart: function() { this.stream.lineStart(); },\n  lineEnd: function() { this.stream.lineEnd(); },\n  polygonStart: function() { this.stream.polygonStart(); },\n  polygonEnd: function() { this.stream.polygonEnd(); }\n};\n","import {default as geoStream} from \"../stream\";\nimport boundsStream from \"../path/bounds\";\n\nfunction fit(projection, fitBounds, object) {\n  var clip = projection.clipExtent && projection.clipExtent();\n  projection.scale(150).translate([0, 0]);\n  if (clip != null) projection.clipExtent(null);\n  geoStream(object, projection.stream(boundsStream));\n  fitBounds(boundsStream.result());\n  if (clip != null) projection.clipExtent(clip);\n  return projection;\n}\n\nexport function fitExtent(projection, extent, object) {\n  return fit(projection, function(b) {\n    var w = extent[1][0] - extent[0][0],\n        h = extent[1][1] - extent[0][1],\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n\nexport function fitWidth(projection, width, object) {\n  return fit(projection, function(b) {\n    var w = +width,\n        k = w / (b[1][0] - b[0][0]),\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\n        y = -k * b[0][1];\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitHeight(projection, height, object) {\n  return fit(projection, function(b) {\n    var h = +height,\n        k = h / (b[1][1] - b[0][1]),\n        x = -k * b[0][0],\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n","import {cartesian} from \"../cartesian\";\nimport {abs, asin, atan2, cos, epsilon, radians, sqrt} from \"../math\";\nimport {transformer} from \"../transform\";\n\nvar maxDepth = 16, // maximum depth of subdivision\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function(project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n","import clipAntimeridian from \"../clip/antimeridian\";\nimport clipCircle from \"../clip/circle\";\nimport clipRectangle from \"../clip/rectangle\";\nimport compose from \"../compose\";\nimport identity from \"../identity\";\nimport {cos, degrees, radians, sin, sqrt} from \"../math\";\nimport {rotateRadians} from \"../rotation\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit\";\nimport resample from \"./resample\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nfunction scaleTranslate(k, dx, dy) {\n  function transform(x, y) {\n    return [dx + k * x, dy - k * y];\n  }\n  transform.invert = function(x, y) {\n    return [(x - dx) / k, (dy - y) / k];\n  };\n  return transform;\n}\n\nfunction scaleTranslateRotate(k, dx, dy, alpha) {\n  var cosAlpha = cos(alpha),\n      sinAlpha = sin(alpha),\n      a = cosAlpha * k,\n      b = sinAlpha * k,\n      ai = cosAlpha / k,\n      bi = sinAlpha / k,\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\n  function transform(x, y) {\n    return [a * x - b * y + dx, dy - b * x - a * y];\n  }\n  transform.invert = function(x, y) {\n    return [ai * x - bi * y + ci, fi - bi * x - ai * y];\n  };\n  return transform;\n}\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate\n      alpha = 0, // post-rotate\n      theta = null, preclip = clipAntimeridian, // pre-clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // post-clip extent\n      delta2 = 0.5, // precision\n      projectResample,\n      projectTransform,\n      projectRotateTransform,\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    return projectRotateTransform(point[0] * radians, point[1] * radians);\n  }\n\n  function invert(point) {\n    point = projectRotateTransform.invert(point[0], point[1]);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function(_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function(_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.angle = function(_) {\n    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function(width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function(height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),\n        transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);\n    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n    projectTransform = compose(project, transform);\n    projectRotateTransform = compose(rotate, projectTransform);\n    projectResample = resample(projectTransform, delta2);\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n","import {degrees, pi, radians} from \"../math\";\nimport {projectionMutator} from \"./index\";\n\nexport function conicProjection(projectAt) {\n  var phi0 = 0,\n      phi1 = pi / 3,\n      m = projectionMutator(projectAt),\n      p = m(phi0, phi1);\n\n  p.parallels = function(_) {\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n  };\n\n  return p;\n}\n","import {abs, asin, atan2, cos, epsilon, sign, sin, sqrt} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea\";\n\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function(x, y) {\n    var r0y = r0 - y;\n    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEqualAreaRaw)\n      .scale(155.424)\n      .center([0, 33.6442]);\n}\n","import {asin, cos, sin} from \"../math\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n","import conicEqualArea from \"./conicEqualArea\";\n\nexport default function() {\n  return conicEqualArea()\n      .parallels([29.5, 45.5])\n      .scale(1070)\n      .translate([480, 250])\n      .rotate([96, 0])\n      .center([-0.6, 38.7]);\n}\n","import {epsilon} from \"../math\";\nimport albers from \"./albers\";\nimport conicEqualArea from \"./conicEqualArea\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit\";\n\n// The projections must have mutually exclusive clip regions on the sphere,\n// as this will avoid emitting interleaving lines and polygons.\nfunction multiplex(streams) {\n  var n = streams.length;\n  return {\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n  };\n}\n\n// A composite projection for the United States, configured by default for\n// 960×500. The projection also works quite well at 960×600 if you change the\n// scale to 1285 and adjust the translate accordingly. The set of standard\n// parallels for each region comes from USGS, which is published here:\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\nexport default function() {\n  var cache,\n      cacheStream,\n      lower48 = albers(), lower48Point,\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n  function albersUsa(coordinates) {\n    var x = coordinates[0], y = coordinates[1];\n    return point = null,\n        (lower48Point.point(x, y), point)\n        || (alaskaPoint.point(x, y), point)\n        || (hawaiiPoint.point(x, y), point);\n  }\n\n  albersUsa.invert = function(coordinates) {\n    var k = lower48.scale(),\n        t = lower48.translate(),\n        x = (coordinates[0] - t[0]) / k,\n        y = (coordinates[1] - t[1]) / k;\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n        : lower48).invert(coordinates);\n  };\n\n  albersUsa.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n  };\n\n  albersUsa.precision = function(_) {\n    if (!arguments.length) return lower48.precision();\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n    return reset();\n  };\n\n  albersUsa.scale = function(_) {\n    if (!arguments.length) return lower48.scale();\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n    return albersUsa.translate(lower48.translate());\n  };\n\n  albersUsa.translate = function(_) {\n    if (!arguments.length) return lower48.translate();\n    var k = lower48.scale(), x = +_[0], y = +_[1];\n\n    lower48Point = lower48\n        .translate(_)\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n        .stream(pointStream);\n\n    alaskaPoint = alaska\n        .translate([x - 0.307 * k, y + 0.201 * k])\n        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    hawaiiPoint = hawaii\n        .translate([x - 0.205 * k, y + 0.212 * k])\n        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    return reset();\n  };\n\n  albersUsa.fitExtent = function(extent, object) {\n    return fitExtent(albersUsa, extent, object);\n  };\n\n  albersUsa.fitSize = function(size, object) {\n    return fitSize(albersUsa, size, object);\n  };\n\n  albersUsa.fitWidth = function(width, object) {\n    return fitWidth(albersUsa, width, object);\n  };\n\n  albersUsa.fitHeight = function(height, object) {\n    return fitHeight(albersUsa, height, object);\n  };\n\n  function reset() {\n    cache = cacheStream = null;\n    return albersUsa;\n  }\n\n  return albersUsa.scale(1070);\n}\n","import {asin, atan2, cos, sin, sqrt} from \"../math\";\n\nexport function azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nexport function azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n","import {asin, sqrt} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\n\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n  return 2 * asin(z / 2);\n});\n\nexport default function() {\n  return projection(azimuthalEqualAreaRaw)\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","import {acos, sin} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n  return (c = acos(c)) && c / sin(c);\n});\n\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n  return z;\n});\n\nexport default function() {\n  return projection(azimuthalEquidistantRaw)\n      .scale(79.4188)\n      .clipAngle(180 - 1e-3);\n}\n","import {atan, exp, halfPi, log, pi, tan, tau} from \"../math\";\nimport rotation from \"../rotation\";\nimport projection from \"./index\";\n\nexport function mercatorRaw(lambda, phi) {\n  return [lambda, log(tan((halfPi + phi) / 2))];\n}\n\nmercatorRaw.invert = function(x, y) {\n  return [x, 2 * atan(exp(y)) - halfPi];\n};\n\nexport default function() {\n  return mercatorProjection(mercatorRaw)\n      .scale(961 / tau);\n}\n\nexport function mercatorProjection(project) {\n  var m = projection(project),\n      center = m.center,\n      scale = m.scale,\n      translate = m.translate,\n      clipExtent = m.clipExtent,\n      x0 = null, y0, x1, y1; // clip extent\n\n  m.scale = function(_) {\n    return arguments.length ? (scale(_), reclip()) : scale();\n  };\n\n  m.translate = function(_) {\n    return arguments.length ? (translate(_), reclip()) : translate();\n  };\n\n  m.center = function(_) {\n    return arguments.length ? (center(_), reclip()) : center();\n  };\n\n  m.clipExtent = function(_) {\n    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  function reclip() {\n    var k = pi * scale(),\n        t = m(rotation(m.rotate()).invert([0, 0]));\n    return clipExtent(x0 == null\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n  }\n\n  return reclip();\n}\n","import {abs, atan, atan2, cos, epsilon, halfPi, log, pow, sign, sin, sqrt, tan} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {mercatorRaw} from \"./mercator\";\n\nfunction tany(y) {\n  return tan((halfPi + y) / 2);\n}\n\nexport function conicConformalRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),\n      f = cy0 * pow(tany(y0), n) / n;\n\n  if (!n) return mercatorRaw;\n\n  function project(x, y) {\n    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }\n    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }\n    var r = f / pow(tany(y), n);\n    return [r * sin(n * x), f - r * cos(n * x)];\n  }\n\n  project.invert = function(x, y) {\n    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);\n    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicConformalRaw)\n      .scale(109.5)\n      .parallels([30, 30]);\n}\n","import projection from \"./index\";\n\nexport function equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\n\nequirectangularRaw.invert = equirectangularRaw;\n\nexport default function() {\n  return projection(equirectangularRaw)\n      .scale(152.63);\n}\n","import {abs, atan2, cos, epsilon, sign, sin, sqrt} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {equirectangularRaw} from \"./equirectangular\";\n\nexport function conicEquidistantRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n      g = cy0 / n + y0;\n\n  if (abs(n) < epsilon) return equirectangularRaw;\n\n  function project(x, y) {\n    var gy = g - y, nx = n * x;\n    return [gy * sin(nx), g - gy * cos(nx)];\n  }\n\n  project.invert = function(x, y) {\n    var gy = g - y;\n    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEquidistantRaw)\n      .scale(131.154)\n      .center([0, 13.9389]);\n}\n","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function gnomonicRaw(x, y) {\n  var cy = cos(y), k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\ngnomonicRaw.invert = azimuthalInvert(atan);\n\nexport default function() {\n  return projection(gnomonicRaw)\n      .scale(144.049)\n      .clipAngle(60);\n}\n","import clipRectangle from \"../clip/rectangle\";\nimport identity from \"../identity\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit\";\n\nfunction scaleTranslate(kx, ky, tx, ty) {\n  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity : transformer({\n    point: function(x, y) {\n      this.stream.point(x * kx + tx, y * ky + ty);\n    }\n  });\n}\n\nexport default function() {\n  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = identity, // scale, translate and reflect\n      x0 = null, y0, x1, y1, // clip extent\n      postclip = identity,\n      cache,\n      cacheStream,\n      projection;\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return projection = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));\n    },\n    postclip: function(_) {\n      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n    },\n    clipExtent: function(_) {\n      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    },\n    scale: function(_) {\n      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;\n    },\n    translate: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];\n    },\n    reflectX: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;\n    },\n    reflectY: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;\n    },\n    fitExtent: function(extent, object) {\n      return fitExtent(projection, extent, object);\n    },\n    fitSize: function(size, object) {\n      return fitSize(projection, size, object);\n    },\n    fitWidth: function(width, object) {\n      return fitWidth(projection, width, object);\n    },\n    fitHeight: function(height, object) {\n      return fitHeight(projection, height, object);\n    }\n  };\n}\n","import projection from \"./index\";\nimport {abs, epsilon} from \"../math\";\n\nexport function naturalEarth1Raw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\n  return [\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\n  ];\n}\n\nnaturalEarth1Raw.invert = function(x, y) {\n  var phi = y, i = 25, delta;\n  do {\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n  } while (abs(delta) > epsilon && --i > 0);\n  return [\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarth1Raw)\n      .scale(175.295);\n}\n","import {asin, cos, epsilon, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\n\northographicRaw.invert = azimuthalInvert(asin);\n\nexport default function() {\n  return projection(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + epsilon);\n}\n","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function stereographicRaw(x, y) {\n  var cy = cos(y), k = 1 + cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\nstereographicRaw.invert = azimuthalInvert(function(z) {\n  return 2 * atan(z);\n});\n\nexport default function() {\n  return projection(stereographicRaw)\n      .scale(250)\n      .clipAngle(142);\n}\n","import {atan, exp, halfPi, log, tan} from \"../math\";\nimport {mercatorProjection} from \"./mercator\";\n\nexport function transverseMercatorRaw(lambda, phi) {\n  return [log(tan((halfPi + phi) / 2)), -lambda];\n}\n\ntransverseMercatorRaw.invert = function(x, y) {\n  return [-y, 2 * atan(exp(x)) - halfPi];\n};\n\nexport default function() {\n  var m = mercatorProjection(transverseMercatorRaw),\n      center = m.center,\n      rotate = m.rotate;\n\n  m.center = function(_) {\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n  };\n\n  m.rotate = function(_) {\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n  };\n\n  return rotate([0, 0, 90])\n      .scale(159.155);\n}\n","export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","import ascending from \"./ascending\";\n\nexport default function(compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo;\n    },\n    right: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;\n        else lo = mid + 1;\n      }\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function(d, x) {\n    return ascending(f(d), x);\n  };\n}\n","import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\n\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;\n","export default function(array, f) {\n  if (f == null) f = pair;\n  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);\n  while (i < n) pairs[i] = f(p, p = array[++i]);\n  return pairs;\n}\n\nexport function pair(a, b) {\n  return [a, b];\n}\n","import {pair} from \"./pairs\";\n\nexport default function(values0, values1, reduce) {\n  var n0 = values0.length,\n      n1 = values1.length,\n      values = new Array(n0 * n1),\n      i0,\n      i1,\n      i,\n      value0;\n\n  if (reduce == null) reduce = pair;\n\n  for (i0 = i = 0; i0 < n0; ++i0) {\n    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {\n      values[i] = reduce(value0, values1[i1]);\n    }\n  }\n\n  return values;\n}\n","export default function(a, b) {\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}\n","export default function(x) {\n  return x === null ? NaN : +x;\n}\n","import number from \"./number\";\n\nexport default function(values, valueof) {\n  var n = values.length,\n      m = 0,\n      i = -1,\n      mean = 0,\n      value,\n      delta,\n      sum = 0;\n\n  if (valueof == null) {\n    while (++i < n) {\n      if (!isNaN(value = number(values[i]))) {\n        delta = value - mean;\n        mean += delta / ++m;\n        sum += delta * (value - mean);\n      }\n    }\n  }\n\n  else {\n    while (++i < n) {\n      if (!isNaN(value = number(valueof(values[i], i, values)))) {\n        delta = value - mean;\n        mean += delta / ++m;\n        sum += delta * (value - mean);\n      }\n    }\n  }\n\n  if (m > 1) return sum / (m - 1);\n}\n","import variance from \"./variance\";\n\nexport default function(array, f) {\n  var v = variance(array, f);\n  return v ? Math.sqrt(v) : v;\n}\n","export default function(values, valueof) {\n  var n = values.length,\n      i = -1,\n      value,\n      min,\n      max;\n\n  if (valueof == null) {\n    while (++i < n) { // Find the first comparable value.\n      if ((value = values[i]) != null && value >= value) {\n        min = max = value;\n        while (++i < n) { // Compare the remaining values.\n          if ((value = values[i]) != null) {\n            if (min > value) min = value;\n            if (max < value) max = value;\n          }\n        }\n      }\n    }\n  }\n\n  else {\n    while (++i < n) { // Find the first comparable value.\n      if ((value = valueof(values[i], i, values)) != null && value >= value) {\n        min = max = value;\n        while (++i < n) { // Compare the remaining values.\n          if ((value = valueof(values[i], i, values)) != null) {\n            if (min > value) min = value;\n            if (max < value) max = value;\n          }\n        }\n      }\n    }\n  }\n\n  return [min, max];\n}\n","var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(x) {\n  return x;\n}\n","export default function(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n","var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n    while (++i < n) ticks[i] = (start + i) * step;\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n    while (++i < n) ticks[i] = (start - i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n","export default function(values) {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}\n","import {slice} from \"./array\";\nimport bisect from \"./bisect\";\nimport constant from \"./constant\";\nimport extent from \"./extent\";\nimport identity from \"./identity\";\nimport range from \"./range\";\nimport {tickStep} from \"./ticks\";\nimport sturges from \"./threshold/sturges\";\n\nexport default function() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    var i,\n        n = data.length,\n        x,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      tz = tickStep(x0, x1, tz);\n      tz = range(Math.ceil(x0 / tz) * tz, Math.floor(x1 / tz) * tz, tz); // exclusive\n    }\n\n    // Remove any thresholds outside the domain.\n    var m = tz.length;\n    while (tz[0] <= x0) tz.shift(), --m;\n    while (tz[m - 1] > x1) tz.pop(), --m;\n\n    var bins = new Array(m + 1),\n        bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    for (i = 0; i < n; ++i) {\n      x = values[i];\n      if (x0 <= x && x <= x1) {\n        bins[bisect(tz, x, 0, m)].push(data[i]);\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function(_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n  };\n\n  return histogram;\n}\n","import number from \"./number\";\n\nexport default function(values, p, valueof) {\n  if (valueof == null) valueof = number;\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\n","import {map} from \"../array\";\nimport ascending from \"../ascending\";\nimport number from \"../number\";\nimport quantile from \"../quantile\";\n\nexport default function(values, min, max) {\n  values = map.call(values, number).sort(ascending);\n  return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(values.length, -1 / 3)));\n}\n","import deviation from \"../deviation\";\n\nexport default function(values, min, max) {\n  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));\n}\n","export default function(values, valueof) {\n  var n = values.length,\n      i = -1,\n      value,\n      max;\n\n  if (valueof == null) {\n    while (++i < n) { // Find the first comparable value.\n      if ((value = values[i]) != null && value >= value) {\n        max = value;\n        while (++i < n) { // Compare the remaining values.\n          if ((value = values[i]) != null && value > max) {\n            max = value;\n          }\n        }\n      }\n    }\n  }\n\n  else {\n    while (++i < n) { // Find the first comparable value.\n      if ((value = valueof(values[i], i, values)) != null && value >= value) {\n        max = value;\n        while (++i < n) { // Compare the remaining values.\n          if ((value = valueof(values[i], i, values)) != null && value > max) {\n            max = value;\n          }\n        }\n      }\n    }\n  }\n\n  return max;\n}\n","import number from \"./number\";\n\nexport default function(values, valueof) {\n  var n = values.length,\n      m = n,\n      i = -1,\n      value,\n      sum = 0;\n\n  if (valueof == null) {\n    while (++i < n) {\n      if (!isNaN(value = number(values[i]))) sum += value;\n      else --m;\n    }\n  }\n\n  else {\n    while (++i < n) {\n      if (!isNaN(value = number(valueof(values[i], i, values)))) sum += value;\n      else --m;\n    }\n  }\n\n  if (m) return sum / m;\n}\n","import ascending from \"./ascending\";\nimport number from \"./number\";\nimport quantile from \"./quantile\";\n\nexport default function(values, valueof) {\n  var n = values.length,\n      i = -1,\n      value,\n      numbers = [];\n\n  if (valueof == null) {\n    while (++i < n) {\n      if (!isNaN(value = number(values[i]))) {\n        numbers.push(value);\n      }\n    }\n  }\n\n  else {\n    while (++i < n) {\n      if (!isNaN(value = number(valueof(values[i], i, values)))) {\n        numbers.push(value);\n      }\n    }\n  }\n\n  return quantile(numbers.sort(ascending), 0.5);\n}\n","export default function(arrays) {\n  var n = arrays.length,\n      m,\n      i = -1,\n      j = 0,\n      merged,\n      array;\n\n  while (++i < n) j += arrays[i].length;\n  merged = new Array(j);\n\n  while (--n >= 0) {\n    array = arrays[n];\n    m = array.length;\n    while (--m >= 0) {\n      merged[--j] = array[m];\n    }\n  }\n\n  return merged;\n}\n","export default function(values, valueof) {\n  var n = values.length,\n      i = -1,\n      value,\n      min;\n\n  if (valueof == null) {\n    while (++i < n) { // Find the first comparable value.\n      if ((value = values[i]) != null && value >= value) {\n        min = value;\n        while (++i < n) { // Compare the remaining values.\n          if ((value = values[i]) != null && min > value) {\n            min = value;\n          }\n        }\n      }\n    }\n  }\n\n  else {\n    while (++i < n) { // Find the first comparable value.\n      if ((value = valueof(values[i], i, values)) != null && value >= value) {\n        min = value;\n        while (++i < n) { // Compare the remaining values.\n          if ((value = valueof(values[i], i, values)) != null && min > value) {\n            min = value;\n          }\n        }\n      }\n    }\n  }\n\n  return min;\n}\n","export default function(array, indexes) {\n  var i = indexes.length, permutes = new Array(i);\n  while (i--) permutes[i] = array[indexes[i]];\n  return permutes;\n}\n","import ascending from \"./ascending\";\n\nexport default function(values, compare) {\n  if (!(n = values.length)) return;\n  var n,\n      i = 0,\n      j = 0,\n      xi,\n      xj = values[j];\n\n  if (compare == null) compare = ascending;\n\n  while (++i < n) {\n    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {\n      xj = xi, j = i;\n    }\n  }\n\n  if (compare(xj, xj) === 0) return j;\n}\n","export default function(array, i0, i1) {\n  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),\n      t,\n      i;\n\n  while (m) {\n    i = Math.random() * m-- | 0;\n    t = array[m + i0];\n    array[m + i0] = array[i + i0];\n    array[i + i0] = t;\n  }\n\n  return array;\n}\n","export default function(values, valueof) {\n  var n = values.length,\n      i = -1,\n      value,\n      sum = 0;\n\n  if (valueof == null) {\n    while (++i < n) {\n      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.\n    }\n  }\n\n  else {\n    while (++i < n) {\n      if (value = +valueof(values[i], i, values)) sum += value;\n    }\n  }\n\n  return sum;\n}\n","import min from \"./min\";\n\nexport default function(matrix) {\n  if (!(n = matrix.length)) return [];\n  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {\n    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\n      row[j] = matrix[j][i];\n    }\n  }\n  return transpose;\n}\n\nfunction length(d) {\n  return d.length;\n}\n","import transpose from \"./transpose\";\n\nexport default function() {\n  return transpose(arguments);\n}\n","export default function(constructor, factory, prototype) {\n  constructor.prototype = factory.prototype = prototype;\n  prototype.constructor = constructor;\n}\n\nexport function extend(parent, definition) {\n  var prototype = Object.create(parent.prototype);\n  for (var key in definition) prototype[key] = definition[key];\n  return prototype;\n}\n","import define, {extend} from \"./define\";\n\nexport function Color() {}\n\nexport var darker = 0.7;\nexport var brighter = 1 / darker;\n\nvar reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n    reN = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n    reP = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n    reHex3 = /^#([0-9a-f]{3})$/,\n    reHex6 = /^#([0-9a-f]{6})$/,\n    reRgbInteger = new RegExp(\"^rgb\\\\(\" + [reI, reI, reI] + \"\\\\)$\"),\n    reRgbPercent = new RegExp(\"^rgb\\\\(\" + [reP, reP, reP] + \"\\\\)$\"),\n    reRgbaInteger = new RegExp(\"^rgba\\\\(\" + [reI, reI, reI, reN] + \"\\\\)$\"),\n    reRgbaPercent = new RegExp(\"^rgba\\\\(\" + [reP, reP, reP, reN] + \"\\\\)$\"),\n    reHslPercent = new RegExp(\"^hsl\\\\(\" + [reN, reP, reP] + \"\\\\)$\"),\n    reHslaPercent = new RegExp(\"^hsla\\\\(\" + [reN, reP, reP, reN] + \"\\\\)$\");\n\nvar named = {\n  aliceblue: 0xf0f8ff,\n  antiquewhite: 0xfaebd7,\n  aqua: 0x00ffff,\n  aquamarine: 0x7fffd4,\n  azure: 0xf0ffff,\n  beige: 0xf5f5dc,\n  bisque: 0xffe4c4,\n  black: 0x000000,\n  blanchedalmond: 0xffebcd,\n  blue: 0x0000ff,\n  blueviolet: 0x8a2be2,\n  brown: 0xa52a2a,\n  burlywood: 0xdeb887,\n  cadetblue: 0x5f9ea0,\n  chartreuse: 0x7fff00,\n  chocolate: 0xd2691e,\n  coral: 0xff7f50,\n  cornflowerblue: 0x6495ed,\n  cornsilk: 0xfff8dc,\n  crimson: 0xdc143c,\n  cyan: 0x00ffff,\n  darkblue: 0x00008b,\n  darkcyan: 0x008b8b,\n  darkgoldenrod: 0xb8860b,\n  darkgray: 0xa9a9a9,\n  darkgreen: 0x006400,\n  darkgrey: 0xa9a9a9,\n  darkkhaki: 0xbdb76b,\n  darkmagenta: 0x8b008b,\n  darkolivegreen: 0x556b2f,\n  darkorange: 0xff8c00,\n  darkorchid: 0x9932cc,\n  darkred: 0x8b0000,\n  darksalmon: 0xe9967a,\n  darkseagreen: 0x8fbc8f,\n  darkslateblue: 0x483d8b,\n  darkslategray: 0x2f4f4f,\n  darkslategrey: 0x2f4f4f,\n  darkturquoise: 0x00ced1,\n  darkviolet: 0x9400d3,\n  deeppink: 0xff1493,\n  deepskyblue: 0x00bfff,\n  dimgray: 0x696969,\n  dimgrey: 0x696969,\n  dodgerblue: 0x1e90ff,\n  firebrick: 0xb22222,\n  floralwhite: 0xfffaf0,\n  forestgreen: 0x228b22,\n  fuchsia: 0xff00ff,\n  gainsboro: 0xdcdcdc,\n  ghostwhite: 0xf8f8ff,\n  gold: 0xffd700,\n  goldenrod: 0xdaa520,\n  gray: 0x808080,\n  green: 0x008000,\n  greenyellow: 0xadff2f,\n  grey: 0x808080,\n  honeydew: 0xf0fff0,\n  hotpink: 0xff69b4,\n  indianred: 0xcd5c5c,\n  indigo: 0x4b0082,\n  ivory: 0xfffff0,\n  khaki: 0xf0e68c,\n  lavender: 0xe6e6fa,\n  lavenderblush: 0xfff0f5,\n  lawngreen: 0x7cfc00,\n  lemonchiffon: 0xfffacd,\n  lightblue: 0xadd8e6,\n  lightcoral: 0xf08080,\n  lightcyan: 0xe0ffff,\n  lightgoldenrodyellow: 0xfafad2,\n  lightgray: 0xd3d3d3,\n  lightgreen: 0x90ee90,\n  lightgrey: 0xd3d3d3,\n  lightpink: 0xffb6c1,\n  lightsalmon: 0xffa07a,\n  lightseagreen: 0x20b2aa,\n  lightskyblue: 0x87cefa,\n  lightslategray: 0x778899,\n  lightslategrey: 0x778899,\n  lightsteelblue: 0xb0c4de,\n  lightyellow: 0xffffe0,\n  lime: 0x00ff00,\n  limegreen: 0x32cd32,\n  linen: 0xfaf0e6,\n  magenta: 0xff00ff,\n  maroon: 0x800000,\n  mediumaquamarine: 0x66cdaa,\n  mediumblue: 0x0000cd,\n  mediumorchid: 0xba55d3,\n  mediumpurple: 0x9370db,\n  mediumseagreen: 0x3cb371,\n  mediumslateblue: 0x7b68ee,\n  mediumspringgreen: 0x00fa9a,\n  mediumturquoise: 0x48d1cc,\n  mediumvioletred: 0xc71585,\n  midnightblue: 0x191970,\n  mintcream: 0xf5fffa,\n  mistyrose: 0xffe4e1,\n  moccasin: 0xffe4b5,\n  navajowhite: 0xffdead,\n  navy: 0x000080,\n  oldlace: 0xfdf5e6,\n  olive: 0x808000,\n  olivedrab: 0x6b8e23,\n  orange: 0xffa500,\n  orangered: 0xff4500,\n  orchid: 0xda70d6,\n  palegoldenrod: 0xeee8aa,\n  palegreen: 0x98fb98,\n  paleturquoise: 0xafeeee,\n  palevioletred: 0xdb7093,\n  papayawhip: 0xffefd5,\n  peachpuff: 0xffdab9,\n  peru: 0xcd853f,\n  pink: 0xffc0cb,\n  plum: 0xdda0dd,\n  powderblue: 0xb0e0e6,\n  purple: 0x800080,\n  rebeccapurple: 0x663399,\n  red: 0xff0000,\n  rosybrown: 0xbc8f8f,\n  royalblue: 0x4169e1,\n  saddlebrown: 0x8b4513,\n  salmon: 0xfa8072,\n  sandybrown: 0xf4a460,\n  seagreen: 0x2e8b57,\n  seashell: 0xfff5ee,\n  sienna: 0xa0522d,\n  silver: 0xc0c0c0,\n  skyblue: 0x87ceeb,\n  slateblue: 0x6a5acd,\n  slategray: 0x708090,\n  slategrey: 0x708090,\n  snow: 0xfffafa,\n  springgreen: 0x00ff7f,\n  steelblue: 0x4682b4,\n  tan: 0xd2b48c,\n  teal: 0x008080,\n  thistle: 0xd8bfd8,\n  tomato: 0xff6347,\n  turquoise: 0x40e0d0,\n  violet: 0xee82ee,\n  wheat: 0xf5deb3,\n  white: 0xffffff,\n  whitesmoke: 0xf5f5f5,\n  yellow: 0xffff00,\n  yellowgreen: 0x9acd32\n};\n\ndefine(Color, color, {\n  displayable: function() {\n    return this.rgb().displayable();\n  },\n  toString: function() {\n    return this.rgb() + \"\";\n  }\n});\n\nexport default function color(format) {\n  var m;\n  format = (format + \"\").trim().toLowerCase();\n  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00\n      : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000\n      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n      : named.hasOwnProperty(format) ? rgbn(named[format])\n      : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\n      : null;\n}\n\nfunction rgbn(n) {\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n}\n\nfunction rgba(r, g, b, a) {\n  if (a <= 0) r = g = b = NaN;\n  return new Rgb(r, g, b, a);\n}\n\nexport function rgbConvert(o) {\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Rgb;\n  o = o.rgb();\n  return new Rgb(o.r, o.g, o.b, o.opacity);\n}\n\nexport function rgb(r, g, b, opacity) {\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n}\n\nexport function Rgb(r, g, b, opacity) {\n  this.r = +r;\n  this.g = +g;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Rgb, rgb, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  rgb: function() {\n    return this;\n  },\n  displayable: function() {\n    return (0 <= this.r && this.r <= 255)\n        && (0 <= this.g && this.g <= 255)\n        && (0 <= this.b && this.b <= 255)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  toString: function() {\n    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n    return (a === 1 ? \"rgb(\" : \"rgba(\")\n        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \"\n        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \"\n        + Math.max(0, Math.min(255, Math.round(this.b) || 0))\n        + (a === 1 ? \")\" : \", \" + a + \")\");\n  }\n}));\n\nfunction hsla(h, s, l, a) {\n  if (a <= 0) h = s = l = NaN;\n  else if (l <= 0 || l >= 1) h = s = NaN;\n  else if (s <= 0) h = NaN;\n  return new Hsl(h, s, l, a);\n}\n\nexport function hslConvert(o) {\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Hsl;\n  if (o instanceof Hsl) return o;\n  o = o.rgb();\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      h = NaN,\n      s = max - min,\n      l = (max + min) / 2;\n  if (s) {\n    if (r === max) h = (g - b) / s + (g < b) * 6;\n    else if (g === max) h = (b - r) / s + 2;\n    else h = (r - g) / s + 4;\n    s /= l < 0.5 ? max + min : 2 - max - min;\n    h *= 60;\n  } else {\n    s = l > 0 && l < 1 ? 0 : h;\n  }\n  return new Hsl(h, s, l, o.opacity);\n}\n\nexport function hsl(h, s, l, opacity) {\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hsl(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Hsl, hsl, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb: function() {\n    var h = this.h % 360 + (this.h < 0) * 360,\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n        l = this.l,\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\n        m1 = 2 * l - m2;\n    return new Rgb(\n      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n      hsl2rgb(h, m1, m2),\n      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n      this.opacity\n    );\n  },\n  displayable: function() {\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n        && (0 <= this.l && this.l <= 1)\n        && (0 <= this.opacity && this.opacity <= 1);\n  }\n}));\n\n/* From FvD 13.37, CSS Color Module Level 3 */\nfunction hsl2rgb(h, m1, m2) {\n  return (h < 60 ? m1 + (m2 - m1) * h / 60\n      : h < 180 ? m2\n      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n      : m1) * 255;\n}\n","export var deg2rad = Math.PI / 180;\nexport var rad2deg = 180 / Math.PI;\n","import define, {extend} from \"./define\";\nimport {Color, rgbConvert, Rgb} from \"./color\";\nimport {deg2rad, rad2deg} from \"./math\";\n\nvar Kn = 18,\n    Xn = 0.950470, // D65 standard referent\n    Yn = 1,\n    Zn = 1.088830,\n    t0 = 4 / 29,\n    t1 = 6 / 29,\n    t2 = 3 * t1 * t1,\n    t3 = t1 * t1 * t1;\n\nfunction labConvert(o) {\n  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);\n  if (o instanceof Hcl) {\n    var h = o.h * deg2rad;\n    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);\n  }\n  if (!(o instanceof Rgb)) o = rgbConvert(o);\n  var b = rgb2xyz(o.r),\n      a = rgb2xyz(o.g),\n      l = rgb2xyz(o.b),\n      x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),\n      y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),\n      z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);\n  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);\n}\n\nexport default function lab(l, a, b, opacity) {\n  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);\n}\n\nexport function Lab(l, a, b, opacity) {\n  this.l = +l;\n  this.a = +a;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Lab, lab, extend(Color, {\n  brighter: function(k) {\n    return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);\n  },\n  darker: function(k) {\n    return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);\n  },\n  rgb: function() {\n    var y = (this.l + 16) / 116,\n        x = isNaN(this.a) ? y : y + this.a / 500,\n        z = isNaN(this.b) ? y : y - this.b / 200;\n    y = Yn * lab2xyz(y);\n    x = Xn * lab2xyz(x);\n    z = Zn * lab2xyz(z);\n    return new Rgb(\n      xyz2rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB\n      xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),\n      xyz2rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z),\n      this.opacity\n    );\n  }\n}));\n\nfunction xyz2lab(t) {\n  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\n}\n\nfunction lab2xyz(t) {\n  return t > t1 ? t * t * t : t2 * (t - t0);\n}\n\nfunction xyz2rgb(x) {\n  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\n}\n\nfunction rgb2xyz(x) {\n  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n}\n\nfunction hclConvert(o) {\n  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);\n  if (!(o instanceof Lab)) o = labConvert(o);\n  var h = Math.atan2(o.b, o.a) * rad2deg;\n  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);\n}\n\nexport function hcl(h, c, l, opacity) {\n  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n}\n\nexport function Hcl(h, c, l, opacity) {\n  this.h = +h;\n  this.c = +c;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Hcl, hcl, extend(Color, {\n  brighter: function(k) {\n    return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);\n  },\n  darker: function(k) {\n    return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);\n  },\n  rgb: function() {\n    return labConvert(this).rgb();\n  }\n}));\n","import define, {extend} from \"./define\";\nimport {Color, rgbConvert, Rgb, darker, brighter} from \"./color\";\nimport {deg2rad, rad2deg} from \"./math\";\n\nvar A = -0.14861,\n    B = +1.78277,\n    C = -0.29227,\n    D = -0.90649,\n    E = +1.97294,\n    ED = E * D,\n    EB = E * B,\n    BC_DA = B * C - D * A;\n\nfunction cubehelixConvert(o) {\n  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Rgb)) o = rgbConvert(o);\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\n      bl = b - l,\n      k = (E * (g - l) - C * bl) / D,\n      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1\n      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;\n  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\n}\n\nexport default function cubehelix(h, s, l, opacity) {\n  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\n}\n\nexport function Cubehelix(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Cubehelix, cubehelix, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb: function() {\n    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,\n        l = +this.l,\n        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\n        cosh = Math.cos(h),\n        sinh = Math.sin(h);\n    return new Rgb(\n      255 * (l + a * (A * cosh + B * sinh)),\n      255 * (l + a * (C * cosh + D * sinh)),\n      255 * (l + a * (E * cosh)),\n      this.opacity\n    );\n  }\n}));\n","export function basis(t1, v0, v1, v2, v3) {\n  var t2 = t1 * t1, t3 = t2 * t1;\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n      + (4 - 6 * t2 + 3 * t3) * v1\n      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n      + t3 * v3) / 6;\n}\n\nexport default function(values) {\n  var n = values.length - 1;\n  return function(t) {\n    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n        v1 = values[i],\n        v2 = values[i + 1],\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","import {basis} from \"./basis\";\n\nexport default function(values) {\n  var n = values.length;\n  return function(t) {\n    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n        v0 = values[(i + n - 1) % n],\n        v1 = values[i % n],\n        v2 = values[(i + 1) % n],\n        v3 = values[(i + 2) % n];\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","import constant from \"./constant\";\n\nfunction linear(a, d) {\n  return function(t) {\n    return a + t * d;\n  };\n}\n\nfunction exponential(a, b, y) {\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n    return Math.pow(a + t * b, y);\n  };\n}\n\nexport function hue(a, b) {\n  var d = b - a;\n  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);\n}\n\nexport function gamma(y) {\n  return (y = +y) === 1 ? nogamma : function(a, b) {\n    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);\n  };\n}\n\nexport default function nogamma(a, b) {\n  var d = b - a;\n  return d ? linear(a, d) : constant(isNaN(a) ? b : a);\n}\n","import {rgb as colorRgb} from \"d3-color\";\nimport basis from \"./basis\";\nimport basisClosed from \"./basisClosed\";\nimport nogamma, {gamma} from \"./color\";\n\nexport default (function rgbGamma(y) {\n  var color = gamma(y);\n\n  function rgb(start, end) {\n    var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r),\n        g = color(start.g, end.g),\n        b = color(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function(t) {\n      start.r = r(t);\n      start.g = g(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  rgb.gamma = rgbGamma;\n\n  return rgb;\n})(1);\n\nfunction rgbSpline(spline) {\n  return function(colors) {\n    var n = colors.length,\n        r = new Array(n),\n        g = new Array(n),\n        b = new Array(n),\n        i, color;\n    for (i = 0; i < n; ++i) {\n      color = colorRgb(colors[i]);\n      r[i] = color.r || 0;\n      g[i] = color.g || 0;\n      b[i] = color.b || 0;\n    }\n    r = spline(r);\n    g = spline(g);\n    b = spline(b);\n    color.opacity = 1;\n    return function(t) {\n      color.r = r(t);\n      color.g = g(t);\n      color.b = b(t);\n      return color + \"\";\n    };\n  };\n}\n\nexport var rgbBasis = rgbSpline(basis);\nexport var rgbBasisClosed = rgbSpline(basisClosed);\n","import value from \"./value\";\n\nexport default function(a, b) {\n  var nb = b ? b.length : 0,\n      na = a ? Math.min(nb, a.length) : 0,\n      x = new Array(na),\n      c = new Array(nb),\n      i;\n\n  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);\n  for (; i < nb; ++i) c[i] = b[i];\n\n  return function(t) {\n    for (i = 0; i < na; ++i) c[i] = x[i](t);\n    return c;\n  };\n}\n","export default function(a, b) {\n  var d = new Date;\n  return a = +a, b -= a, function(t) {\n    return d.setTime(a + b * t), d;\n  };\n}\n","export default function(a, b) {\n  return a = +a, b -= a, function(t) {\n    return a + b * t;\n  };\n}\n","import value from \"./value\";\n\nexport default function(a, b) {\n  var i = {},\n      c = {},\n      k;\n\n  if (a === null || typeof a !== \"object\") a = {};\n  if (b === null || typeof b !== \"object\") b = {};\n\n  for (k in b) {\n    if (k in a) {\n      i[k] = value(a[k], b[k]);\n    } else {\n      c[k] = b[k];\n    }\n  }\n\n  return function(t) {\n    for (k in i) c[k] = i[k](t);\n    return c;\n  };\n}\n","import number from \"./number\";\n\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n    reB = new RegExp(reA.source, \"g\");\n\nfunction zero(b) {\n  return function() {\n    return b;\n  };\n}\n\nfunction one(b) {\n  return function(t) {\n    return b(t) + \"\";\n  };\n}\n\nexport default function(a, b) {\n  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n      am, // current match in a\n      bm, // current match in b\n      bs, // string preceding current number in b, if any\n      i = -1, // index in s\n      s = [], // string constants and placeholders\n      q = []; // number interpolators\n\n  // Coerce inputs to strings.\n  a = a + \"\", b = b + \"\";\n\n  // Interpolate pairs of numbers in a & b.\n  while ((am = reA.exec(a))\n      && (bm = reB.exec(b))) {\n    if ((bs = bm.index) > bi) { // a string precedes the next number in b\n      bs = b.slice(bi, bs);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n      if (s[i]) s[i] += bm; // coalesce with previous string\n      else s[++i] = bm;\n    } else { // interpolate non-matching numbers\n      s[++i] = null;\n      q.push({i: i, x: number(am, bm)});\n    }\n    bi = reB.lastIndex;\n  }\n\n  // Add remains of b.\n  if (bi < b.length) {\n    bs = b.slice(bi);\n    if (s[i]) s[i] += bs; // coalesce with previous string\n    else s[++i] = bs;\n  }\n\n  // Special optimization for only a single match.\n  // Otherwise, interpolate each of the numbers and rejoin the string.\n  return s.length < 2 ? (q[0]\n      ? one(q[0].x)\n      : zero(b))\n      : (b = q.length, function(t) {\n          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n          return s.join(\"\");\n        });\n}\n","import decompose, {identity} from \"./decompose\";\n\nvar cssNode,\n    cssRoot,\n    cssView,\n    svgNode;\n\nexport function parseCss(value) {\n  if (value === \"none\") return identity;\n  if (!cssNode) cssNode = document.createElement(\"DIV\"), cssRoot = document.documentElement, cssView = document.defaultView;\n  cssNode.style.transform = value;\n  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue(\"transform\");\n  cssRoot.removeChild(cssNode);\n  value = value.slice(7, -1).split(\",\");\n  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);\n}\n\nexport function parseSvg(value) {\n  if (value == null) return identity;\n  if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n  svgNode.setAttribute(\"transform\", value);\n  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;\n  value = value.matrix;\n  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\n}\n","import {color} from \"d3-color\";\nimport rgb from \"./rgb\";\nimport array from \"./array\";\nimport date from \"./date\";\nimport number from \"./number\";\nimport object from \"./object\";\nimport string from \"./string\";\nimport constant from \"./constant\";\n\nexport default function(a, b) {\n  var t = typeof b, c;\n  return b == null || t === \"boolean\" ? constant(b)\n      : (t === \"number\" ? number\n      : t === \"string\" ? ((c = color(b)) ? (b = c, rgb) : string)\n      : b instanceof color ? rgb\n      : b instanceof Date ? date\n      : Array.isArray(b) ? array\n      : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? object\n      : number)(a, b);\n}\n","export default function(a, b) {\n  return a = +a, b -= a, function(t) {\n    return Math.round(a + b * t);\n  };\n}\n","var degrees = 180 / Math.PI;\n\nexport var identity = {\n  translateX: 0,\n  translateY: 0,\n  rotate: 0,\n  skewX: 0,\n  scaleX: 1,\n  scaleY: 1\n};\n\nexport default function(a, b, c, d, e, f) {\n  var scaleX, scaleY, skewX;\n  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n  return {\n    translateX: e,\n    translateY: f,\n    rotate: Math.atan2(b, a) * degrees,\n    skewX: Math.atan(skewX) * degrees,\n    scaleX: scaleX,\n    scaleY: scaleY\n  };\n}\n","import number from \"../number\";\nimport {parseCss, parseSvg} from \"./parse\";\n\nfunction interpolateTransform(parse, pxComma, pxParen, degParen) {\n\n  function pop(s) {\n    return s.length ? s.pop() + \" \" : \"\";\n  }\n\n  function translate(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(\"translate(\", null, pxComma, null, pxParen);\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\n    } else if (xb || yb) {\n      s.push(\"translate(\" + xb + pxComma + yb + pxParen);\n    }\n  }\n\n  function rotate(a, b, s, q) {\n    if (a !== b) {\n      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\n      q.push({i: s.push(pop(s) + \"rotate(\", null, degParen) - 2, x: number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"rotate(\" + b + degParen);\n    }\n  }\n\n  function skewX(a, b, s, q) {\n    if (a !== b) {\n      q.push({i: s.push(pop(s) + \"skewX(\", null, degParen) - 2, x: number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"skewX(\" + b + degParen);\n    }\n  }\n\n  function scale(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\n    } else if (xb !== 1 || yb !== 1) {\n      s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\n    }\n  }\n\n  return function(a, b) {\n    var s = [], // string constants and placeholders\n        q = []; // number interpolators\n    a = parse(a), b = parse(b);\n    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n    rotate(a.rotate, b.rotate, s, q);\n    skewX(a.skewX, b.skewX, s, q);\n    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n    a = b = null; // gc\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  };\n}\n\nexport var interpolateTransformCss = interpolateTransform(parseCss, \"px, \", \"px)\", \"deg)\");\nexport var interpolateTransformSvg = interpolateTransform(parseSvg, \", \", \")\", \")\");\n","var rho = Math.SQRT2,\n    rho2 = 2,\n    rho4 = 4,\n    epsilon2 = 1e-12;\n\nfunction cosh(x) {\n  return ((x = Math.exp(x)) + 1 / x) / 2;\n}\n\nfunction sinh(x) {\n  return ((x = Math.exp(x)) - 1 / x) / 2;\n}\n\nfunction tanh(x) {\n  return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n}\n\n// p0 = [ux0, uy0, w0]\n// p1 = [ux1, uy1, w1]\nexport default function(p0, p1) {\n  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],\n      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],\n      dx = ux1 - ux0,\n      dy = uy1 - uy0,\n      d2 = dx * dx + dy * dy,\n      i,\n      S;\n\n  // Special case for u0 ≅ u1.\n  if (d2 < epsilon2) {\n    S = Math.log(w1 / w0) / rho;\n    i = function(t) {\n      return [\n        ux0 + t * dx,\n        uy0 + t * dy,\n        w0 * Math.exp(rho * t * S)\n      ];\n    }\n  }\n\n  // General case.\n  else {\n    var d1 = Math.sqrt(d2),\n        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),\n        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),\n        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),\n        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n    S = (r1 - r0) / rho;\n    i = function(t) {\n      var s = t * S,\n          coshr0 = cosh(r0),\n          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));\n      return [\n        ux0 + u * dx,\n        uy0 + u * dy,\n        w0 * coshr0 / cosh(rho * s + r0)\n      ];\n    }\n  }\n\n  i.duration = S * 1000;\n\n  return i;\n}\n","import {hsl as colorHsl} from \"d3-color\";\nimport color, {hue} from \"./color\";\n\nfunction hsl(hue) {\n  return function(start, end) {\n    var h = hue((start = colorHsl(start)).h, (end = colorHsl(end)).h),\n        s = color(start.s, end.s),\n        l = color(start.l, end.l),\n        opacity = color(start.opacity, end.opacity);\n    return function(t) {\n      start.h = h(t);\n      start.s = s(t);\n      start.l = l(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n}\n\nexport default hsl(hue);\nexport var hslLong = hsl(color);\n","import {lab as colorLab} from \"d3-color\";\nimport color from \"./color\";\n\nexport default function lab(start, end) {\n  var l = color((start = colorLab(start)).l, (end = colorLab(end)).l),\n      a = color(start.a, end.a),\n      b = color(start.b, end.b),\n      opacity = color(start.opacity, end.opacity);\n  return function(t) {\n    start.l = l(t);\n    start.a = a(t);\n    start.b = b(t);\n    start.opacity = opacity(t);\n    return start + \"\";\n  };\n}\n","import {hcl as colorHcl} from \"d3-color\";\nimport color, {hue} from \"./color\";\n\nfunction hcl(hue) {\n  return function(start, end) {\n    var h = hue((start = colorHcl(start)).h, (end = colorHcl(end)).h),\n        c = color(start.c, end.c),\n        l = color(start.l, end.l),\n        opacity = color(start.opacity, end.opacity);\n    return function(t) {\n      start.h = h(t);\n      start.c = c(t);\n      start.l = l(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n}\n\nexport default hcl(hue);\nexport var hclLong = hcl(color);\n","import {cubehelix as colorCubehelix} from \"d3-color\";\nimport color, {hue} from \"./color\";\n\nfunction cubehelix(hue) {\n  return (function cubehelixGamma(y) {\n    y = +y;\n\n    function cubehelix(start, end) {\n      var h = hue((start = colorCubehelix(start)).h, (end = colorCubehelix(end)).h),\n          s = color(start.s, end.s),\n          l = color(start.l, end.l),\n          opacity = color(start.opacity, end.opacity);\n      return function(t) {\n        start.h = h(t);\n        start.s = s(t);\n        start.l = l(Math.pow(t, y));\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n\n    cubehelix.gamma = cubehelixGamma;\n\n    return cubehelix;\n  })(1);\n}\n\nexport default cubehelix(hue);\nexport var cubehelixLong = cubehelix(color);\n","export default function(interpolator, n) {\n  var samples = new Array(n);\n  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));\n  return samples;\n}\n","// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimal(1.23) returns [\"123\", 0].\nexport default function(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n","import formatDecimal from \"./formatDecimal\";\n\nexport var prefixExponent;\n\nexport default function(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n","import formatDecimal from \"./formatDecimal\";\n\nexport default function(x) {\n  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\n}\n","import formatDecimal from \"./formatDecimal\";\n\nexport default function(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n","import formatDefault from \"./formatDefault\";\nimport formatPrefixAuto from \"./formatPrefixAuto\";\nimport formatRounded from \"./formatRounded\";\n\nexport default {\n  \"\": formatDefault,\n  \"%\": function(x, p) { return (x * 100).toFixed(p); },\n  \"b\": function(x) { return Math.round(x).toString(2); },\n  \"c\": function(x) { return x + \"\"; },\n  \"d\": function(x) { return Math.round(x).toString(10); },\n  \"e\": function(x, p) { return x.toExponential(p); },\n  \"f\": function(x, p) { return x.toFixed(p); },\n  \"g\": function(x, p) { return x.toPrecision(p); },\n  \"o\": function(x) { return Math.round(x).toString(8); },\n  \"p\": function(x, p) { return formatRounded(x * 100, p); },\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n  \"x\": function(x) { return Math.round(x).toString(16); }\n};\n","export default function(x, p) {\n  x = x.toPrecision(p);\n\n  out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (x[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      case \"e\": break out;\n      default: if (i0 > 0) i0 = 0; break;\n    }\n  }\n\n  return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;\n}\n","import formatTypes from \"./formatTypes\";\n\n// [[fill]align][sign][symbol][0][width][,][.precision][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-\\( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  return new FormatSpecifier(specifier);\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nfunction FormatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n\n  var match,\n      fill = match[1] || \" \",\n      align = match[2] || \">\",\n      sign = match[3] || \"-\",\n      symbol = match[4] || \"\",\n      zero = !!match[5],\n      width = match[6] && +match[6],\n      comma = !!match[7],\n      precision = match[8] && +match[8].slice(1),\n      type = match[9] || \"\";\n\n  // The \"n\" type is an alias for \",g\".\n  if (type === \"n\") comma = true, type = \"g\";\n\n  // Map invalid types to the default format.\n  else if (!formatTypes[type]) type = \"\";\n\n  // If zero fill is specified, padding goes after sign and before digits.\n  if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n  this.fill = fill;\n  this.align = align;\n  this.sign = sign;\n  this.symbol = symbol;\n  this.zero = zero;\n  this.width = width;\n  this.comma = comma;\n  this.precision = precision;\n  this.type = type;\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width == null ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + this.type;\n};\n","export default function(x) {\n  return x;\n}\n","import formatLocale from \"./locale\";\n\nvar locale;\nexport var format;\nexport var formatPrefix;\n\ndefaultLocale({\n  decimal: \".\",\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"]\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n","import exponent from \"./exponent\";\nimport formatGroup from \"./formatGroup\";\nimport formatNumerals from \"./formatNumerals\";\nimport formatSpecifier from \"./formatSpecifier\";\nimport formatTypes from \"./formatTypes\";\nimport {prefixExponent} from \"./formatPrefixAuto\";\nimport identity from \"./identity\";\n\nvar prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity,\n      currency = locale.currency,\n      decimal = locale.decimal,\n      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity,\n      percent = locale.percent || \"%\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        type = specifier.type;\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currency[0] : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currency[1] : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = !type || /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision == null ? (type ? 6 : 12)\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Perform the initial formatting.\n        var valueNegative = value < 0;\n        value = formatType(Math.abs(value), precision);\n\n        // If a negative value rounds to zero during formatting, treat as positive.\n        if (valueNegative && +value === 0) valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : \"-\") : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n","export default function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n","export default function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n","import exponent from \"./exponent\";\n\nexport default function(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent\";\n\nexport default function(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent\";\n\nexport default function(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n","export var prefix = \"$\";\n\nfunction Map() {}\n\nMap.prototype = map.prototype = {\n  constructor: Map,\n  has: function(key) {\n    return (prefix + key) in this;\n  },\n  get: function(key) {\n    return this[prefix + key];\n  },\n  set: function(key, value) {\n    this[prefix + key] = value;\n    return this;\n  },\n  remove: function(key) {\n    var property = prefix + key;\n    return property in this && delete this[property];\n  },\n  clear: function() {\n    for (var property in this) if (property[0] === prefix) delete this[property];\n  },\n  keys: function() {\n    var keys = [];\n    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));\n    return keys;\n  },\n  values: function() {\n    var values = [];\n    for (var property in this) if (property[0] === prefix) values.push(this[property]);\n    return values;\n  },\n  entries: function() {\n    var entries = [];\n    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});\n    return entries;\n  },\n  size: function() {\n    var size = 0;\n    for (var property in this) if (property[0] === prefix) ++size;\n    return size;\n  },\n  empty: function() {\n    for (var property in this) if (property[0] === prefix) return false;\n    return true;\n  },\n  each: function(f) {\n    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);\n  }\n};\n\nfunction map(object, f) {\n  var map = new Map;\n\n  // Copy constructor.\n  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });\n\n  // Index array by numeric index or specified key function.\n  else if (Array.isArray(object)) {\n    var i = -1,\n        n = object.length,\n        o;\n\n    if (f == null) while (++i < n) map.set(i, object[i]);\n    else while (++i < n) map.set(f(o = object[i], i, object), o);\n  }\n\n  // Convert object to map.\n  else if (object) for (var key in object) map.set(key, object[key]);\n\n  return map;\n}\n\nexport default map;\n","import {default as map, prefix} from \"./map\";\n\nfunction Set() {}\n\nvar proto = map.prototype;\n\nSet.prototype = set.prototype = {\n  constructor: Set,\n  has: proto.has,\n  add: function(value) {\n    value += \"\";\n    this[prefix + value] = value;\n    return this;\n  },\n  remove: proto.remove,\n  clear: proto.clear,\n  values: proto.keys,\n  size: proto.size,\n  empty: proto.empty,\n  each: proto.each\n};\n\nfunction set(object, f) {\n  var set = new Set;\n\n  // Copy constructor.\n  if (object instanceof Set) object.each(function(value) { set.add(value); });\n\n  // Otherwise, assume it’s an array.\n  else if (object) {\n    var i = -1, n = object.length;\n    if (f == null) while (++i < n) set.add(object[i]);\n    else while (++i < n) set.add(f(object[i], i, object));\n  }\n\n  return set;\n}\n\nexport default set;\n","var array = Array.prototype;\n\nexport var map = array.map;\nexport var slice = array.slice;\n","import {map} from \"d3-collection\";\nimport {slice} from \"./array\";\n\nexport var implicit = {name: \"implicit\"};\n\nexport default function ordinal(range) {\n  var index = map(),\n      domain = [],\n      unknown = implicit;\n\n  range = range == null ? [] : slice.call(range);\n\n  function scale(d) {\n    var key = d + \"\", i = index.get(key);\n    if (!i) {\n      if (unknown !== implicit) return unknown;\n      index.set(key, i = domain.push(d));\n    }\n    return range[(i - 1) % range.length];\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = map();\n    var i = -1, n = _.length, d, key;\n    while (++i < n) if (!index.has(key = (d = _[i]) + \"\")) index.set(key, domain.push(d));\n    return scale;\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), scale) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return ordinal()\n        .domain(domain)\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return scale;\n}\n","import {range as sequence} from \"d3-array\";\nimport ordinal from \"./ordinal\";\n\nexport default function band() {\n  var scale = ordinal().unknown(undefined),\n      domain = scale.domain,\n      ordinalRange = scale.range,\n      range = [0, 1],\n      step,\n      bandwidth,\n      round = false,\n      paddingInner = 0,\n      paddingOuter = 0,\n      align = 0.5;\n\n  delete scale.unknown;\n\n  function rescale() {\n    var n = domain().length,\n        reverse = range[1] < range[0],\n        start = range[reverse - 0],\n        stop = range[1 - reverse];\n    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n    if (round) step = Math.floor(step);\n    start += (stop - start - step * (n - paddingInner)) * align;\n    bandwidth = step * (1 - paddingInner);\n    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n    var values = sequence(n).map(function(i) { return start + step * i; });\n    return ordinalRange(reverse ? values.reverse() : values);\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = [+_[0], +_[1]], round = true, rescale();\n  };\n\n  scale.bandwidth = function() {\n    return bandwidth;\n  };\n\n  scale.step = function() {\n    return step;\n  };\n\n  scale.round = function(_) {\n    return arguments.length ? (round = !!_, rescale()) : round;\n  };\n\n  scale.padding = function(_) {\n    return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\n  };\n\n  scale.paddingInner = function(_) {\n    return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\n  };\n\n  scale.paddingOuter = function(_) {\n    return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;\n  };\n\n  scale.align = function(_) {\n    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n  };\n\n  scale.copy = function() {\n    return band()\n        .domain(domain())\n        .range(range)\n        .round(round)\n        .paddingInner(paddingInner)\n        .paddingOuter(paddingOuter)\n        .align(align);\n  };\n\n  return rescale();\n}\n\nfunction pointish(scale) {\n  var copy = scale.copy;\n\n  scale.padding = scale.paddingOuter;\n  delete scale.paddingInner;\n  delete scale.paddingOuter;\n\n  scale.copy = function() {\n    return pointish(copy());\n  };\n\n  return scale;\n}\n\nexport function point() {\n  return pointish(band().paddingInner(1));\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(x) {\n  return +x;\n}\n","import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateRound} from \"d3-interpolate\";\nimport {map, slice} from \"./array\";\nimport constant from \"./constant\";\nimport number from \"./number\";\n\nvar unit = [0, 1];\n\nexport function deinterpolateLinear(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(b);\n}\n\nfunction deinterpolateClamp(deinterpolate) {\n  return function(a, b) {\n    var d = deinterpolate(a = +a, b = +b);\n    return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };\n  };\n}\n\nfunction reinterpolateClamp(reinterpolate) {\n  return function(a, b) {\n    var r = reinterpolate(a = +a, b = +b);\n    return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };\n  };\n}\n\nfunction bimap(domain, range, deinterpolate, reinterpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);\n  else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, deinterpolate, reinterpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = deinterpolate(domain[i], domain[i + 1]);\n    r[i] = reinterpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp());\n}\n\n// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].\nexport default function continuous(deinterpolate, reinterpolate) {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      clamp = false,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return (output || (output = piecewise(domain, range, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate)))(+x);\n  }\n\n  scale.invert = function(y) {\n    return (input || (input = piecewise(range, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = map.call(_, number), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = slice.call(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, rescale()) : clamp;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  return rescale();\n}\n","import {tickStep} from \"d3-array\";\nimport {format, formatPrefix, formatSpecifier, precisionFixed, precisionPrefix, precisionRound} from \"d3-format\";\n\nexport default function(domain, count, specifier) {\n  var start = domain[0],\n      stop = domain[domain.length - 1],\n      step = tickStep(start, stop, count == null ? 10 : count),\n      precision;\n  specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n  switch (specifier.type) {\n    case \"s\": {\n      var value = Math.max(Math.abs(start), Math.abs(stop));\n      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n      return formatPrefix(specifier, value);\n    }\n    case \"\":\n    case \"e\":\n    case \"g\":\n    case \"p\":\n    case \"r\": {\n      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n      break;\n    }\n    case \"f\":\n    case \"%\": {\n      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n      break;\n    }\n  }\n  return format(specifier);\n}\n","import {ticks, tickIncrement} from \"d3-array\";\nimport {interpolateNumber as reinterpolate} from \"d3-interpolate\";\nimport {default as continuous, copy, deinterpolateLinear as deinterpolate} from \"./continuous\";\nimport tickFormat from \"./tickFormat\";\n\nexport function linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    return tickFormat(domain(), count, specifier);\n  };\n\n  scale.nice = function(count) {\n    if (count == null) count = 10;\n\n    var d = domain(),\n        i0 = 0,\n        i1 = d.length - 1,\n        start = d[i0],\n        stop = d[i1],\n        step;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n\n    step = tickIncrement(start, stop, count);\n\n    if (step > 0) {\n      start = Math.floor(start / step) * step;\n      stop = Math.ceil(stop / step) * step;\n      step = tickIncrement(start, stop, count);\n    } else if (step < 0) {\n      start = Math.ceil(start * step) / step;\n      stop = Math.floor(stop * step) / step;\n      step = tickIncrement(start, stop, count);\n    }\n\n    if (step > 0) {\n      d[i0] = Math.floor(start / step) * step;\n      d[i1] = Math.ceil(stop / step) * step;\n      domain(d);\n    } else if (step < 0) {\n      d[i0] = Math.ceil(start * step) / step;\n      d[i1] = Math.floor(stop * step) / step;\n      domain(d);\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nexport default function linear() {\n  var scale = continuous(deinterpolate, reinterpolate);\n\n  scale.copy = function() {\n    return copy(scale, linear());\n  };\n\n  return linearish(scale);\n}\n","import {map} from \"./array\";\nimport {linearish} from \"./linear\";\nimport number from \"./number\";\n\nexport default function identity() {\n  var domain = [0, 1];\n\n  function scale(x) {\n    return +x;\n  }\n\n  scale.invert = scale;\n\n  scale.domain = scale.range = function(_) {\n    return arguments.length ? (domain = map.call(_, number), scale) : domain.slice();\n  };\n\n  scale.copy = function() {\n    return identity().domain(domain);\n  };\n\n  return linearish(scale);\n}\n","export default function(domain, interval) {\n  domain = domain.slice();\n\n  var i0 = 0,\n      i1 = domain.length - 1,\n      x0 = domain[i0],\n      x1 = domain[i1],\n      t;\n\n  if (x1 < x0) {\n    t = i0, i0 = i1, i1 = t;\n    t = x0, x0 = x1, x1 = t;\n  }\n\n  domain[i0] = interval.floor(x0);\n  domain[i1] = interval.ceil(x1);\n  return domain;\n}\n","import {ticks} from \"d3-array\";\nimport {format} from \"d3-format\";\nimport constant from \"./constant\";\nimport nice from \"./nice\";\nimport {default as continuous, copy} from \"./continuous\";\n\nfunction deinterpolate(a, b) {\n  return (b = Math.log(b / a))\n      ? function(x) { return Math.log(x / a) / b; }\n      : constant(b);\n}\n\nfunction reinterpolate(a, b) {\n  return a < 0\n      ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }\n      : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };\n}\n\nfunction pow10(x) {\n  return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n}\n\nfunction powp(base) {\n  return base === 10 ? pow10\n      : base === Math.E ? Math.exp\n      : function(x) { return Math.pow(base, x); };\n}\n\nfunction logp(base) {\n  return base === Math.E ? Math.log\n      : base === 10 && Math.log10\n      || base === 2 && Math.log2\n      || (base = Math.log(base), function(x) { return Math.log(x) / base; });\n}\n\nfunction reflect(f) {\n  return function(x) {\n    return -f(-x);\n  };\n}\n\nexport default function log() {\n  var scale = continuous(deinterpolate, reinterpolate).domain([1, 10]),\n      domain = scale.domain,\n      base = 10,\n      logs = logp(10),\n      pows = powp(10);\n\n  function rescale() {\n    logs = logp(base), pows = powp(base);\n    if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);\n    return scale;\n  }\n\n  scale.base = function(_) {\n    return arguments.length ? (base = +_, rescale()) : base;\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.ticks = function(count) {\n    var d = domain(),\n        u = d[0],\n        v = d[d.length - 1],\n        r;\n\n    if (r = v < u) i = u, u = v, v = i;\n\n    var i = logs(u),\n        j = logs(v),\n        p,\n        k,\n        t,\n        n = count == null ? 10 : +count,\n        z = [];\n\n    if (!(base % 1) && j - i < n) {\n      i = Math.round(i) - 1, j = Math.round(j) + 1;\n      if (u > 0) for (; i < j; ++i) {\n        for (k = 1, p = pows(i); k < base; ++k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      } else for (; i < j; ++i) {\n        for (k = base - 1, p = pows(i); k >= 1; --k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      }\n    } else {\n      z = ticks(i, j, Math.min(j - i, n)).map(pows);\n    }\n\n    return r ? z.reverse() : z;\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\n    if (typeof specifier !== \"function\") specifier = format(specifier);\n    if (count === Infinity) return specifier;\n    if (count == null) count = 10;\n    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n    return function(d) {\n      var i = d / pows(Math.round(logs(d)));\n      if (i * base < base - 0.5) i *= base;\n      return i <= k ? specifier(d) : \"\";\n    };\n  };\n\n  scale.nice = function() {\n    return domain(nice(domain(), {\n      floor: function(x) { return pows(Math.floor(logs(x))); },\n      ceil: function(x) { return pows(Math.ceil(logs(x))); }\n    }));\n  };\n\n  scale.copy = function() {\n    return copy(scale, log().base(base));\n  };\n\n  return scale;\n}\n","import constant from \"./constant\";\nimport {linearish} from \"./linear\";\nimport {default as continuous, copy} from \"./continuous\";\n\nfunction raise(x, exponent) {\n  return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n}\n\nexport default function pow() {\n  var exponent = 1,\n      scale = continuous(deinterpolate, reinterpolate),\n      domain = scale.domain;\n\n  function deinterpolate(a, b) {\n    return (b = raise(b, exponent) - (a = raise(a, exponent)))\n        ? function(x) { return (raise(x, exponent) - a) / b; }\n        : constant(b);\n  }\n\n  function reinterpolate(a, b) {\n    b = raise(b, exponent) - (a = raise(a, exponent));\n    return function(t) { return raise(a + b * t, 1 / exponent); };\n  }\n\n  scale.exponent = function(_) {\n    return arguments.length ? (exponent = +_, domain(domain())) : exponent;\n  };\n\n  scale.copy = function() {\n    return copy(scale, pow().exponent(exponent));\n  };\n\n  return linearish(scale);\n}\n\nexport function sqrt() {\n  return pow().exponent(0.5);\n}\n","import {ascending, bisect, quantile as threshold} from \"d3-array\";\nimport {slice} from \"./array\";\n\nexport default function quantile() {\n  var domain = [],\n      range = [],\n      thresholds = [];\n\n  function rescale() {\n    var i = 0, n = Math.max(1, range.length);\n    thresholds = new Array(n - 1);\n    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);\n    return scale;\n  }\n\n  function scale(x) {\n    if (!isNaN(x = +x)) return range[bisect(thresholds, x)];\n  }\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN] : [\n      i > 0 ? thresholds[i - 1] : domain[0],\n      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\n    ];\n  };\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(ascending);\n    return rescale();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();\n  };\n\n  scale.quantiles = function() {\n    return thresholds.slice();\n  };\n\n  scale.copy = function() {\n    return quantile()\n        .domain(domain)\n        .range(range);\n  };\n\n  return scale;\n}\n","import {bisect} from \"d3-array\";\nimport {slice} from \"./array\";\nimport {linearish} from \"./linear\";\n\nexport default function quantize() {\n  var x0 = 0,\n      x1 = 1,\n      n = 1,\n      domain = [0.5],\n      range = [0, 1];\n\n  function scale(x) {\n    if (x <= x) return range[bisect(domain, x, 0, n)];\n  }\n\n  function rescale() {\n    var i = -1;\n    domain = new Array(n);\n    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n    return scale;\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (n = (range = slice.call(_)).length - 1, rescale()) : range.slice();\n  };\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN]\n        : i < 1 ? [x0, domain[0]]\n        : i >= n ? [domain[n - 1], x1]\n        : [domain[i - 1], domain[i]];\n  };\n\n  scale.copy = function() {\n    return quantize()\n        .domain([x0, x1])\n        .range(range);\n  };\n\n  return linearish(scale);\n}\n","import {bisect} from \"d3-array\";\nimport {slice} from \"./array\";\n\nexport default function threshold() {\n  var domain = [0.5],\n      range = [0, 1],\n      n = 1;\n\n  function scale(x) {\n    if (x <= x) return range[bisect(domain, x, 0, n)];\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\n  };\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return [domain[i - 1], domain[i]];\n  };\n\n  scale.copy = function() {\n    return threshold()\n        .domain(domain)\n        .range(range);\n  };\n\n  return scale;\n}\n","var t0 = new Date,\n    t1 = new Date;\n\nexport default function newInterval(floori, offseti, count, field) {\n\n  function interval(date) {\n    return floori(date = new Date(+date)), date;\n  }\n\n  interval.floor = interval;\n\n  interval.ceil = function(date) {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = function(date) {\n    var d0 = interval(date),\n        d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = function(date, step) {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = function(start, stop, step) {\n    var range = [], previous;\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    while (previous < start && start < stop);\n    return range;\n  };\n\n  interval.filter = function(test) {\n    return newInterval(function(date) {\n      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);\n    }, function(date, step) {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = function(start, end) {\n      t0.setTime(+start), t1.setTime(+end);\n      floori(t0), floori(t1);\n      return Math.floor(count(t0, t1));\n    };\n\n    interval.every = function(step) {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null\n          : !(step > 1) ? interval\n          : interval.filter(field\n              ? function(d) { return field(d) % step === 0; }\n              : function(d) { return interval.count(0, d) % step === 0; });\n    };\n  }\n\n  return interval;\n}\n","import interval from \"./interval\";\n\nvar millisecond = interval(function() {\n  // noop\n}, function(date, step) {\n  date.setTime(+date + step);\n}, function(start, end) {\n  return end - start;\n});\n\n// An optimized implementation for this simple case.\nmillisecond.every = function(k) {\n  k = Math.floor(k);\n  if (!isFinite(k) || !(k > 0)) return null;\n  if (!(k > 1)) return millisecond;\n  return interval(function(date) {\n    date.setTime(Math.floor(date / k) * k);\n  }, function(date, step) {\n    date.setTime(+date + step * k);\n  }, function(start, end) {\n    return (end - start) / k;\n  });\n};\n\nexport default millisecond;\nexport var milliseconds = millisecond.range;\n","export var durationSecond = 1e3;\nexport var durationMinute = 6e4;\nexport var durationHour = 36e5;\nexport var durationDay = 864e5;\nexport var durationWeek = 6048e5;\n","import interval from \"./interval\";\nimport {durationSecond} from \"./duration\";\n\nvar second = interval(function(date) {\n  date.setTime(Math.floor(date / durationSecond) * durationSecond);\n}, function(date, step) {\n  date.setTime(+date + step * durationSecond);\n}, function(start, end) {\n  return (end - start) / durationSecond;\n}, function(date) {\n  return date.getUTCSeconds();\n});\n\nexport default second;\nexport var seconds = second.range;\n","import interval from \"./interval\";\nimport {durationMinute} from \"./duration\";\n\nvar minute = interval(function(date) {\n  date.setTime(Math.floor(date / durationMinute) * durationMinute);\n}, function(date, step) {\n  date.setTime(+date + step * durationMinute);\n}, function(start, end) {\n  return (end - start) / durationMinute;\n}, function(date) {\n  return date.getMinutes();\n});\n\nexport default minute;\nexport var minutes = minute.range;\n","import interval from \"./interval\";\nimport {durationHour, durationMinute} from \"./duration\";\n\nvar hour = interval(function(date) {\n  var offset = date.getTimezoneOffset() * durationMinute % durationHour;\n  if (offset < 0) offset += durationHour;\n  date.setTime(Math.floor((+date - offset) / durationHour) * durationHour + offset);\n}, function(date, step) {\n  date.setTime(+date + step * durationHour);\n}, function(start, end) {\n  return (end - start) / durationHour;\n}, function(date) {\n  return date.getHours();\n});\n\nexport default hour;\nexport var hours = hour.range;\n","import interval from \"./interval\";\nimport {durationDay, durationMinute} from \"./duration\";\n\nvar day = interval(function(date) {\n  date.setHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setDate(date.getDate() + step);\n}, function(start, end) {\n  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\n}, function(date) {\n  return date.getDate() - 1;\n});\n\nexport default day;\nexport var days = day.range;\n","import interval from \"./interval\";\nimport {durationMinute, durationWeek} from \"./duration\";\n\nfunction weekday(i) {\n  return interval(function(date) {\n    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setDate(date.getDate() + step * 7);\n  }, function(start, end) {\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\n  });\n}\n\nexport var sunday = weekday(0);\nexport var monday = weekday(1);\nexport var tuesday = weekday(2);\nexport var wednesday = weekday(3);\nexport var thursday = weekday(4);\nexport var friday = weekday(5);\nexport var saturday = weekday(6);\n\nexport var sundays = sunday.range;\nexport var mondays = monday.range;\nexport var tuesdays = tuesday.range;\nexport var wednesdays = wednesday.range;\nexport var thursdays = thursday.range;\nexport var fridays = friday.range;\nexport var saturdays = saturday.range;\n","import interval from \"./interval\";\n\nvar month = interval(function(date) {\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setMonth(date.getMonth() + step);\n}, function(start, end) {\n  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\n}, function(date) {\n  return date.getMonth();\n});\n\nexport default month;\nexport var months = month.range;\n","import interval from \"./interval\";\n\nvar year = interval(function(date) {\n  date.setMonth(0, 1);\n  date.setHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setFullYear(date.getFullYear() + step);\n}, function(start, end) {\n  return end.getFullYear() - start.getFullYear();\n}, function(date) {\n  return date.getFullYear();\n});\n\n// An optimized implementation for this simple case.\nyear.every = function(k) {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : interval(function(date) {\n    date.setFullYear(Math.floor(date.getFullYear() / k) * k);\n    date.setMonth(0, 1);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setFullYear(date.getFullYear() + step * k);\n  });\n};\n\nexport default year;\nexport var years = year.range;\n","import interval from \"./interval\";\nimport {durationMinute} from \"./duration\";\n\nvar utcMinute = interval(function(date) {\n  date.setUTCSeconds(0, 0);\n}, function(date, step) {\n  date.setTime(+date + step * durationMinute);\n}, function(start, end) {\n  return (end - start) / durationMinute;\n}, function(date) {\n  return date.getUTCMinutes();\n});\n\nexport default utcMinute;\nexport var utcMinutes = utcMinute.range;\n","import interval from \"./interval\";\nimport {durationHour} from \"./duration\";\n\nvar utcHour = interval(function(date) {\n  date.setUTCMinutes(0, 0, 0);\n}, function(date, step) {\n  date.setTime(+date + step * durationHour);\n}, function(start, end) {\n  return (end - start) / durationHour;\n}, function(date) {\n  return date.getUTCHours();\n});\n\nexport default utcHour;\nexport var utcHours = utcHour.range;\n","import interval from \"./interval\";\nimport {durationDay} from \"./duration\";\n\nvar utcDay = interval(function(date) {\n  date.setUTCHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setUTCDate(date.getUTCDate() + step);\n}, function(start, end) {\n  return (end - start) / durationDay;\n}, function(date) {\n  return date.getUTCDate() - 1;\n});\n\nexport default utcDay;\nexport var utcDays = utcDay.range;\n","import interval from \"./interval\";\nimport {durationWeek} from \"./duration\";\n\nfunction utcWeekday(i) {\n  return interval(function(date) {\n    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCDate(date.getUTCDate() + step * 7);\n  }, function(start, end) {\n    return (end - start) / durationWeek;\n  });\n}\n\nexport var utcSunday = utcWeekday(0);\nexport var utcMonday = utcWeekday(1);\nexport var utcTuesday = utcWeekday(2);\nexport var utcWednesday = utcWeekday(3);\nexport var utcThursday = utcWeekday(4);\nexport var utcFriday = utcWeekday(5);\nexport var utcSaturday = utcWeekday(6);\n\nexport var utcSundays = utcSunday.range;\nexport var utcMondays = utcMonday.range;\nexport var utcTuesdays = utcTuesday.range;\nexport var utcWednesdays = utcWednesday.range;\nexport var utcThursdays = utcThursday.range;\nexport var utcFridays = utcFriday.range;\nexport var utcSaturdays = utcSaturday.range;\n","import interval from \"./interval\";\n\nvar utcMonth = interval(function(date) {\n  date.setUTCDate(1);\n  date.setUTCHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setUTCMonth(date.getUTCMonth() + step);\n}, function(start, end) {\n  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;\n}, function(date) {\n  return date.getUTCMonth();\n});\n\nexport default utcMonth;\nexport var utcMonths = utcMonth.range;\n","import interval from \"./interval\";\n\nvar utcYear = interval(function(date) {\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setUTCFullYear(date.getUTCFullYear() + step);\n}, function(start, end) {\n  return end.getUTCFullYear() - start.getUTCFullYear();\n}, function(date) {\n  return date.getUTCFullYear();\n});\n\n// An optimized implementation for this simple case.\nutcYear.every = function(k) {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : interval(function(date) {\n    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\n    date.setUTCMonth(0, 1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCFullYear(date.getUTCFullYear() + step * k);\n  });\n};\n\nexport default utcYear;\nexport var utcYears = utcYear.range;\n","import {\n  timeDay,\n  timeSunday,\n  timeMonday,\n  timeThursday,\n  timeYear,\n  utcDay,\n  utcSunday,\n  utcMonday,\n  utcThursday,\n  utcYear\n} from \"d3-time\";\n\nfunction localDate(d) {\n  if (0 <= d.y && d.y < 100) {\n    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);\n    date.setFullYear(d.y);\n    return date;\n  }\n  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);\n}\n\nfunction utcDate(d) {\n  if (0 <= d.y && d.y < 100) {\n    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));\n    date.setUTCFullYear(d.y);\n    return date;\n  }\n  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));\n}\n\nfunction newYear(y) {\n  return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};\n}\n\nexport default function formatLocale(locale) {\n  var locale_dateTime = locale.dateTime,\n      locale_date = locale.date,\n      locale_time = locale.time,\n      locale_periods = locale.periods,\n      locale_weekdays = locale.days,\n      locale_shortWeekdays = locale.shortDays,\n      locale_months = locale.months,\n      locale_shortMonths = locale.shortMonths;\n\n  var periodRe = formatRe(locale_periods),\n      periodLookup = formatLookup(locale_periods),\n      weekdayRe = formatRe(locale_weekdays),\n      weekdayLookup = formatLookup(locale_weekdays),\n      shortWeekdayRe = formatRe(locale_shortWeekdays),\n      shortWeekdayLookup = formatLookup(locale_shortWeekdays),\n      monthRe = formatRe(locale_months),\n      monthLookup = formatLookup(locale_months),\n      shortMonthRe = formatRe(locale_shortMonths),\n      shortMonthLookup = formatLookup(locale_shortMonths);\n\n  var formats = {\n    \"a\": formatShortWeekday,\n    \"A\": formatWeekday,\n    \"b\": formatShortMonth,\n    \"B\": formatMonth,\n    \"c\": null,\n    \"d\": formatDayOfMonth,\n    \"e\": formatDayOfMonth,\n    \"f\": formatMicroseconds,\n    \"H\": formatHour24,\n    \"I\": formatHour12,\n    \"j\": formatDayOfYear,\n    \"L\": formatMilliseconds,\n    \"m\": formatMonthNumber,\n    \"M\": formatMinutes,\n    \"p\": formatPeriod,\n    \"Q\": formatUnixTimestamp,\n    \"s\": formatUnixTimestampSeconds,\n    \"S\": formatSeconds,\n    \"u\": formatWeekdayNumberMonday,\n    \"U\": formatWeekNumberSunday,\n    \"V\": formatWeekNumberISO,\n    \"w\": formatWeekdayNumberSunday,\n    \"W\": formatWeekNumberMonday,\n    \"x\": null,\n    \"X\": null,\n    \"y\": formatYear,\n    \"Y\": formatFullYear,\n    \"Z\": formatZone,\n    \"%\": formatLiteralPercent\n  };\n\n  var utcFormats = {\n    \"a\": formatUTCShortWeekday,\n    \"A\": formatUTCWeekday,\n    \"b\": formatUTCShortMonth,\n    \"B\": formatUTCMonth,\n    \"c\": null,\n    \"d\": formatUTCDayOfMonth,\n    \"e\": formatUTCDayOfMonth,\n    \"f\": formatUTCMicroseconds,\n    \"H\": formatUTCHour24,\n    \"I\": formatUTCHour12,\n    \"j\": formatUTCDayOfYear,\n    \"L\": formatUTCMilliseconds,\n    \"m\": formatUTCMonthNumber,\n    \"M\": formatUTCMinutes,\n    \"p\": formatUTCPeriod,\n    \"Q\": formatUnixTimestamp,\n    \"s\": formatUnixTimestampSeconds,\n    \"S\": formatUTCSeconds,\n    \"u\": formatUTCWeekdayNumberMonday,\n    \"U\": formatUTCWeekNumberSunday,\n    \"V\": formatUTCWeekNumberISO,\n    \"w\": formatUTCWeekdayNumberSunday,\n    \"W\": formatUTCWeekNumberMonday,\n    \"x\": null,\n    \"X\": null,\n    \"y\": formatUTCYear,\n    \"Y\": formatUTCFullYear,\n    \"Z\": formatUTCZone,\n    \"%\": formatLiteralPercent\n  };\n\n  var parses = {\n    \"a\": parseShortWeekday,\n    \"A\": parseWeekday,\n    \"b\": parseShortMonth,\n    \"B\": parseMonth,\n    \"c\": parseLocaleDateTime,\n    \"d\": parseDayOfMonth,\n    \"e\": parseDayOfMonth,\n    \"f\": parseMicroseconds,\n    \"H\": parseHour24,\n    \"I\": parseHour24,\n    \"j\": parseDayOfYear,\n    \"L\": parseMilliseconds,\n    \"m\": parseMonthNumber,\n    \"M\": parseMinutes,\n    \"p\": parsePeriod,\n    \"Q\": parseUnixTimestamp,\n    \"s\": parseUnixTimestampSeconds,\n    \"S\": parseSeconds,\n    \"u\": parseWeekdayNumberMonday,\n    \"U\": parseWeekNumberSunday,\n    \"V\": parseWeekNumberISO,\n    \"w\": parseWeekdayNumberSunday,\n    \"W\": parseWeekNumberMonday,\n    \"x\": parseLocaleDate,\n    \"X\": parseLocaleTime,\n    \"y\": parseYear,\n    \"Y\": parseFullYear,\n    \"Z\": parseZone,\n    \"%\": parseLiteralPercent\n  };\n\n  // These recursive directive definitions must be deferred.\n  formats.x = newFormat(locale_date, formats);\n  formats.X = newFormat(locale_time, formats);\n  formats.c = newFormat(locale_dateTime, formats);\n  utcFormats.x = newFormat(locale_date, utcFormats);\n  utcFormats.X = newFormat(locale_time, utcFormats);\n  utcFormats.c = newFormat(locale_dateTime, utcFormats);\n\n  function newFormat(specifier, formats) {\n    return function(date) {\n      var string = [],\n          i = -1,\n          j = 0,\n          n = specifier.length,\n          c,\n          pad,\n          format;\n\n      if (!(date instanceof Date)) date = new Date(+date);\n\n      while (++i < n) {\n        if (specifier.charCodeAt(i) === 37) {\n          string.push(specifier.slice(j, i));\n          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);\n          else pad = c === \"e\" ? \" \" : \"0\";\n          if (format = formats[c]) c = format(date, pad);\n          string.push(c);\n          j = i + 1;\n        }\n      }\n\n      string.push(specifier.slice(j, i));\n      return string.join(\"\");\n    };\n  }\n\n  function newParse(specifier, newDate) {\n    return function(string) {\n      var d = newYear(1900),\n          i = parseSpecifier(d, specifier, string += \"\", 0),\n          week, day;\n      if (i != string.length) return null;\n\n      // If a UNIX timestamp is specified, return it.\n      if (\"Q\" in d) return new Date(d.Q);\n\n      // The am-pm flag is 0 for AM, and 1 for PM.\n      if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n\n      // Convert day-of-week and week-of-year to day-of-year.\n      if (\"V\" in d) {\n        if (d.V < 1 || d.V > 53) return null;\n        if (!(\"w\" in d)) d.w = 1;\n        if (\"Z\" in d) {\n          week = utcDate(newYear(d.y)), day = week.getUTCDay();\n          week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);\n          week = utcDay.offset(week, (d.V - 1) * 7);\n          d.y = week.getUTCFullYear();\n          d.m = week.getUTCMonth();\n          d.d = week.getUTCDate() + (d.w + 6) % 7;\n        } else {\n          week = newDate(newYear(d.y)), day = week.getDay();\n          week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);\n          week = timeDay.offset(week, (d.V - 1) * 7);\n          d.y = week.getFullYear();\n          d.m = week.getMonth();\n          d.d = week.getDate() + (d.w + 6) % 7;\n        }\n      } else if (\"W\" in d || \"U\" in d) {\n        if (!(\"w\" in d)) d.w = \"u\" in d ? d.u % 7 : \"W\" in d ? 1 : 0;\n        day = \"Z\" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();\n        d.m = 0;\n        d.d = \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;\n      }\n\n      // If a time zone is specified, all fields are interpreted as UTC and then\n      // offset according to the specified time zone.\n      if (\"Z\" in d) {\n        d.H += d.Z / 100 | 0;\n        d.M += d.Z % 100;\n        return utcDate(d);\n      }\n\n      // Otherwise, all fields are in local time.\n      return newDate(d);\n    };\n  }\n\n  function parseSpecifier(d, specifier, string, j) {\n    var i = 0,\n        n = specifier.length,\n        m = string.length,\n        c,\n        parse;\n\n    while (i < n) {\n      if (j >= m) return -1;\n      c = specifier.charCodeAt(i++);\n      if (c === 37) {\n        c = specifier.charAt(i++);\n        parse = parses[c in pads ? specifier.charAt(i++) : c];\n        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;\n      } else if (c != string.charCodeAt(j++)) {\n        return -1;\n      }\n    }\n\n    return j;\n  }\n\n  function parsePeriod(d, string, i) {\n    var n = periodRe.exec(string.slice(i));\n    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseShortWeekday(d, string, i) {\n    var n = shortWeekdayRe.exec(string.slice(i));\n    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseWeekday(d, string, i) {\n    var n = weekdayRe.exec(string.slice(i));\n    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseShortMonth(d, string, i) {\n    var n = shortMonthRe.exec(string.slice(i));\n    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseMonth(d, string, i) {\n    var n = monthRe.exec(string.slice(i));\n    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseLocaleDateTime(d, string, i) {\n    return parseSpecifier(d, locale_dateTime, string, i);\n  }\n\n  function parseLocaleDate(d, string, i) {\n    return parseSpecifier(d, locale_date, string, i);\n  }\n\n  function parseLocaleTime(d, string, i) {\n    return parseSpecifier(d, locale_time, string, i);\n  }\n\n  function formatShortWeekday(d) {\n    return locale_shortWeekdays[d.getDay()];\n  }\n\n  function formatWeekday(d) {\n    return locale_weekdays[d.getDay()];\n  }\n\n  function formatShortMonth(d) {\n    return locale_shortMonths[d.getMonth()];\n  }\n\n  function formatMonth(d) {\n    return locale_months[d.getMonth()];\n  }\n\n  function formatPeriod(d) {\n    return locale_periods[+(d.getHours() >= 12)];\n  }\n\n  function formatUTCShortWeekday(d) {\n    return locale_shortWeekdays[d.getUTCDay()];\n  }\n\n  function formatUTCWeekday(d) {\n    return locale_weekdays[d.getUTCDay()];\n  }\n\n  function formatUTCShortMonth(d) {\n    return locale_shortMonths[d.getUTCMonth()];\n  }\n\n  function formatUTCMonth(d) {\n    return locale_months[d.getUTCMonth()];\n  }\n\n  function formatUTCPeriod(d) {\n    return locale_periods[+(d.getUTCHours() >= 12)];\n  }\n\n  return {\n    format: function(specifier) {\n      var f = newFormat(specifier += \"\", formats);\n      f.toString = function() { return specifier; };\n      return f;\n    },\n    parse: function(specifier) {\n      var p = newParse(specifier += \"\", localDate);\n      p.toString = function() { return specifier; };\n      return p;\n    },\n    utcFormat: function(specifier) {\n      var f = newFormat(specifier += \"\", utcFormats);\n      f.toString = function() { return specifier; };\n      return f;\n    },\n    utcParse: function(specifier) {\n      var p = newParse(specifier, utcDate);\n      p.toString = function() { return specifier; };\n      return p;\n    }\n  };\n}\n\nvar pads = {\"-\": \"\", \"_\": \" \", \"0\": \"0\"},\n    numberRe = /^\\s*\\d+/, // note: ignores next directive\n    percentRe = /^%/,\n    requoteRe = /[\\\\^$*+?|[\\]().{}]/g;\n\nfunction pad(value, fill, width) {\n  var sign = value < 0 ? \"-\" : \"\",\n      string = (sign ? -value : value) + \"\",\n      length = string.length;\n  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n}\n\nfunction requote(s) {\n  return s.replace(requoteRe, \"\\\\$&\");\n}\n\nfunction formatRe(names) {\n  return new RegExp(\"^(?:\" + names.map(requote).join(\"|\") + \")\", \"i\");\n}\n\nfunction formatLookup(names) {\n  var map = {}, i = -1, n = names.length;\n  while (++i < n) map[names[i].toLowerCase()] = i;\n  return map;\n}\n\nfunction parseWeekdayNumberSunday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.w = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekdayNumberMonday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.u = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberSunday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.U = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberISO(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.V = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberMonday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.W = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseFullYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 4));\n  return n ? (d.y = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;\n}\n\nfunction parseZone(d, string, i) {\n  var n = /^(Z)|([+-]\\d\\d)(?::?(\\d\\d))?/.exec(string.slice(i, i + 6));\n  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || \"00\")), i + n[0].length) : -1;\n}\n\nfunction parseMonthNumber(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;\n}\n\nfunction parseDayOfMonth(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.d = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseDayOfYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 3));\n  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseHour24(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.H = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMinutes(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.M = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseSeconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.S = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMilliseconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 3));\n  return n ? (d.L = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMicroseconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 6));\n  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;\n}\n\nfunction parseLiteralPercent(d, string, i) {\n  var n = percentRe.exec(string.slice(i, i + 1));\n  return n ? i + n[0].length : -1;\n}\n\nfunction parseUnixTimestamp(d, string, i) {\n  var n = numberRe.exec(string.slice(i));\n  return n ? (d.Q = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseUnixTimestampSeconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i));\n  return n ? (d.Q = (+n[0]) * 1000, i + n[0].length) : -1;\n}\n\nfunction formatDayOfMonth(d, p) {\n  return pad(d.getDate(), p, 2);\n}\n\nfunction formatHour24(d, p) {\n  return pad(d.getHours(), p, 2);\n}\n\nfunction formatHour12(d, p) {\n  return pad(d.getHours() % 12 || 12, p, 2);\n}\n\nfunction formatDayOfYear(d, p) {\n  return pad(1 + timeDay.count(timeYear(d), d), p, 3);\n}\n\nfunction formatMilliseconds(d, p) {\n  return pad(d.getMilliseconds(), p, 3);\n}\n\nfunction formatMicroseconds(d, p) {\n  return formatMilliseconds(d, p) + \"000\";\n}\n\nfunction formatMonthNumber(d, p) {\n  return pad(d.getMonth() + 1, p, 2);\n}\n\nfunction formatMinutes(d, p) {\n  return pad(d.getMinutes(), p, 2);\n}\n\nfunction formatSeconds(d, p) {\n  return pad(d.getSeconds(), p, 2);\n}\n\nfunction formatWeekdayNumberMonday(d) {\n  var day = d.getDay();\n  return day === 0 ? 7 : day;\n}\n\nfunction formatWeekNumberSunday(d, p) {\n  return pad(timeSunday.count(timeYear(d), d), p, 2);\n}\n\nfunction formatWeekNumberISO(d, p) {\n  var day = d.getDay();\n  d = (day >= 4 || day === 0) ? timeThursday(d) : timeThursday.ceil(d);\n  return pad(timeThursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p, 2);\n}\n\nfunction formatWeekdayNumberSunday(d) {\n  return d.getDay();\n}\n\nfunction formatWeekNumberMonday(d, p) {\n  return pad(timeMonday.count(timeYear(d), d), p, 2);\n}\n\nfunction formatYear(d, p) {\n  return pad(d.getFullYear() % 100, p, 2);\n}\n\nfunction formatFullYear(d, p) {\n  return pad(d.getFullYear() % 10000, p, 4);\n}\n\nfunction formatZone(d) {\n  var z = d.getTimezoneOffset();\n  return (z > 0 ? \"-\" : (z *= -1, \"+\"))\n      + pad(z / 60 | 0, \"0\", 2)\n      + pad(z % 60, \"0\", 2);\n}\n\nfunction formatUTCDayOfMonth(d, p) {\n  return pad(d.getUTCDate(), p, 2);\n}\n\nfunction formatUTCHour24(d, p) {\n  return pad(d.getUTCHours(), p, 2);\n}\n\nfunction formatUTCHour12(d, p) {\n  return pad(d.getUTCHours() % 12 || 12, p, 2);\n}\n\nfunction formatUTCDayOfYear(d, p) {\n  return pad(1 + utcDay.count(utcYear(d), d), p, 3);\n}\n\nfunction formatUTCMilliseconds(d, p) {\n  return pad(d.getUTCMilliseconds(), p, 3);\n}\n\nfunction formatUTCMicroseconds(d, p) {\n  return formatUTCMilliseconds(d, p) + \"000\";\n}\n\nfunction formatUTCMonthNumber(d, p) {\n  return pad(d.getUTCMonth() + 1, p, 2);\n}\n\nfunction formatUTCMinutes(d, p) {\n  return pad(d.getUTCMinutes(), p, 2);\n}\n\nfunction formatUTCSeconds(d, p) {\n  return pad(d.getUTCSeconds(), p, 2);\n}\n\nfunction formatUTCWeekdayNumberMonday(d) {\n  var dow = d.getUTCDay();\n  return dow === 0 ? 7 : dow;\n}\n\nfunction formatUTCWeekNumberSunday(d, p) {\n  return pad(utcSunday.count(utcYear(d), d), p, 2);\n}\n\nfunction formatUTCWeekNumberISO(d, p) {\n  var day = d.getUTCDay();\n  d = (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);\n  return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);\n}\n\nfunction formatUTCWeekdayNumberSunday(d) {\n  return d.getUTCDay();\n}\n\nfunction formatUTCWeekNumberMonday(d, p) {\n  return pad(utcMonday.count(utcYear(d), d), p, 2);\n}\n\nfunction formatUTCYear(d, p) {\n  return pad(d.getUTCFullYear() % 100, p, 2);\n}\n\nfunction formatUTCFullYear(d, p) {\n  return pad(d.getUTCFullYear() % 10000, p, 4);\n}\n\nfunction formatUTCZone() {\n  return \"+0000\";\n}\n\nfunction formatLiteralPercent() {\n  return \"%\";\n}\n\nfunction formatUnixTimestamp(d) {\n  return +d;\n}\n\nfunction formatUnixTimestampSeconds(d) {\n  return Math.floor(+d / 1000);\n}\n","import formatLocale from \"./locale\";\n\nvar locale;\nexport var timeFormat;\nexport var timeParse;\nexport var utcFormat;\nexport var utcParse;\n\ndefaultLocale({\n  dateTime: \"%x, %X\",\n  date: \"%-m/%-d/%Y\",\n  time: \"%-I:%M:%S %p\",\n  periods: [\"AM\", \"PM\"],\n  days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n  shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n  shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  timeFormat = locale.format;\n  timeParse = locale.parse;\n  utcFormat = locale.utcFormat;\n  utcParse = locale.utcParse;\n  return locale;\n}\n","import {utcFormat} from \"./defaultLocale\";\n\nexport var isoSpecifier = \"%Y-%m-%dT%H:%M:%S.%LZ\";\n\nfunction formatIsoNative(date) {\n  return date.toISOString();\n}\n\nvar formatIso = Date.prototype.toISOString\n    ? formatIsoNative\n    : utcFormat(isoSpecifier);\n\nexport default formatIso;\n","import {isoSpecifier} from \"./isoFormat\";\nimport {utcParse} from \"./defaultLocale\";\n\nfunction parseIsoNative(string) {\n  var date = new Date(string);\n  return isNaN(date) ? null : date;\n}\n\nvar parseIso = +new Date(\"2000-01-01T00:00:00.000Z\")\n    ? parseIsoNative\n    : utcParse(isoSpecifier);\n\nexport default parseIso;\n","import {bisector, tickStep} from \"d3-array\";\nimport {interpolateNumber as reinterpolate} from \"d3-interpolate\";\nimport {timeYear, timeMonth, timeWeek, timeDay, timeHour, timeMinute, timeSecond, timeMillisecond} from \"d3-time\";\nimport {timeFormat} from \"d3-time-format\";\nimport {map} from \"./array\";\nimport {default as continuous, copy, deinterpolateLinear as deinterpolate} from \"./continuous\";\nimport nice from \"./nice\";\n\nvar durationSecond = 1000,\n    durationMinute = durationSecond * 60,\n    durationHour = durationMinute * 60,\n    durationDay = durationHour * 24,\n    durationWeek = durationDay * 7,\n    durationMonth = durationDay * 30,\n    durationYear = durationDay * 365;\n\nfunction date(t) {\n  return new Date(t);\n}\n\nfunction number(t) {\n  return t instanceof Date ? +t : +new Date(+t);\n}\n\nexport function calendar(year, month, week, day, hour, minute, second, millisecond, format) {\n  var scale = continuous(deinterpolate, reinterpolate),\n      invert = scale.invert,\n      domain = scale.domain;\n\n  var formatMillisecond = format(\".%L\"),\n      formatSecond = format(\":%S\"),\n      formatMinute = format(\"%I:%M\"),\n      formatHour = format(\"%I %p\"),\n      formatDay = format(\"%a %d\"),\n      formatWeek = format(\"%b %d\"),\n      formatMonth = format(\"%B\"),\n      formatYear = format(\"%Y\");\n\n  var tickIntervals = [\n    [second,  1,      durationSecond],\n    [second,  5,  5 * durationSecond],\n    [second, 15, 15 * durationSecond],\n    [second, 30, 30 * durationSecond],\n    [minute,  1,      durationMinute],\n    [minute,  5,  5 * durationMinute],\n    [minute, 15, 15 * durationMinute],\n    [minute, 30, 30 * durationMinute],\n    [  hour,  1,      durationHour  ],\n    [  hour,  3,  3 * durationHour  ],\n    [  hour,  6,  6 * durationHour  ],\n    [  hour, 12, 12 * durationHour  ],\n    [   day,  1,      durationDay   ],\n    [   day,  2,  2 * durationDay   ],\n    [  week,  1,      durationWeek  ],\n    [ month,  1,      durationMonth ],\n    [ month,  3,  3 * durationMonth ],\n    [  year,  1,      durationYear  ]\n  ];\n\n  function tickFormat(date) {\n    return (second(date) < date ? formatMillisecond\n        : minute(date) < date ? formatSecond\n        : hour(date) < date ? formatMinute\n        : day(date) < date ? formatHour\n        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\n        : year(date) < date ? formatMonth\n        : formatYear)(date);\n  }\n\n  function tickInterval(interval, start, stop, step) {\n    if (interval == null) interval = 10;\n\n    // If a desired tick count is specified, pick a reasonable tick interval\n    // based on the extent of the domain and a rough estimate of tick size.\n    // Otherwise, assume interval is already a time interval and use it.\n    if (typeof interval === \"number\") {\n      var target = Math.abs(stop - start) / interval,\n          i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);\n      if (i === tickIntervals.length) {\n        step = tickStep(start / durationYear, stop / durationYear, interval);\n        interval = year;\n      } else if (i) {\n        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\n        step = i[1];\n        interval = i[0];\n      } else {\n        step = Math.max(tickStep(start, stop, interval), 1);\n        interval = millisecond;\n      }\n    }\n\n    return step == null ? interval : interval.every(step);\n  }\n\n  scale.invert = function(y) {\n    return new Date(invert(y));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? domain(map.call(_, number)) : domain().map(date);\n  };\n\n  scale.ticks = function(interval, step) {\n    var d = domain(),\n        t0 = d[0],\n        t1 = d[d.length - 1],\n        r = t1 < t0,\n        t;\n    if (r) t = t0, t0 = t1, t1 = t;\n    t = tickInterval(interval, t0, t1, step);\n    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop\n    return r ? t.reverse() : t;\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    return specifier == null ? tickFormat : format(specifier);\n  };\n\n  scale.nice = function(interval, step) {\n    var d = domain();\n    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))\n        ? domain(nice(d, interval))\n        : scale;\n  };\n\n  scale.copy = function() {\n    return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));\n  };\n\n  return scale;\n}\n\nexport default function() {\n  return calendar(timeYear, timeMonth, timeWeek, timeDay, timeHour, timeMinute, timeSecond, timeMillisecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);\n}\n","import {calendar} from \"./time\";\nimport {utcFormat} from \"d3-time-format\";\nimport {utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute, utcSecond, utcMillisecond} from \"d3-time\";\n\nexport default function() {\n  return calendar(utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute, utcSecond, utcMillisecond, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);\n}\n","import {linearish} from \"./linear\";\n\nexport default function sequential(interpolator) {\n  var x0 = 0,\n      x1 = 1,\n      clamp = false;\n\n  function scale(x) {\n    var t = (x - x0) / (x1 - x0);\n    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, scale) : clamp;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  scale.copy = function() {\n    return sequential(interpolator).domain([x0, x1]).clamp(clamp);\n  };\n\n  return linearish(scale);\n}\n","export default function(x) {\n  return x;\n}\n","import identity from \"./identity\";\n\nexport default function(transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2, n = input.length, output = new Array(n);\n    output[0] = (x0 += input[0]) * kx + dx;\n    output[1] = (y0 += input[1]) * ky + dy;\n    while (j < n) output[j] = input[j], ++j;\n    return output;\n  };\n}\n","import transform from \"./transform\";\n\nexport default function(topology) {\n  var t = transform(topology.transform), key,\n      x0 = Infinity, y0 = x0, x1 = -x0, y1 = -x0;\n\n  function bboxPoint(p) {\n    p = t(p);\n    if (p[0] < x0) x0 = p[0];\n    if (p[0] > x1) x1 = p[0];\n    if (p[1] < y0) y0 = p[1];\n    if (p[1] > y1) y1 = p[1];\n  }\n\n  function bboxGeometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(bboxGeometry); break;\n      case \"Point\": bboxPoint(o.coordinates); break;\n      case \"MultiPoint\": o.coordinates.forEach(bboxPoint); break;\n    }\n  }\n\n  topology.arcs.forEach(function(arc) {\n    var i = -1, n = arc.length, p;\n    while (++i < n) {\n      p = t(arc[i], i);\n      if (p[0] < x0) x0 = p[0];\n      if (p[0] > x1) x1 = p[0];\n      if (p[1] < y0) y0 = p[1];\n      if (p[1] > y1) y1 = p[1];\n    }\n  });\n\n  for (key in topology.objects) {\n    bboxGeometry(topology.objects[key]);\n  }\n\n  return [x0, y0, x1, y1];\n}\n","export default function(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n}\n","import reverse from \"./reverse\";\nimport transform from \"./transform\";\n\nexport default function(topology, o) {\n  return o.type === \"GeometryCollection\"\n      ? {type: \"FeatureCollection\", features: o.geometries.map(function(o) { return feature(topology, o); })}\n      : feature(topology, o);\n}\n\nexport function feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: \"Feature\", properties: properties, geometry: geometry}\n      : bbox == null ? {type: \"Feature\", id: id, properties: properties, geometry: geometry}\n      : {type: \"Feature\", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nexport function object(topology, o) {\n  var transformPoint = transform(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k], k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p);\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case \"GeometryCollection\": return {type: type, geometries: o.geometries.map(geometry)};\n      case \"Point\": coordinates = point(o.coordinates); break;\n      case \"MultiPoint\": coordinates = o.coordinates.map(point); break;\n      case \"LineString\": coordinates = line(o.arcs); break;\n      case \"MultiLineString\": coordinates = o.arcs.map(line); break;\n      case \"Polygon\": coordinates = polygon(o.arcs); break;\n      case \"MultiPolygon\": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n","export default function(topology, arcs) {\n  var stitchedArcs = {},\n      fragmentByStart = {},\n      fragmentByEnd = {},\n      fragments = [],\n      emptyIndex = -1;\n\n  // Stitch empty arcs first, since they may be subsumed by other arcs.\n  arcs.forEach(function(i, j) {\n    var arc = topology.arcs[i < 0 ? ~i : i], t;\n    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {\n      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;\n    }\n  });\n\n  arcs.forEach(function(i) {\n    var e = ends(i),\n        start = e[0],\n        end = e[1],\n        f, g;\n\n    if (f = fragmentByEnd[start]) {\n      delete fragmentByEnd[f.end];\n      f.push(i);\n      f.end = end;\n      if (g = fragmentByStart[end]) {\n        delete fragmentByStart[g.start];\n        var fg = g === f ? f : f.concat(g);\n        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else if (f = fragmentByStart[end]) {\n      delete fragmentByStart[f.start];\n      f.unshift(i);\n      f.start = start;\n      if (g = fragmentByEnd[start]) {\n        delete fragmentByEnd[g.end];\n        var gf = g === f ? f : g.concat(f);\n        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else {\n      f = [i];\n      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;\n    }\n  });\n\n  function ends(i) {\n    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;\n    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });\n    else p1 = arc[arc.length - 1];\n    return i < 0 ? [p1, p0] : [p0, p1];\n  }\n\n  function flush(fragmentByEnd, fragmentByStart) {\n    for (var k in fragmentByEnd) {\n      var f = fragmentByEnd[k];\n      delete fragmentByStart[f.start];\n      delete f.start;\n      delete f.end;\n      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });\n      fragments.push(f);\n    }\n  }\n\n  flush(fragmentByEnd, fragmentByStart);\n  flush(fragmentByStart, fragmentByEnd);\n  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });\n\n  return fragments;\n}\n","import {object} from \"./feature\";\nimport stitch from \"./stitch\";\n\nexport default function(topology) {\n  return object(topology, meshArcs.apply(this, arguments));\n}\n\nexport function meshArcs(topology, object, filter) {\n  var arcs, i, n;\n  if (arguments.length > 1) arcs = extractArcs(topology, object, filter);\n  else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;\n  return {type: \"MultiLineString\", arcs: stitch(topology, arcs)};\n}\n\nfunction extractArcs(topology, object, filter) {\n  var arcs = [],\n      geomsByArc = [],\n      geom;\n\n  function extract0(i) {\n    var j = i < 0 ? ~i : i;\n    (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});\n  }\n\n  function extract1(arcs) {\n    arcs.forEach(extract0);\n  }\n\n  function extract2(arcs) {\n    arcs.forEach(extract1);\n  }\n\n  function extract3(arcs) {\n    arcs.forEach(extract2);\n  }\n\n  function geometry(o) {\n    switch (geom = o, o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\n      case \"LineString\": extract1(o.arcs); break;\n      case \"MultiLineString\": case \"Polygon\": extract2(o.arcs); break;\n      case \"MultiPolygon\": extract3(o.arcs); break;\n    }\n  }\n\n  geometry(object);\n\n  geomsByArc.forEach(filter == null\n      ? function(geoms) { arcs.push(geoms[0].i); }\n      : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });\n\n  return arcs;\n}\n","import {object} from \"./feature\";\nimport stitch from \"./stitch\";\n\nfunction planarRingArea(ring) {\n  var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;\n  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];\n  return Math.abs(area); // Note: doubled area!\n}\n\nexport default function(topology) {\n  return object(topology, mergeArcs.apply(this, arguments));\n}\n\nexport function mergeArcs(topology, objects) {\n  var polygonsByArc = {},\n      polygons = [],\n      groups = [];\n\n  objects.forEach(geometry);\n\n  function geometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\n      case \"Polygon\": extract(o.arcs); break;\n      case \"MultiPolygon\": o.arcs.forEach(extract); break;\n    }\n  }\n\n  function extract(polygon) {\n    polygon.forEach(function(ring) {\n      ring.forEach(function(arc) {\n        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);\n      });\n    });\n    polygons.push(polygon);\n  }\n\n  function area(ring) {\n    return planarRingArea(object(topology, {type: \"Polygon\", arcs: [ring]}).coordinates[0]);\n  }\n\n  polygons.forEach(function(polygon) {\n    if (!polygon._) {\n      var group = [],\n          neighbors = [polygon];\n      polygon._ = 1;\n      groups.push(group);\n      while (polygon = neighbors.pop()) {\n        group.push(polygon);\n        polygon.forEach(function(ring) {\n          ring.forEach(function(arc) {\n            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {\n              if (!polygon._) {\n                polygon._ = 1;\n                neighbors.push(polygon);\n              }\n            });\n          });\n        });\n      }\n    }\n  });\n\n  polygons.forEach(function(polygon) {\n    delete polygon._;\n  });\n\n  return {\n    type: \"MultiPolygon\",\n    arcs: groups.map(function(polygons) {\n      var arcs = [], n;\n\n      // Extract the exterior (unique) arcs.\n      polygons.forEach(function(polygon) {\n        polygon.forEach(function(ring) {\n          ring.forEach(function(arc) {\n            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {\n              arcs.push(arc);\n            }\n          });\n        });\n      });\n\n      // Stitch the arcs into one or more rings.\n      arcs = stitch(topology, arcs);\n\n      // If more than one ring is returned,\n      // at most one of these rings can be the exterior;\n      // choose the one with the greatest absolute area.\n      if ((n = arcs.length) > 1) {\n        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {\n          if ((ki = area(arcs[i])) > k) {\n            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;\n          }\n        }\n      }\n\n      return arcs;\n    })\n  };\n}\n","export default function(a, x) {\n  var lo = 0, hi = a.length;\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (a[mid] < x) lo = mid + 1;\n    else hi = mid;\n  }\n  return lo;\n}\n","import bisect from \"./bisect\";\n\nexport default function(objects) {\n  var indexesByArc = {}, // arc index -> array of object indexes\n      neighbors = objects.map(function() { return []; });\n\n  function line(arcs, i) {\n    arcs.forEach(function(a) {\n      if (a < 0) a = ~a;\n      var o = indexesByArc[a];\n      if (o) o.push(i);\n      else indexesByArc[a] = [i];\n    });\n  }\n\n  function polygon(arcs, i) {\n    arcs.forEach(function(arc) { line(arc, i); });\n  }\n\n  function geometry(o, i) {\n    if (o.type === \"GeometryCollection\") o.geometries.forEach(function(o) { geometry(o, i); });\n    else if (o.type in geometryType) geometryType[o.type](o.arcs, i);\n  }\n\n  var geometryType = {\n    LineString: line,\n    MultiLineString: polygon,\n    Polygon: polygon,\n    MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }\n  };\n\n  objects.forEach(geometry);\n\n  for (var i in indexesByArc) {\n    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {\n      for (var k = j + 1; k < m; ++k) {\n        var ij = indexes[j], ik = indexes[k], n;\n        if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);\n        if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);\n      }\n    }\n  }\n\n  return neighbors;\n}\n","import identity from \"./identity\";\n\nexport default function(transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2,\n        n = input.length,\n        output = new Array(n),\n        x1 = Math.round((input[0] - dx) / kx),\n        y1 = Math.round((input[1] - dy) / ky);\n    output[0] = x1 - x0, x0 = x1;\n    output[1] = y1 - y0, y0 = y1;\n    while (j < n) output[j] = input[j], ++j;\n    return output;\n  };\n}\n","import bbox from \"./bbox\";\nimport untransform from \"./untransform\";\n\nexport default function(topology, transform) {\n  if (topology.transform) throw new Error(\"already quantized\");\n\n  if (!transform || !transform.scale) {\n    if (!((n = Math.floor(transform)) >= 2)) throw new Error(\"n must be ≥2\");\n    box = topology.bbox || bbox(topology);\n    var x0 = box[0], y0 = box[1], x1 = box[2], y1 = box[3], n;\n    transform = {scale: [x1 - x0 ? (x1 - x0) / (n - 1) : 1, y1 - y0 ? (y1 - y0) / (n - 1) : 1], translate: [x0, y0]};\n  } else {\n    box = topology.bbox;\n  }\n\n  var t = untransform(transform), box, key, inputs = topology.objects, outputs = {};\n\n  function quantizePoint(point) {\n    return t(point);\n  }\n\n  function quantizeGeometry(input) {\n    var output;\n    switch (input.type) {\n      case \"GeometryCollection\": output = {type: \"GeometryCollection\", geometries: input.geometries.map(quantizeGeometry)}; break;\n      case \"Point\": output = {type: \"Point\", coordinates: quantizePoint(input.coordinates)}; break;\n      case \"MultiPoint\": output = {type: \"MultiPoint\", coordinates: input.coordinates.map(quantizePoint)}; break;\n      default: return input;\n    }\n    if (input.id != null) output.id = input.id;\n    if (input.bbox != null) output.bbox = input.bbox;\n    if (input.properties != null) output.properties = input.properties;\n    return output;\n  }\n\n  function quantizeArc(input) {\n    var i = 0, j = 1, n = input.length, p, output = new Array(n); // pessimistic\n    output[0] = t(input[0], 0);\n    while (++i < n) if ((p = t(input[i], i))[0] || p[1]) output[j++] = p; // non-coincident points\n    if (j === 1) output[j++] = [0, 0]; // an arc must have at least two points\n    output.length = j;\n    return output;\n  }\n\n  for (key in inputs) outputs[key] = quantizeGeometry(inputs[key]);\n\n  return {\n    type: \"Topology\",\n    bbox: box,\n    transform: transform,\n    objects: outputs,\n    arcs: topology.arcs.map(quantizeArc)\n  };\n}\n","import { format } from 'd3-format';\nimport { pairs } from 'd3-array';\nimport Entity = AFrame.Entity;\n\nAFRAME.registerComponent('legend', {\n    init: function () {\n        this.el.sceneEl.addEventListener('set-legend-color-scale', this.createLegendColorScale.bind(this));\n        this.el.sceneEl.addEventListener('update-legend-year', this.updateLegendYear.bind(this));\n    },\n    remove: function () {\n        this.el.sceneEl.removeEventListener('set-legend-color-scale', this.createLegendColorScale.bind(this));\n        this.el.sceneEl.removeEventListener('update-legend-year', this.updateLegendYear.bind(this));\n    },\n    updateLegendYear: function (event) {\n        const yearEl = document.querySelector('#year');\n        yearEl.setAttribute('value', event.detail.year);\n    },\n    createLegendColorScale: function (event) {\n        const colorScale = event.detail.colorScale;\n        const thresholds = event.detail.thresholds;\n        const thresholdsPerColor = pairs<number>(thresholds).reduce((acc, curr: Array<number>) => {\n            const midPoint = (curr[1] + curr[0])/2;\n            const color = colorScale(midPoint);\n            acc[color] = curr;\n            return acc;\n        }, {});\n        const colors = colorScale.range();\n\n        const containerWidth = Number.parseInt(this.el.getAttribute('width'));\n        const containerHeight = Number.parseInt(this.el.getAttribute('height'));\n        const width = containerWidth/colors.length;\n        let currXPosition = -(containerWidth/2 - width/2);\n        const parentHeight = containerHeight/2;\n        const boxYPos = parentHeight/4;\n        const labelYPos = -(parentHeight/4);\n        const header = document.createElement('a-text') as Entity;\n        header.setAttribute('align', 'center');\n        header.setAttribute('scale', '0.7 0.7 0.7');\n        header.setAttribute('value', 'Percentage population change from previous year');\n        this.el.appendChild(header);\n\n        const formatter = format(\".0%\");\n        for (let color of colors) {\n            const parent = document.createElement('a-entity') as Entity;\n            parent.setAttribute('geometry', {primitive: 'plane', width: width, height: parentHeight});\n            parent.setAttribute('position', `${currXPosition} ${-containerHeight/4} 0`);\n            parent.setAttribute('material', 'visible', false);\n            const box = document.createElement('a-box') as Entity;\n            box.setAttribute('position', `0 ${boxYPos} 0`);\n            box.setAttribute('material', 'color', color);\n            box.setAttribute('height', '0.3');\n            box.setAttribute('width', `${width}`);\n            box.setAttribute('depth', '0.1');\n            parent.appendChild(box);\n            const label = document.createElement('a-text') as Entity;\n            label.setAttribute('position', `0 ${labelYPos} 0`);\n            label.setAttribute('align', 'center');\n            label.setAttribute('scale', '0.6 0.6 0.6');\n            const colorThreshold = thresholdsPerColor[color];\n            label.setAttribute('value', `${formatter(colorThreshold[0])} to ${formatter(colorThreshold[1])}`);\n            parent.appendChild(label);\n            this.el.appendChild(parent);\n            currXPosition += width;\n        }\n    }\n});\n","function responseArrayBuffer(response) {\n  if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\n  return response.arrayBuffer();\n}\n\nexport default function(input, init) {\n  return fetch(input, init).then(responseArrayBuffer);\n}\n","var EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"]\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nexport default function(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    })).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(text) {\n    return text == null ? \"\"\n        : reFormat.test(text += \"\") ? \"\\\"\" + text.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : text;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatRows: formatRows\n  };\n}\n","import dsv from \"./dsv\";\n\nvar csv = dsv(\",\");\n\nexport var csvParse = csv.parse;\nexport var csvParseRows = csv.parseRows;\nexport var csvFormat = csv.format;\nexport var csvFormatRows = csv.formatRows;\n","import dsv from \"./dsv\";\n\nvar tsv = dsv(\"\\t\");\n\nexport var tsvParse = tsv.parse;\nexport var tsvParseRows = tsv.parseRows;\nexport var tsvFormat = tsv.format;\nexport var tsvFormatRows = tsv.formatRows;\n","function responseText(response) {\n  if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\n  return response.text();\n}\n\nexport default function(input, init) {\n  return fetch(input, init).then(responseText);\n}\n","import {csvParse, dsvFormat, tsvParse} from \"d3-dsv\";\nimport text from \"./text\";\n\nfunction dsvParse(parse) {\n  return function(input, init, row) {\n    if (arguments.length === 2 && typeof init === \"function\") row = init, init = undefined;\n    return text(input, init).then(function(response) {\n      return parse(response, row);\n    });\n  };\n}\n\nexport default function dsv(delimiter, input, init, row) {\n  if (arguments.length === 3 && typeof init === \"function\") row = init, init = undefined;\n  var format = dsvFormat(delimiter);\n  return text(input, init).then(function(response) {\n    return format.parse(response, row);\n  });\n}\n\nexport var csv = dsvParse(csvParse);\nexport var tsv = dsvParse(tsvParse);\n","import text from \"./text\";\n\nfunction parser(type) {\n  return function(input, init)  {\n    return text(input, init).then(function(text) {\n      return (new DOMParser).parseFromString(text, type);\n    });\n  };\n}\n\nexport default parser(\"application/xml\");\n\nexport var html = parser(\"text/html\");\n\nexport var svg = parser(\"image/svg+xml\");\n","export default function(specifier) {\n  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;\n  while (i < n) colors[i] = \"#\" + specifier.slice(i * 6, ++i * 6);\n  return colors;\n}\n","import colors from \"../colors\";\n\nexport default colors(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\");\n","import colors from \"../colors\";\n\nexport default colors(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\");\n","import colors from \"../colors\";\n\nexport default colors(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\");\n","import colors from \"../colors\";\n\nexport default colors(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\");\n","import colors from \"../colors\";\n\nexport default colors(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\");\n","import colors from \"../colors\";\n\nexport default colors(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\");\n","import colors from \"../colors\";\n\nexport default colors(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\");\n","import colors from \"../colors\";\n\nexport default colors(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\");\n","import colors from \"../colors\";\n\nexport default colors(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\");\n","import {interpolateRgbBasis} from \"d3-interpolate\";\n\nexport default function(scheme) {\n  return interpolateRgbBasis(scheme[scheme.length - 1]);\n}\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e9a3c9f7f7f7a1d76a\",\n  \"d01c8bf1b6dab8e1864dac26\",\n  \"d01c8bf1b6daf7f7f7b8e1864dac26\",\n  \"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\n  \"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\n  \"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\n  \"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\n  \"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\n  \"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"d8b365f5f5f55ab4ac\",\n  \"a6611adfc27d80cdc1018571\",\n  \"a6611adfc27df5f5f580cdc1018571\",\n  \"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\n  \"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\n  \"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\n  \"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n  \"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\n  \"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"af8dc3f7f7f77fbf7b\",\n  \"7b3294c2a5cfa6dba0008837\",\n  \"7b3294c2a5cff7f7f7a6dba0008837\",\n  \"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\n  \"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\n  \"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\n  \"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\n  \"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n  \"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"998ec3f7f7f7f1a340\",\n  \"5e3c99b2abd2fdb863e66101\",\n  \"5e3c99b2abd2f7f7f7fdb863e66101\",\n  \"542788998ec3d8daebfee0b6f1a340b35806\",\n  \"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\n  \"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\n  \"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\n  \"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\n  \"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"ef8a62f7f7f767a9cf\",\n  \"ca0020f4a58292c5de0571b0\",\n  \"ca0020f4a582f7f7f792c5de0571b0\",\n  \"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\n  \"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\n  \"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\n  \"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\n  \"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\n  \"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"ef8a62ffffff999999\",\n  \"ca0020f4a582bababa404040\",\n  \"ca0020f4a582ffffffbababa404040\",\n  \"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n  \"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\n  \"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\n  \"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\n  \"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\n  \"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fc8d59ffffbf91bfdb\",\n  \"d7191cfdae61abd9e92c7bb6\",\n  \"d7191cfdae61ffffbfabd9e92c7bb6\",\n  \"d73027fc8d59fee090e0f3f891bfdb4575b4\",\n  \"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\n  \"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n  \"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\n  \"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\n  \"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fc8d59ffffbf91cf60\",\n  \"d7191cfdae61a6d96a1a9641\",\n  \"d7191cfdae61ffffbfa6d96a1a9641\",\n  \"d73027fc8d59fee08bd9ef8b91cf601a9850\",\n  \"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\n  \"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\n  \"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\n  \"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n  \"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fc8d59ffffbf99d594\",\n  \"d7191cfdae61abdda42b83ba\",\n  \"d7191cfdae61ffffbfabdda42b83ba\",\n  \"d53e4ffc8d59fee08be6f59899d5943288bd\",\n  \"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\n  \"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\n  \"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\n  \"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\n  \"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e5f5f999d8c92ca25f\",\n  \"edf8fbb2e2e266c2a4238b45\",\n  \"edf8fbb2e2e266c2a42ca25f006d2c\",\n  \"edf8fbccece699d8c966c2a42ca25f006d2c\",\n  \"edf8fbccece699d8c966c2a441ae76238b45005824\",\n  \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\n  \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e0ecf49ebcda8856a7\",\n  \"edf8fbb3cde38c96c688419d\",\n  \"edf8fbb3cde38c96c68856a7810f7c\",\n  \"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\n  \"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n  \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\n  \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e0f3dba8ddb543a2ca\",\n  \"f0f9e8bae4bc7bccc42b8cbe\",\n  \"f0f9e8bae4bc7bccc443a2ca0868ac\",\n  \"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\n  \"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\n  \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\n  \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fee8c8fdbb84e34a33\",\n  \"fef0d9fdcc8afc8d59d7301f\",\n  \"fef0d9fdcc8afc8d59e34a33b30000\",\n  \"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\n  \"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\n  \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\n  \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"ece2f0a6bddb1c9099\",\n  \"f6eff7bdc9e167a9cf02818a\",\n  \"f6eff7bdc9e167a9cf1c9099016c59\",\n  \"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\n  \"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\n  \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\n  \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"ece7f2a6bddb2b8cbe\",\n  \"f1eef6bdc9e174a9cf0570b0\",\n  \"f1eef6bdc9e174a9cf2b8cbe045a8d\",\n  \"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\n  \"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\n  \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\n  \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e7e1efc994c7dd1c77\",\n  \"f1eef6d7b5d8df65b0ce1256\",\n  \"f1eef6d7b5d8df65b0dd1c77980043\",\n  \"f1eef6d4b9dac994c7df65b0dd1c77980043\",\n  \"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n  \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\n  \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fde0ddfa9fb5c51b8a\",\n  \"feebe2fbb4b9f768a1ae017e\",\n  \"feebe2fbb4b9f768a1c51b8a7a0177\",\n  \"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\n  \"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\n  \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\n  \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"edf8b17fcdbb2c7fb8\",\n  \"ffffcca1dab441b6c4225ea8\",\n  \"ffffcca1dab441b6c42c7fb8253494\",\n  \"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\n  \"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\n  \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\n  \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"f7fcb9addd8e31a354\",\n  \"ffffccc2e69978c679238443\",\n  \"ffffccc2e69978c67931a354006837\",\n  \"ffffccd9f0a3addd8e78c67931a354006837\",\n  \"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\n  \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\n  \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fff7bcfec44fd95f0e\",\n  \"ffffd4fed98efe9929cc4c02\",\n  \"ffffd4fed98efe9929d95f0e993404\",\n  \"ffffd4fee391fec44ffe9929d95f0e993404\",\n  \"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\n  \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\n  \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"ffeda0feb24cf03b20\",\n  \"ffffb2fecc5cfd8d3ce31a1c\",\n  \"ffffb2fecc5cfd8d3cf03b20bd0026\",\n  \"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\n  \"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n  \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n  \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"deebf79ecae13182bd\",\n  \"eff3ffbdd7e76baed62171b5\",\n  \"eff3ffbdd7e76baed63182bd08519c\",\n  \"eff3ffc6dbef9ecae16baed63182bd08519c\",\n  \"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\n  \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\n  \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e5f5e0a1d99b31a354\",\n  \"edf8e9bae4b374c476238b45\",\n  \"edf8e9bae4b374c47631a354006d2c\",\n  \"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\n  \"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\n  \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\n  \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"f0f0f0bdbdbd636363\",\n  \"f7f7f7cccccc969696525252\",\n  \"f7f7f7cccccc969696636363252525\",\n  \"f7f7f7d9d9d9bdbdbd969696636363252525\",\n  \"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\n  \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\n  \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"efedf5bcbddc756bb1\",\n  \"f2f0f7cbc9e29e9ac86a51a3\",\n  \"f2f0f7cbc9e29e9ac8756bb154278f\",\n  \"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\n  \"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\n  \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\n  \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fee0d2fc9272de2d26\",\n  \"fee5d9fcae91fb6a4acb181d\",\n  \"fee5d9fcae91fb6a4ade2d26a50f15\",\n  \"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\n  \"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n  \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n  \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fee6cefdae6be6550d\",\n  \"feeddefdbe85fd8d3cd94701\",\n  \"feeddefdbe85fd8d3ce6550da63603\",\n  \"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\n  \"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\n  \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\n  \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\"\n).map(colors);\n\nexport default ramp(scheme);\n","import {cubehelix} from \"d3-color\";\nimport {interpolateCubehelixLong} from \"d3-interpolate\";\n\nexport default interpolateCubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));\n","import {cubehelix} from \"d3-color\";\nimport {interpolateCubehelixLong} from \"d3-interpolate\";\n\nexport var warm = interpolateCubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\nexport var cool = interpolateCubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\nvar rainbow = cubehelix();\n\nexport default function(t) {\n  if (t < 0 || t > 1) t -= Math.floor(t);\n  var ts = Math.abs(t - 0.5);\n  rainbow.h = 360 * t - 100;\n  rainbow.s = 1.5 - 1.5 * ts;\n  rainbow.l = 0.8 - 0.9 * ts;\n  return rainbow + \"\";\n}\n","import colors from \"../colors\";\n\nfunction ramp(range) {\n  var n = range.length;\n  return function(t) {\n    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n  };\n}\n\nexport default ramp(colors(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\"));\n\nexport var magma = ramp(colors(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\"));\n\nexport var inferno = ramp(colors(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\"));\n\nexport var plasma = ramp(colors(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\"));\n","import \"aframe-geo-projection-component\";\nimport \"./legend\";\nimport { extent } from \"d3-array\";\nimport { scaleLinear, scaleThreshold } from \"d3-scale\";\nimport { csv } from \"d3-fetch\";\nimport { schemePiYG } from \"d3-scale-chromatic\";\n\nconst THREE = AFRAME.THREE;\nconst MAX_YEAR = 2016;\n\ninterface IPopDataRecord {\n    id: string,\n    county: string,\n    popestimate2010: number,\n    popestimate2011: number,\n    popestimate2012: number,\n    popestimate2013: number,\n    popestimate2014: number,\n    popestimate2015: number,\n    popestimate2016: number,\n    npopchg2010: number,\n    npopchg2011: number,\n    npopchg2012: number,\n    npopchg2013: number,\n    npopchg2014: number,\n    npopchg2015: number,\n    npopchg2016: number\n}\n\nconst processPopDataFile = (d) : IPopDataRecord => {\n    return {\n        id: d.id,\n        county: d.county,\n        popestimate2010: +d.popestimate2010,\n        popestimate2011: +d.popestimate2011,\n        popestimate2012: +d.popestimate2012,\n        popestimate2013: +d.popestimate2013,\n        popestimate2014: +d.popestimate2014,\n        popestimate2015: +d.popestimate2015,\n        popestimate2016: +d.popestimate2016,\n        npopchg2010: (+d.popestimate2010 - +d.estimatesbase2010)/+d.popestimate2010,\n        npopchg2011: (+d.popestimate2011 - +d.popestimate2010)/+d.popestimate2011,\n        npopchg2012: (+d.popestimate2012 - +d.popestimate2011)/+d.popestimate2012,\n        npopchg2013: (+d.popestimate2013 - +d.popestimate2012)/+d.popestimate2013,\n        npopchg2014: (+d.popestimate2014 - +d.popestimate2013)/+d.popestimate2014,\n        npopchg2015: (+d.popestimate2015 - +d.popestimate2014)/+d.popestimate2015,\n        npopchg2016: (+d.popestimate2016 - +d.popestimate2015)/+d.popestimate2016\n    };\n};\n\nconst getPopColumnNameForYear = (year) => `popestimate${year}`;\nconst getPopDeltaColumnNameForYear = (year) => `npopchg${year}`;\n\nconst calculateMinMaxExtent = (data: Array<IPopDataRecord>, accessor: (year: number) => string) : Array<number> => {\n    const extentsForAllYears = [];\n    for (let year = 2010; year <= MAX_YEAR; year++) {\n        const columnName = accessor(year);\n        const extentForYear = extent(data, (d) => d[columnName]);\n        extentsForAllYears.push(extentForYear[0], extentForYear[1]);\n    }\n    return extent(extentsForAllYears);\n};\n\nAFRAME.registerComponent('extrude-by-population', {\n    dependencies: ['geo-projection'],\n    schema: {\n        year: {\n            default: '2011'\n        },\n        maxExtrudeHeight: {\n            default: 2\n        }\n    },\n    init: function () {\n        this.geoProjectionComponent = this.el.components['geo-projection'];\n        this.ready = false;\n\n        const csvLoaderPromise = csv('assets/2016_us_county_pop.csv', processPopDataFile).then((data: Array<IPopDataRecord>) => {\n            this.populationData = data.reduce((accum, d) => {\n                accum[d.id] = d;\n                return accum;\n            }, {});\n\n            this.minMaxPopExtent = calculateMinMaxExtent(data, getPopColumnNameForYear);\n\n            const [minPopDelta, maxPopDelta] = calculateMinMaxExtent(data, getPopDeltaColumnNameForYear);\n            const thresholds = [-0.10, -0.03, 0.03, 0.10];\n            this.colorScale = scaleThreshold<number, string>().domain(thresholds).range(schemePiYG[5]);\n            const allThresholds = [minPopDelta, ...thresholds, maxPopDelta];\n            this.el.emit('set-legend-color-scale', { colorScale: this.colorScale, thresholds: allThresholds }, true);\n\n        }, (error) => { console.error(error); });\n\n        const geoDataLoaderPromise = new Promise((resolve => {\n            this.el.addEventListener('geo-src-loaded', resolve);\n        }));\n\n        // Wait until all files to finish loading to avoid race conditions\n        Promise.all([geoDataLoaderPromise, csvLoaderPromise]).then(() => {\n            this.ready = true;\n            this.render();\n        }, (error) => { console.error(error); });\n    },\n    update: function (oldData) {\n        if (!this.ready) {\n            return;\n        }\n        if (this.data.maxExtrudeHeight !== oldData.maxExtrudeHeight || this.data.year !== oldData.year) {\n            this.render();\n        }\n    },\n    render: function () {\n        const popColumnName = getPopColumnNameForYear(this.data.year);\n        const popDeltaColumnName = getPopDeltaColumnNameForYear(this.data.year);\n\n        const extrudeScale = scaleLinear().domain(this.minMaxPopExtent).range([0, this.data.maxExtrudeHeight]);\n\n        this.el.emit('update-legend-year', { year: this.data.year }, true);\n\n        // Split the geoJson into features and render each one individually so that we can set a different\n        // extrusion height for each based on the population.\n        const features = this.geoProjectionComponent.geoJson.features;\n        let extrudeGeometries = {};\n        let outlineVertices = [];\n        features.forEach((feature) => {\n            const population = this.populationData[feature.id][popColumnName];\n            const populationDelta = this.populationData[feature.id][popDeltaColumnName];\n            const color = this.colorScale(populationDelta);\n            const extrudeAmount = extrudeScale(population);\n            const extrudeSettings = {\n                amount: extrudeAmount,\n                bevelEnabled: false\n            };\n\n            const mapRenderContext = this.geoProjectionComponent.renderer.renderToContext(feature, this.geoProjectionComponent.projection);\n            const countyShapes = mapRenderContext.toShapes(this.data.isCCW);\n\n            // Gather the outline of the county and set the height of the outline to the extrude level\n            // so that the top of the county is outlined\n            outlineVertices = outlineVertices.concat(mapRenderContext.toVertices(extrudeAmount));\n\n            // Merge all the extruded feature geometries together for better rendering performance\n            // Need to use ExtrudeGeometry here instead of ExtrudeBufferGeometry because the latter doesn't merge properly\n            // in this version of Three.js\n            const extrudedFeatureGeometry = new THREE.ExtrudeGeometry(countyShapes, extrudeSettings);\n            if (!extrudeGeometries[color]) {\n                extrudeGeometries[color] = extrudedFeatureGeometry;\n            } else {\n                extrudeGeometries[color].merge(extrudedFeatureGeometry);\n            }\n        });\n\n        for (const color in extrudeGeometries) {\n            const extrudeGeometry = extrudeGeometries[color];\n\n            const material = new THREE.MeshBasicMaterial({ color });\n            const sideMaterial = new THREE.MeshStandardMaterial({color: 0xb3763e});\n            const extrudedMap = new THREE.Mesh(extrudeGeometry, [material, sideMaterial]);\n            this.el.setObject3D(color, extrudedMap);\n        }\n\n        const outlineGeometry = new THREE.BufferGeometry();\n        outlineGeometry.addAttribute('position', new THREE.Float32BufferAttribute(outlineVertices, 3));\n        const outlineMaterial = new THREE.LineBasicMaterial( { color: 0xa40000 } );\n        const outlineObject3D = new THREE.LineSegments(outlineGeometry, outlineMaterial);\n        this.el.setObject3D('lines', outlineObject3D);\n    }\n});\n","export var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var ceil = Math.ceil;\nexport var cos = Math.cos;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var max = Math.max;\nexport var min = Math.min;\nexport var pow = Math.pow;\nexport var round = Math.round;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sin = Math.sin;\nexport var tan = Math.tan;\n\nexport var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var sqrt1_2 = Math.SQRT1_2;\nexport var sqrt2 = sqrt(2);\nexport var sqrtPi = sqrt(pi);\nexport var tau = pi * 2;\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport function sinci(x) {\n  return x ? x / Math.sin(x) : 1;\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function sqrt(x) {\n  return x > 0 ? Math.sqrt(x) : 0;\n}\n\nexport function tanh(x) {\n  x = exp(2 * x);\n  return (x - 1) / (x + 1);\n}\n\nexport function sinh(x) {\n  return (exp(x) - exp(-x)) / 2;\n}\n\nexport function cosh(x) {\n  return (exp(x) + exp(-x)) / 2;\n}\n\nexport function arsinh(x) {\n  return log(x + sqrt(x * x + 1));\n}\n\nexport function arcosh(x) {\n  return log(x + sqrt(x * x - 1));\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, halfPi, log, radians, sin, sqrt, tan} from \"./math\";\n\nexport function airyRaw(beta) {\n  var tanBeta_2 = tan(beta / 2),\n      b = 2 * log(cos(beta / 2)) / (tanBeta_2 * tanBeta_2);\n\n  function forward(x, y) {\n    var cosx = cos(x),\n        cosy = cos(y),\n        siny = sin(y),\n        cosz = cosy * cosx,\n        k = -((1 - cosz ? log((1 + cosz) / 2) / (1 - cosz) : -0.5) + b / (1 + cosz));\n    return [k * cosy * sin(x), k * siny];\n  }\n\n  forward.invert = function(x, y) {\n    var r = sqrt(x * x + y * y),\n        z = -beta / 2,\n        i = 50, delta;\n    if (!r) return [0, 0];\n    do {\n      var z_2 = z / 2,\n          cosz_2 = cos(z_2),\n          sinz_2 = sin(z_2),\n          tanz_2 = tan(z_2),\n          lnsecz_2 = log(1 / cosz_2);\n      z -= delta = (2 / tanz_2 * lnsecz_2 - b * tanz_2 - r) / (-lnsecz_2 / (sinz_2 * sinz_2) + 1 - b / (2 * cosz_2 * cosz_2));\n    } while (abs(delta) > epsilon && --i > 0);\n    var sinz = sin(z);\n    return [atan2(x * sinz, r * cos(z)), asin(y * sinz / r)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var beta = halfPi,\n      m = projectionMutator(airyRaw),\n      p = m(beta);\n\n  p.radius = function(_) {\n    return arguments.length ? m(beta = _ * radians) : beta * degrees;\n  };\n\n  return p\n      .scale(179.976)\n      .clipAngle(147);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, pi, sin, sinci, sqrt} from \"./math\";\n\nexport function aitoffRaw(x, y) {\n  var cosy = cos(y), sincia = sinci(acos(cosy * cos(x /= 2)));\n  return [2 * cosy * sin(x) * sincia, sin(y) * sincia];\n}\n\n// Abort if [x, y] is not within an ellipse centered at [0, 0] with\n// semi-major axis pi and semi-minor axis pi/2.\naitoffRaw.invert = function(x, y) {\n  if (x * x + 4 * y * y > pi * pi + epsilon) return;\n  var x1 = x, y1 = y, i = 25;\n  do {\n    var sinx = sin(x1),\n        sinx_2 = sin(x1 / 2),\n        cosx_2 = cos(x1 / 2),\n        siny = sin(y1),\n        cosy = cos(y1),\n        sin_2y = sin(2 * y1),\n        sin2y = siny * siny,\n        cos2y = cosy * cosy,\n        sin2x_2 = sinx_2 * sinx_2,\n        c = 1 - cos2y * cosx_2 * cosx_2,\n        e = c ? acos(cosy * cosx_2) * sqrt(f = 1 / c) : f = 0,\n        f,\n        fx = 2 * e * cosy * sinx_2 - x,\n        fy = e * siny - y,\n        dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),\n        dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),\n        dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),\n        dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),\n        z = dxdy * dydx - dydy * dxdx;\n    if (!z) break;\n    var dx = (fy * dxdy - fx * dydy) / z,\n        dy = (fx * dydx - fy * dxdx) / z;\n    x1 -= dx, y1 -= dy;\n  } while ((abs(dx) > epsilon || abs(dy) > epsilon) && --i > 0);\n  return [x1, y1];\n};\n\nexport default function() {\n  return projection(aitoffRaw)\n      .scale(152.63);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, atan2, cos, degrees, epsilon, radians, sin, tan} from \"./math\";\n\nexport function armadilloRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      k = (1 + sinPhi0 - cosPhi0) / 2;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        cosLambda = cos(lambda /= 2);\n    return [\n      (1 + cosPhi) * sin(lambda),\n      (sPhi0 * phi > -atan2(cosLambda, tanPhi0) - 1e-3 ? 0 : -sPhi0 * 10) + k + sin(phi) * cosPhi0 - (1 + cosPhi) * sinPhi0 * cosLambda // TODO D3 core should allow null or [NaN, NaN] to be returned.\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = 0,\n        phi = 0,\n        i = 50;\n    do {\n      var cosLambda = cos(lambda),\n          sinLambda = sin(lambda),\n          cosPhi = cos(phi),\n          sinPhi = sin(phi),\n          A = 1 + cosPhi,\n          fx = A * sinLambda - x,\n          fy = k + sinPhi * cosPhi0 - A * sinPhi0 * cosLambda - y,\n          dxdLambda = A * cosLambda / 2,\n          dxdPhi = -sinLambda * sinPhi,\n          dydLambda = sinPhi0 * A * sinLambda / 2,\n          dydPhi = cosPhi0 * cosPhi + sinPhi0 * cosLambda * sinPhi,\n          denominator = dxdPhi * dydLambda - dydPhi * dxdLambda,\n          dLambda = (fy * dxdPhi - fx * dydPhi) / denominator / 2,\n          dPhi = (fx * dydLambda - fy * dxdLambda) / denominator;\n      lambda -= dLambda, phi -= dPhi;\n    } while ((abs(dLambda) > epsilon || abs(dPhi) > epsilon) && --i > 0);\n    return sPhi0 * phi > -atan2(cos(lambda), tanPhi0) - 1e-3 ? [lambda * 2, phi] : null;\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var phi0 = 20 * radians,\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      m = projectionMutator(armadilloRaw),\n      p = m(phi0),\n      stream_ = p.stream;\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    tanPhi0 = tan((sPhi0 = (phi0 = _ * radians) >= 0 ? 1 : -1) * phi0);\n    return m(phi0);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var lambda = sPhi0 * -180; sPhi0 * lambda < 180; lambda += sPhi0 * 90) sphereStream.point(lambda, sPhi0 * 90);\n      while (sPhi0 * (lambda -= phi0) >= -180) { // TODO precision?\n        sphereStream.point(lambda, sPhi0 * -atan2(cos(lambda * radians / 2), tanPhi0) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(218.695)\n      .center([0, 28.0974]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, arcosh, arsinh, asin, atan2, cos, cosh, sign, sin, sinh, sqrt, tan} from \"./math\";\n\nexport function augustRaw(lambda, phi) {\n  var tanPhi = tan(phi / 2),\n      k = sqrt(1 - tanPhi * tanPhi),\n      c = 1 + k * cos(lambda /= 2),\n      x = sin(lambda) * k / c,\n      y = tanPhi / c,\n      x2 = x * x,\n      y2 = y * y;\n  return [\n    4 / 3 * x * (3 + x2 - 3 * y2),\n    4 / 3 * y * (3 + 3 * x2 - y2)\n  ];\n}\n\naugustRaw.invert = function(x, y) {\n  x *= 3 / 8, y *= 3 / 8;\n  if (!x && abs(y) > 1) return null;\n  var x2 = x * x,\n      y2 = y * y,\n      s = 1 + x2 + y2,\n      sin3Eta = sqrt((s - sqrt(s * s - 4 * y * y)) / 2),\n      eta = asin(sin3Eta) / 3,\n      xi = sin3Eta ? arcosh(abs(y / sin3Eta)) / 3 : arsinh(abs(x)) / 3,\n      cosEta = cos(eta),\n      coshXi = cosh(xi),\n      d = coshXi * coshXi - cosEta * cosEta;\n  return [\n    sign(x) * 2 * atan2(sinh(xi) * cosEta, 0.25 - d),\n    sign(y) * 2 * atan2(coshXi * sin(eta), 0.25 + d)\n  ];\n};\n\nexport default function() {\n  return projection(augustRaw)\n      .scale(66.1603);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, atan, cos, epsilon2, exp, halfPi, log, quarterPi, sign, sin, sqrt, sqrt2, tan} from \"./math\";\n\nvar sqrt8 = sqrt(8),\n    phi0 = log(1 + sqrt2);\n\nexport function bakerRaw(lambda, phi) {\n  var phi0 = abs(phi);\n  return phi0 < quarterPi\n      ? [lambda, log(tan(quarterPi + phi / 2))]\n      : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];\n}\n\nbakerRaw.invert = function(x, y) {\n  if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];\n  var phi = quarterPi, i = 25, delta, y0;\n  do {\n    var cosPhi_2 = cos(phi / 2), tanPhi_2 = tan(phi / 2);\n    phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));\n  } while (abs(delta) > epsilon2 && --i > 0);\n  return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];\n};\n\nexport default function() {\n  return projection(bakerRaw)\n      .scale(112.314);\n}\n","import {geoProjectionMutator as projectionMutator, geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \"d3-geo\";\nimport {abs, acos, asin, atan, atan2, cos, degrees, halfPi, pi, radians, round, sin, sqrt, tan} from \"./math\";\n\nexport function berghausRaw(lobes) {\n  var k = 2 * pi / lobes;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi);\n    if (abs(lambda) > halfPi) { // back hemisphere\n      var theta = atan2(p[1], p[0]),\n          r = sqrt(p[0] * p[0] + p[1] * p[1]),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          alpha = atan2(sin(theta -= theta0), 2 - cos(theta)); // angle relative to lobe end\n      theta = theta0 + asin(pi / r * sin(alpha)) - alpha;\n      p[0] = r * cos(theta);\n      p[1] = r * sin(theta);\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r = sqrt(x * x + y * y);\n    if (r > halfPi) {\n      var theta = atan2(y, x),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          s = theta > theta0 ? -1 : 1,\n          A = r * cos(theta0 - theta),\n          cotAlpha = 1 / tan(s * acos((A - pi) / sqrt(pi * (pi - 2 * A) + r * r)));\n      theta = theta0 + 2 * atan((cotAlpha + s * sqrt(cotAlpha * cotAlpha - 3)) / 3);\n      x = r * cos(theta), y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var lobes = 5,\n      m = projectionMutator(berghausRaw),\n      p = m(lobes),\n      projectionStream = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.lobes = function(_) {\n    return arguments.length ? m(lobes = +_) : lobes;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = projectionStream(stream),\n        sphereStream = (p.rotate([0, 0]), projectionStream(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 360 / lobes, delta0 = 2 * pi / lobes, phi = 90 - 180 / lobes, phi0 = halfPi; i < lobes; ++i, phi -= delta, phi0 -= delta0) {\n        sphereStream.point(atan2(sr * cos(phi0), cr) * degrees, asin(sr * sin(phi0)) * degrees);\n        if (phi < -90) {\n          sphereStream.point(-90, -180 - phi - epsilon);\n          sphereStream.point(-90, -180 - phi + epsilon);\n        } else {\n          sphereStream.point(90, phi + epsilon);\n          sphereStream.point(90, phi - epsilon);\n        }\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(87.8076)\n      .center([0, 17.1875])\n      .clipAngle(180 - 1e-3);\n}\n","import {geoAzimuthalEqualAreaRaw as azimuthalEqualAreaRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {asin, cos, sin} from \"./math\";\n\nexport function hammerRaw(A, B) {\n  if (arguments.length < 2) B = A;\n  if (B === 1) return azimuthalEqualAreaRaw;\n  if (B === Infinity) return hammerQuarticAuthalicRaw;\n\n  function forward(lambda, phi) {\n    var coordinates = azimuthalEqualAreaRaw(lambda / B, phi);\n    coordinates[0] *= A;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    var coordinates = azimuthalEqualAreaRaw.invert(x / A, y);\n    coordinates[0] *= B;\n    return coordinates;\n  };\n\n  return forward;\n}\n\nfunction hammerQuarticAuthalicRaw(lambda, phi) {\n  return [\n    lambda * cos(phi) / cos(phi /= 2),\n    2 * sin(phi)\n  ];\n}\n\nhammerQuarticAuthalicRaw.invert = function(x, y) {\n  var phi = 2 * asin(y / 2);\n  return [\n    x * cos(phi / 2) / cos(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  var B = 2,\n      m = projectionMutator(hammerRaw),\n      p = m(B);\n\n  p.coefficient = function(_) {\n    if (!arguments.length) return B;\n    return m(B = +_);\n  };\n\n  return p\n    .scale(169.529);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {hammerRaw} from \"./hammer\";\nimport {cos, pi, sin} from \"./math\";\n\n// Bertin 1953 as a modified Briesemeister\n// https://bl.ocks.org/Fil/5b9ee9636dfb6ffa53443c9006beb642\nexport function bertin1953Raw() {\n  var hammer = hammerRaw(1.68, 2),\n      fu = 1.4, k = 12;\n\n  return function(lambda, phi) {\n\n    if (lambda + phi < -fu) {\n      var u = (lambda - phi + 1.6) * (lambda + phi + fu) / 8;\n      lambda += u;\n      phi -= 0.8 * u * sin(phi + pi / 2);\n    }\n\n    var r = hammer(lambda, phi);\n\n    var d = (1 - cos(lambda * phi)) / k;\n\n    if (r[1] < 0) {\n      r[0] *= 1 + d;\n    }\n    if (r[1] > 0) {\n      r[1] *= 1 + d / 1.5 * r[0] * r[0];\n    }\n\n    return r;\n  };\n}\n\nexport default function() {\n  var p = projection(bertin1953Raw());\n\n  p.rotate([-16.5, -42]);\n  delete p.rotate;\n\n  return p\n    .scale(176.57)\n    .center([7.93, 0.09]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt2} from \"./math\";\n\nexport function mollweideBromleyTheta(cp, phi) {\n  var cpsinPhi = cp * sin(phi), i = 30, delta;\n  do phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi));\n  while (abs(delta) > epsilon && --i > 0);\n  return phi / 2;\n}\n\nexport function mollweideBromleyRaw(cx, cy, cp) {\n\n  function forward(lambda, phi) {\n    return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];\n  }\n\n  forward.invert = function(x, y) {\n    return y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)];\n  };\n\n  return forward;\n}\n\nexport var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);\n\nexport default function() {\n  return projection(mollweideRaw)\n      .scale(169.529);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideBromleyTheta} from \"./mollweide\";\nimport {abs, cos, epsilon, pi, quarterPi, sin, sqrt2} from \"./math\";\n\nvar k = 2.00276,\n    w = 1.11072;\n\nexport function boggsRaw(lambda, phi) {\n  var theta = mollweideBromleyTheta(pi, phi);\n  return [k * lambda / (1 / cos(phi) + w / cos(theta)), (phi + sqrt2 * sin(theta)) / k];\n}\n\nboggsRaw.invert = function(x, y) {\n  var ky = k * y, theta = y < 0 ? -quarterPi : quarterPi, i = 25, delta, phi;\n  do {\n    phi = ky - sqrt2 * sin(theta);\n    theta -= delta = (sin(2 * theta) + 2 * theta - pi * sin(phi)) / (2 * cos(2 * theta) + 2 + pi * cos(phi) * sqrt2 * cos(theta));\n  } while (abs(delta) > epsilon && --i > 0);\n  phi = ky - sqrt2 * sin(theta);\n  return [x * (1 / cos(phi) + w / cos(theta)) / k, phi];\n};\n\nexport default function() {\n  return projection(boggsRaw)\n      .scale(160.857);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {degrees, radians} from \"./math\";\n\nexport default function(projectAt) {\n  var phi0 = 0,\n      m = projectionMutator(projectAt),\n      p = m(phi0);\n\n  p.parallel = function(_) {\n    return arguments.length ? m(phi0 = _ * radians) : phi0 * degrees;\n  };\n\n  return p;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {cos} from \"./math\";\n\nexport function sinusoidalRaw(lambda, phi) {\n  return [lambda * cos(phi), phi];\n}\n\nsinusoidalRaw.invert = function(x, y) {\n  return [x / cos(y), y];\n};\n\nexport default function() {\n  return projection(sinusoidalRaw)\n      .scale(152.63);\n}\n","import parallel1 from \"./parallel1\";\nimport {atan2, cos, sin, sqrt, tan} from \"./math\";\nimport {sinusoidalRaw} from \"./sinusoidal\";\n\nexport function bonneRaw(phi0) {\n  if (!phi0) return sinusoidalRaw;\n  var cotPhi0 = 1 / tan(phi0);\n\n  function forward(lambda, phi) {\n    var rho = cotPhi0 + phi0 - phi,\n        e = rho ? lambda * cos(phi) / rho : rho;\n    return [rho * sin(e), cotPhi0 - rho * cos(e)];\n  }\n\n  forward.invert = function(x, y) {\n    var rho = sqrt(x * x + (y = cotPhi0 - y) * y),\n        phi = cotPhi0 + phi0 - rho;\n    return [rho / cos(phi) * atan2(x, y), phi];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(bonneRaw)\n      .scale(123.082)\n      .center([0, 26.1441])\n      .parallel(45);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {atan2, cos, halfPi, sin, sqrt} from \"./math\";\n\nexport function bottomleyRaw(sinPsi) {\n\n  function forward(lambda, phi) {\n    var rho = halfPi - phi,\n        eta = rho ? lambda * sinPsi * sin(rho) / rho : rho;\n    return [rho * sin(eta) / sinPsi, halfPi - rho * cos(eta)];\n  }\n\n  forward.invert = function(x, y) {\n    var x1 = x * sinPsi,\n        y1 = halfPi - y,\n        rho = sqrt(x1 * x1 + y1 * y1),\n        eta = atan2(x1, y1);\n    return [(rho ? rho / sin(rho) : 1) * eta / sinPsi, halfPi - rho];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var sinPsi = 0.5,\n      m = projectionMutator(bottomleyRaw),\n      p = m(sinPsi);\n\n  p.fraction = function(_) {\n    return arguments.length ? m(sinPsi = +_) : sinPsi;\n  };\n\n  return p\n      .scale(158.837);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi} from \"./math\";\nimport {mollweideBromleyRaw} from \"./mollweide\";\n\nexport var bromleyRaw = mollweideBromleyRaw(1, 4 / pi, pi);\n\nexport default function() {\n  return projection(bromleyRaw)\n      .scale(152.63);\n}\n","import {geoCentroid as centroid, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon, floor, pi, radians, sin, sqrt} from \"./math\";\n\n// Azimuthal distance.\nfunction distance(dPhi, c1, s1, c2, s2, dLambda) {\n  var cosdLambda = cos(dLambda), r;\n  if (abs(dPhi) > 1 || abs(dLambda) > 1) {\n    r = acos(s1 * s2 + c1 * c2 * cosdLambda);\n  } else {\n    var sindPhi = sin(dPhi / 2), sindLambda = sin(dLambda / 2);\n    r = 2 * asin(sqrt(sindPhi * sindPhi + c1 * c2 * sindLambda * sindLambda));\n  }\n  return abs(r) > epsilon ? [r, atan2(c2 * sin(dLambda), c1 * s2 - s1 * c2 * cosdLambda)] : [0, 0];\n}\n\n// Angle opposite a, and contained between sides of lengths b and c.\nfunction angle(b, c, a) {\n  return acos((b * b + c * c - a * a) / (2 * b * c));\n}\n\n// Normalize longitude.\nfunction longitude(lambda) {\n  return lambda - 2 * pi * floor((lambda + pi) / (2 * pi));\n}\n\nexport function chamberlinRaw(p0, p1, p2) {\n  var points = [\n    [p0[0], p0[1], sin(p0[1]), cos(p0[1])],\n    [p1[0], p1[1], sin(p1[1]), cos(p1[1])],\n    [p2[0], p2[1], sin(p2[1]), cos(p2[1])]\n  ];\n\n  for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {\n    b = points[i];\n    a.v = distance(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);\n    a.point = [0, 0];\n  }\n\n  var beta0 = angle(points[0].v[0], points[2].v[0], points[1].v[0]),\n      beta1 = angle(points[0].v[0], points[1].v[0], points[2].v[0]),\n      beta2 = pi - beta0;\n\n  points[2].point[1] = 0;\n  points[0].point[0] = -(points[1].point[0] = points[0].v[0] / 2);\n\n  var mean = [\n    points[2].point[0] = points[0].point[0] + points[2].v[0] * cos(beta0),\n    2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * sin(beta0))\n  ];\n\n  function forward(lambda, phi) {\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        v = new Array(3), i;\n\n    // Compute distance and azimuth from control points.\n    for (i = 0; i < 3; ++i) {\n      var p = points[i];\n      v[i] = distance(phi - p[1], p[3], p[2], cosPhi, sinPhi, lambda - p[0]);\n      if (!v[i][0]) return p.point;\n      v[i][1] = longitude(v[i][1] - p.v[1]);\n    }\n\n    // Arithmetic mean of interception points.\n    var point = mean.slice();\n    for (i = 0; i < 3; ++i) {\n      var j = i == 2 ? 0 : i + 1;\n      var a = angle(points[i].v[0], v[i][0], v[j][0]);\n      if (v[i][1] < 0) a = -a;\n\n      if (!i) {\n        point[0] += v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else if (i == 1) {\n        a = beta1 - a;\n        point[0] -= v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else {\n        a = beta2 - a;\n        point[0] += v[i][0] * cos(a);\n        point[1] += v[i][0] * sin(a);\n      }\n    }\n\n    point[0] /= 3, point[1] /= 3;\n    return point;\n  }\n\n  return forward;\n}\n\nfunction pointRadians(p) {\n  return p[0] *= radians, p[1] *= radians, p;\n}\n\nexport function chamberlinAfrica() {\n  return chamberlin([0, 22], [45, 22], [22.5, -22])\n      .scale(380)\n      .center([22.5, 2]);\n}\n\nexport default function chamberlin(p0, p1, p2) { // TODO order matters!\n  var c = centroid({type: \"MultiPoint\", coordinates: [p0, p1, p2]}),\n      R = [-c[0], -c[1]],\n      r = rotation(R),\n      p = projection(chamberlinRaw(pointRadians(r(p0)), pointRadians(r(p1)), pointRadians(r(p2)))).rotate(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, pi, sin, sqrt, sqrtPi} from \"./math\";\n\nexport function collignonRaw(lambda, phi) {\n  var alpha = sqrt(1 - sin(phi));\n  return [(2 / sqrtPi) * lambda * alpha, sqrtPi * (1 - alpha)];\n}\n\ncollignonRaw.invert = function(x, y) {\n  var lambda = (lambda = y / sqrtPi - 1) * lambda;\n  return [lambda > 0 ? x * sqrt(pi / lambda) / 2 : 0, asin(1 - lambda)];\n};\n\nexport default function() {\n  return projection(collignonRaw)\n      .scale(95.6464)\n      .center([0, 30]);\n}\n","import {asin, atan2, cos, sin, sqrt, tan} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function craigRaw(phi0) {\n  var tanPhi0 = tan(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda, (lambda ? lambda / sin(lambda) : 1) * (sin(phi) * cos(lambda) - tanPhi0 * cos(phi))];\n  }\n\n  forward.invert = tanPhi0 ? function(x, y) {\n    if (x) y *= sin(x) / x;\n    var cosLambda = cos(x);\n    return [x, 2 * atan2(sqrt(cosLambda * cosLambda + tanPhi0 * tanPhi0 - y * y) - cosLambda, tanPhi0 - y)];\n  } : function(x, y) {\n    return [x, asin(x ? y * tan(x) / x : y)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(craigRaw)\n      .scale(249.828)\n      .clipAngle(90);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt, sqrtPi} from \"./math\";\n\nvar sqrt3 = sqrt(3);\n\nexport function crasterRaw(lambda, phi) {\n  return [sqrt3 * lambda * (2 * cos(2 * phi / 3) - 1) / sqrtPi, sqrt3 * sqrtPi * sin(phi / 3)];\n}\n\ncrasterRaw.invert = function(x, y) {\n  var phi = 3 * asin(y / (sqrt3 * sqrtPi));\n  return [sqrtPi * x / (sqrt3 * (2 * cos(2 * phi / 3) - 1)), phi];\n};\n\nexport default function() {\n  return projection(crasterRaw)\n      .scale(156.19);\n}\n","import {asin, cos, sin} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalEqualAreaRaw)\n      .parallel(38.58) // acos(sqrt(width / height / pi)) * radians\n      .scale(195.044); // width / (sqrt(width / height / pi) * 2 * pi)\n}\n","import {atan, cos, tan} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function cylindricalStereographicRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, (1 + cosPhi0) * tan(phi / 2)];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, atan(y / (1 + cosPhi0)) * 2];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalStereographicRaw)\n      .scale(124.75);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, pi, sqrt} from \"./math\";\n\nexport function eckert1Raw(lambda, phi) {\n  var alpha = sqrt(8 / (3 * pi));\n  return [\n    alpha * lambda * (1 - abs(phi) / pi),\n    alpha * phi\n  ];\n}\n\neckert1Raw.invert = function(x, y) {\n  var alpha = sqrt(8 / (3 * pi)),\n      phi = y / alpha;\n  return [\n    x / (alpha * (1 - abs(phi) / pi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert1Raw)\n      .scale(165.664);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, pi, sign, sin, sqrt} from \"./math\";\n\nexport function eckert2Raw(lambda, phi) {\n  var alpha = sqrt(4 - 3 * sin(abs(phi)));\n  return [\n    2 / sqrt(6 * pi) * lambda * alpha,\n    sign(phi) * sqrt(2 * pi / 3) * (2 - alpha)\n  ];\n}\n\neckert2Raw.invert = function(x, y) {\n  var alpha = 2 - abs(y) / sqrt(2 * pi / 3);\n  return [\n    x * sqrt(6 * pi) / (2 * alpha),\n    sign(y) * asin((4 - alpha * alpha) / 3)\n  ];\n};\n\nexport default function() {\n  return projection(eckert2Raw)\n      .scale(165.664);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math\";\n\nexport function eckert3Raw(lambda, phi) {\n  var k = sqrt(pi * (4 + pi));\n  return [\n    2 / k * lambda * (1 + sqrt(1 - 4 * phi * phi / (pi * pi))),\n    4 / k * phi\n  ];\n}\n\neckert3Raw.invert = function(x, y) {\n  var k = sqrt(pi * (4 + pi)) / 2;\n  return [\n    x * k / (1 + sqrt(1 - y * y * (4 + pi) / (4 * pi))),\n    y * k / 2\n  ];\n};\n\nexport default function() {\n  return projection(eckert3Raw)\n      .scale(180.739);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function eckert4Raw(lambda, phi) {\n  var k = (2 + halfPi) * sin(phi);\n  phi /= 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    var cosPhi = cos(phi);\n    phi -= delta = (phi + sin(phi) * (cosPhi + 2) - k) / (2 * cosPhi * (1 + cosPhi));\n  }\n  return [\n    2 / sqrt(pi * (4 + pi)) * lambda * (1 + cos(phi)),\n    2 * sqrt(pi / (4 + pi)) * sin(phi)\n  ];\n}\n\neckert4Raw.invert = function(x, y) {\n  var A = y * sqrt((4 + pi) / pi) / 2,\n      k = asin(A),\n      c = cos(k);\n  return [\n    x / (2 / sqrt(pi * (4 + pi)) * (1 + c)),\n    asin((k + A * (c + 2)) / (2 + halfPi))\n  ];\n};\n\nexport default function() {\n  return projection(eckert4Raw)\n      .scale(180.739);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {cos, pi, sqrt} from \"./math\";\n\nexport function eckert5Raw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / sqrt(2 + pi),\n    2 * phi / sqrt(2 + pi)\n  ];\n}\n\neckert5Raw.invert = function(x, y) {\n  var k = sqrt(2 + pi),\n      phi = y * k / 2;\n  return [\n    k * x / (1 + cos(phi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert5Raw)\n      .scale(173.044);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function eckert6Raw(lambda, phi) {\n  var k = (1 + halfPi) * sin(phi);\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    phi -= delta = (phi + sin(phi) - k) / (1 + cos(phi));\n  }\n  k = sqrt(2 + pi);\n  return [\n    lambda * (1 + cos(phi)) / k,\n    2 * phi / k\n  ];\n}\n\neckert6Raw.invert = function(x, y) {\n  var j = 1 + halfPi,\n      k = sqrt(j / 2);\n  return [\n    x * 2 * k / (1 + cos(y *= k)),\n    asin((y + sin(y)) / j)\n  ];\n};\n\nexport default function() {\n  return projection(eckert6Raw)\n      .scale(173.044);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {augustRaw} from \"./august\";\nimport {abs, atan, cos, epsilon, halfPi, log, max, min, sin, sqrt, sqrt1_2, sqrt2} from \"./math\";\n\nvar eisenlohrK = 3 + 2 * sqrt2;\n\nexport function eisenlohrRaw(lambda, phi) {\n  var s0 = sin(lambda /= 2),\n      c0 = cos(lambda),\n      k = sqrt(cos(phi)),\n      c1 = cos(phi /= 2),\n      t = sin(phi) / (c1 + sqrt2 * c0 * k),\n      c = sqrt(2 / (1 + t * t)),\n      v = sqrt((sqrt2 * c1 + (c0 + s0) * k) / (sqrt2 * c1 + (c0 - s0) * k));\n  return [\n    eisenlohrK * (c * (v - 1 / v) - 2 * log(v)),\n    eisenlohrK * (c * t * (v + 1 / v) - 2 * atan(t))\n  ];\n}\n\neisenlohrRaw.invert = function(x, y) {\n  if (!(p = augustRaw.invert(x / 1.2, y * 1.065))) return null;\n  var lambda = p[0], phi = p[1], i = 20, p;\n  x /= eisenlohrK, y /= eisenlohrK;\n  do {\n    var _0 = lambda / 2,\n        _1 = phi / 2,\n        s0 = sin(_0),\n        c0 = cos(_0),\n        s1 = sin(_1),\n        c1 = cos(_1),\n        cos1 = cos(phi),\n        k = sqrt(cos1),\n        t = s1 / (c1 + sqrt2 * c0 * k),\n        t2 = t * t,\n        c = sqrt(2 / (1 + t2)),\n        v0 = (sqrt2 * c1 + (c0 + s0) * k),\n        v1 = (sqrt2 * c1 + (c0 - s0) * k),\n        v2 = v0 / v1,\n        v = sqrt(v2),\n        vm1v = v - 1 / v,\n        vp1v = v + 1 / v,\n        fx = c * vm1v - 2 * log(v) - x,\n        fy = c * t * vp1v - 2 * atan(t) - y,\n        deltatDeltaLambda = s1 && sqrt1_2 * k * s0 * t2 / s1,\n        deltatDeltaPhi = (sqrt2 * c0 * c1 + k) / (2 * (c1 + sqrt2 * c0 * k) * (c1 + sqrt2 * c0 * k) * k),\n        deltacDeltat = -0.5 * t * c * c * c,\n        deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,\n        deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,\n        A = (A = 2 * c1 + sqrt2 * k * (c0 - s0)) * A * v,\n        deltavDeltaLambda = (sqrt2 * c0 * c1 * k + cos1) / A,\n        deltavDeltaPhi = -(sqrt2 * s0 * s1) / (k * A),\n        deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),\n        deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),\n        deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),\n        deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n    if (!denominator) break;\n    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda;\n    phi = max(-halfPi, min(halfPi, phi - deltaPhi));\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return abs(abs(phi) - halfPi) < epsilon ? [0, phi] : i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(eisenlohrRaw)\n      .scale(62.5271);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, radians, sqrt, tan} from \"./math\";\n\nvar faheyK = cos(35 * radians);\n\nexport function faheyRaw(lambda, phi) {\n  var t = tan(phi / 2);\n  return [lambda * faheyK * sqrt(1 - t * t), (1 + faheyK) * t];\n}\n\nfaheyRaw.invert = function(x, y) {\n  var t = y / (1 + faheyK);\n  return [x && x / (faheyK * sqrt(1 - t * t)), 2 * atan(t)];\n};\n\nexport default function() {\n  return projection(faheyRaw)\n      .scale(137.152);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, sqrtPi, tan} from \"./math\";\n\nexport function foucautRaw(lambda, phi) {\n  var k = phi / 2, cosk = cos(k);\n  return [ 2 * lambda / sqrtPi * cos(phi) * cosk * cosk, sqrtPi * tan(k)];\n}\n\nfoucautRaw.invert = function(x, y) {\n  var k = atan(y / sqrtPi), cosk = cos(k), phi = 2 * k;\n  return [x * sqrtPi / 2 / (cos(phi) * cosk * cosk), phi];\n};\n\nexport default function() {\n  return projection(foucautRaw)\n      .scale(135.264);\n}\n","import {geoEquirectangular, geoOrthographic} from \"d3-geo\";\nimport {asin, atan, degrees, radians, sin, tan} from \"./math\";\n\nfunction gilbertForward(point) {\n  return [point[0] / 2, asin(tan(point[1] / 2 * radians)) * degrees];\n}\n\nfunction gilbertInvert(point) {\n  return [point[0] * 2, 2 * atan(sin(point[1] * radians)) * degrees];\n}\n\nexport default function(projectionType) {\n  if (projectionType == null) projectionType = geoOrthographic;\n  var projection = projectionType(),\n      equirectangular = geoEquirectangular().scale(degrees).precision(0).clipAngle(null).translate([0, 0]); // antimeridian cutting\n\n  function gilbert(point) {\n    return projection(gilbertForward(point));\n  }\n\n  if (projection.invert) gilbert.invert = function(point) {\n    return gilbertInvert(projection.invert(point));\n  };\n\n  gilbert.stream = function(stream) {\n    var s1 = projection.stream(stream), s0 = equirectangular.stream({\n      point: function(lambda, phi) { s1.point(lambda / 2, asin(tan(-phi / 2 * radians)) * degrees); },\n      lineStart: function() { s1.lineStart(); },\n      lineEnd: function() { s1.lineEnd(); },\n      polygonStart: function() { s1.polygonStart(); },\n      polygonEnd: function() { s1.polygonEnd(); }\n    });\n    s0.sphere = s1.sphere;\n    return s0;\n  };\n\n  function property(name) {\n    gilbert[name] = function(_) {\n      return arguments.length ? (projection[name](_), gilbert) : projection[name]();\n    };\n  }\n\n  gilbert.rotate = function(_) {\n    return arguments.length ? (equirectangular.rotate(_), gilbert) : equirectangular.rotate();\n  };\n\n  gilbert.center = function(_) {\n    return arguments.length ? (projection.center(gilbertForward(_)), gilbert) : gilbertInvert(projection.center());\n  };\n\n  property(\"angle\");\n  property(\"clipAngle\");\n  property(\"clipExtent\");\n  property(\"scale\");\n  property(\"translate\");\n  property(\"precision\");\n\n  return gilbert\n      .scale(249.5);\n}\n","import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, epsilon2, halfPi, pi, radians, round, sin, sqrt} from \"./math\";\n\nexport function gingeryRaw(rho, n) {\n  var k = 2 * pi / n,\n      rho2 = rho * rho;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi),\n        x = p[0],\n        y = p[1],\n        r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          alpha = theta - theta0,\n          rhoCosAlpha = rho * cos(alpha),\n          k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha),\n          s_ = gingeryLength(alpha, k_),\n          e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n\n      x = r;\n      var i = 50, delta;\n      do {\n        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);\n      } while (abs(delta) > epsilon && --i > 0);\n\n      y = alpha * sin(x);\n      if (x < halfPi) y -= k_ * (x - halfPi);\n\n      var s = sin(theta0),\n          c = cos(theta0);\n      p[0] = x * c - y * s;\n      p[1] = x * s + y * c;\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r2 = x * x + y * y;\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          dTheta = theta - theta0;\n\n      x = r * cos(dTheta);\n      y = r * sin(dTheta);\n\n      var x_halfPi = x - halfPi,\n          sinx = sin(x),\n          alpha = y / sinx,\n          delta = x < halfPi ? Infinity : 0,\n          i = 10;\n\n      while (true) {\n        var rhosinAlpha = rho * sin(alpha),\n            rhoCosAlpha = rho * cos(alpha),\n            sinRhoCosAlpha = sin(rhoCosAlpha),\n            halfPi_RhoCosAlpha = halfPi - rhoCosAlpha,\n            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,\n            s_ = gingeryLength(alpha, k_);\n\n        if (abs(delta) < epsilon2 || !--i) break;\n\n        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (\n          sinx - x_halfPi * 2 * (\n            halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) -\n            rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)\n          ) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));\n      }\n      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      theta = theta0 + alpha;\n      x = r * cos(theta);\n      y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction gingeryLength(alpha, k) {\n  return function(x) {\n    var y_ = alpha * cos(x);\n    if (x < halfPi) y_ -= k;\n    return sqrt(1 + y_ * y_);\n  };\n}\n\n// Numerical integration: trapezoidal rule.\nfunction gingeryIntegrate(f, a, b) {\n  var n = 50,\n      h = (b - a) / n,\n      s = f(a) + f(b);\n  for (var i = 1, x = a; i < n; ++i) s += 2 * f(x += h);\n  return s * 0.5 * h;\n}\n\nexport default function() {\n  var n = 6,\n      rho = 30 * radians,\n      cRho = cos(rho),\n      sRho = sin(rho),\n      m = projectionMutator(gingeryRaw),\n      p = m(rho, n),\n      stream_ = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.radius = function(_) {\n    if (!arguments.length) return rho * degrees;\n    cRho = cos(rho = _ * radians);\n    sRho = sin(rho);\n    return m(rho, n);\n  };\n\n  p.lobes = function(_) {\n    if (!arguments.length) return n;\n    return m(rho, n = +_);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {\n        sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);\n        sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .rotate([90, -40])\n      .scale(91.7095)\n      .clipAngle(180 - 1e-3);\n}\n","import {abs, asin, cos, epsilon, pi, sin, sqrt} from \"./math\";\n\nexport default function(a, b, c, d, e, f, g, h) {\n  if (arguments.length < 8) h = 0;\n\n  function forward(lambda, phi) {\n    if (!phi) return [a * lambda / pi, 0];\n    var phi2 = phi * phi,\n        xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n        yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n        m = (xB * xB + yB * yB) / (2 * yB),\n        alpha = lambda * asin(xB / m) / pi;\n    return [m * sin(alpha), phi * (1 + phi2 * h) + m * (1 - cos(alpha))];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = pi * x / a,\n        phi = y,\n        deltaLambda, deltaPhi, i = 50;\n    do {\n      var phi2 = phi * phi,\n          xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n          yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n          p = xB * xB + yB * yB,\n          q = 2 * yB,\n          m = p / q,\n          m2 = m * m,\n          dAlphadLambda = asin(xB / m) / pi,\n          alpha = lambda * dAlphadLambda,\n          xB2 = xB * xB,\n          dxBdPhi = (2 * b + phi2 * (4 * c + phi2 * 6 * d)) * phi,\n          dyBdPhi = e + phi2 * (3 * f + phi2 * 5 * g),\n          dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)),\n          dqdPhi = 2 * (dyBdPhi - 1),\n          dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q),\n          cosAlpha = cos(alpha),\n          sinAlpha = sin(alpha),\n          mcosAlpha = m * cosAlpha,\n          msinAlpha = m * sinAlpha,\n          dAlphadPhi = ((lambda / pi) * (1 / sqrt(1 - xB2 / m2)) * (dxBdPhi * m - xB * dmdPhi)) / m2,\n          fx = msinAlpha - x,\n          fy = phi * (1 + phi2 * h) + m - mcosAlpha - y,\n          deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi,\n          deltaxDeltaLambda = mcosAlpha * dAlphadLambda,\n          deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi),\n          deltayDeltaLambda = msinAlpha * dAlphadLambda,\n          denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n      if (!denominator) break;\n      lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;\n      phi -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n    return [lambda, phi];\n  };\n\n  return forward;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\n\nexport var ginzburg4Raw = ginzburgPolyconicRaw(2.8284, -1.6988, 0.75432, -0.18071, 1.76003, -0.38914, 0.042555);\n\nexport default function() {\n  return projection(ginzburg4Raw)\n      .scale(149.995);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\n\nexport var ginzburg5Raw = ginzburgPolyconicRaw(2.583819, -0.835827, 0.170354, -0.038094, 1.543313, -0.411435,0.082742);\n\nexport default function() {\n  return projection(ginzburg5Raw)\n      .scale(153.93);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\nimport {pi} from \"./math\";\n\nexport var ginzburg6Raw = ginzburgPolyconicRaw(5 / 6 * pi, -0.62636, -0.0344, 0, 1.3493, -0.05524, 0, 0.045);\n\nexport default function() {\n  return projection(ginzburg6Raw)\n      .scale(130.945);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math\";\n\nexport function ginzburg8Raw(lambda, phi) {\n  var lambda2 = lambda * lambda,\n      phi2 = phi * phi;\n  return [\n    lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2),\n    phi * (1 + phi2 / 12)\n  ];\n}\n\nginzburg8Raw.invert = function(x, y) {\n  var lambda = x,\n      phi = y,\n      i = 50, delta;\n  do {\n    var phi2 = phi * phi;\n    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);\n  } while (abs(delta) > epsilon && --i > 0);\n  i = 50;\n  x /= 1 -0.162388 * phi2;\n  do {\n    var lambda4 = (lambda4 = lambda * lambda) * lambda4;\n    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);\n  } while (abs(delta) > epsilon && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(ginzburg8Raw)\n      .scale(131.747);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\n\nexport var ginzburg9Raw = ginzburgPolyconicRaw(2.6516, -0.76534, 0.19123, -0.047094, 1.36289, -0.13965,0.031762);\n\nexport default function() {\n  return projection(ginzburg9Raw)\n      .scale(131.087);\n}\n","import {halfPi, pi} from \"./math\";\n\nexport default function(project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectSquare(lambda, phi) {\n    var s = lambda > 0 ? -0.5 : 0.5,\n        point = project(lambda + s * pi, phi);\n    point[0] -= s * dx;\n    return point;\n  }\n\n  if (project.invert) projectSquare.invert = function(x, y) {\n    var s = x > 0 ? -0.5 : 0.5,\n        location = project.invert(x + s * dx, y),\n        lambda = location[0] - s * pi;\n    if (lambda < -pi) lambda += 2 * pi;\n    else if (lambda > pi) lambda -= 2 * pi;\n    location[0] = lambda;\n    return location;\n  };\n\n  return projectSquare;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan2, cos, sign, epsilon, epsilon2, halfPi, pi, sin, sqrt} from \"./math\";\nimport squareRaw from \"./square\";\n\nexport function gringortenRaw(lambda, phi) {\n  var sLambda = sign(lambda),\n      sPhi = sign(phi),\n      cosPhi = cos(phi),\n      x = cos(lambda) * cosPhi,\n      y = sin(lambda) * cosPhi,\n      z = sin(sPhi * phi);\n  lambda = abs(atan2(y, z));\n  phi = asin(x);\n  if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;\n  var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);\n  if (lambda > pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;\n  return (point[0] *= sLambda, point[1] *= -sPhi, point);\n}\n\ngringortenRaw.invert = function(x, y) {\n  if (abs(x) > 1) x = sign(x) * 2 - x;\n  if (abs(y) > 1) y = sign(y) * 2 - y;\n  var sx = sign(x),\n      sy = sign(y),\n      x0 = -sx * x,\n      y0 = -sy * y,\n      t = y0 / x0 < 1,\n      p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),\n      lambda = p[0],\n      phi = p[1],\n      cosPhi = cos(phi);\n  if (t) lambda = -halfPi - lambda;\n  return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];\n};\n\nfunction gringortenHexadecant(lambda, phi) {\n  if (phi === halfPi) return [0, 0];\n\n  var sinPhi = sin(phi),\n      r = sinPhi * sinPhi,\n      r2 = r * r,\n      j = 1 + r2,\n      k = 1 + 3 * r2,\n      q = 1 - r2,\n      z = asin(1 / sqrt(j)),\n      v = q + r * j * z,\n      p2 = (1 - sinPhi) / v,\n      p = sqrt(p2),\n      a2 = p2 * j,\n      a = sqrt(a2),\n      h = p * q,\n      x,\n      i;\n\n  if (lambda === 0) return [0, -(h + r * a)];\n\n  var cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * k) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = (0.5 * dp2dPhi) / p,\n      dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,\n      dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * dra2dPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      lambda1 = 4 * lambda / pi,\n      delta;\n\n  // Slower but accurate bisection method.\n  if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {\n    x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\n    if (lambda > pi / 4) return [x, x];\n    var x1 = x, x0 = 0.5 * x;\n    x = 0.5 * (x0 + x1), i = 50;\n    do {\n      var g = sqrt(a2 - x * x),\n          f = (x * (zeta + mu * g) + nu * asin(x / a)) - lambda1;\n      if (!f) break;\n      if (f < 0) x0 = x;\n      else x1 = x;\n      x = 0.5 * (x0 + x1);\n    } while (abs(x1 - x0) > epsilon && --i > 0);\n  }\n\n  // Newton-Raphson.\n  else {\n    x = epsilon, i = 25;\n    do {\n      var x2 = x * x,\n          g2 = sqrt(a2 - x2),\n          zetaMug = zeta + mu * g2,\n          f2 = x * zetaMug + nu * asin(x / a) - lambda1,\n          df = zetaMug + (nu - mu * x2) / g2;\n      x -= delta = g2 ? f2 / df : 0;\n    } while (abs(delta) > epsilon && --i > 0);\n  }\n\n  return [x, -h - r * sqrt(a2 - x * x)];\n}\n\nfunction gringortenHexadecantInvert(x, y) {\n  var x0 = 0,\n      x1 = 1,\n      r = 0.5,\n      i = 50;\n\n  while (true) {\n    var r2 = r * r,\n        sinPhi = sqrt(r),\n        z = asin(1 / sqrt(1 + r2)),\n        v = (1 - r2) + r * (1 + r2) * z,\n        p2 = (1 - sinPhi) / v,\n        p = sqrt(p2),\n        a2 = p2 * (1 + r2),\n        h = p * (1 - r2),\n        g2 = a2 - x * x,\n        g = sqrt(g2),\n        y0 = y + h + r * g;\n    if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;\n    if (y0 > 0) x0 = r;\n    else x1 = r;\n    r = 0.5 * (x0 + x1);\n  }\n\n  if (!i) return null;\n\n  var phi = asin(sinPhi),\n      cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);\n\n  return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];\n}\n\nexport default function() {\n  return projection(squareRaw(gringortenRaw))\n      .scale(239.75);\n}\n","import {abs, asin, atan, cos, cosh, epsilon, exp, halfPi, log, pi, pow, quarterPi, sign, sin, sinh, sqrt, tan, tanh} from \"./math\";\n\n// Returns [sn, cn, dn](u + iv|m).\nexport function ellipticJi(u, v, m) {\n  var a, b, c;\n  if (!u) {\n    b = ellipticJ(v, 1 - m);\n    return [\n      [0, b[0] / b[1]],\n      [1 / b[1], 0],\n      [b[2] / b[1], 0]\n    ];\n  }\n  a = ellipticJ(u, m);\n  if (!v) return [[a[0], 0], [a[1], 0], [a[2], 0]];\n  b = ellipticJ(v, 1 - m);\n  c = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];\n  return [\n    [a[0] * b[2] / c, a[1] * a[2] * b[0] * b[1] / c],\n    [a[1] * b[1] / c, -a[0] * a[2] * b[0] * b[2] / c],\n    [a[2] * b[1] * b[2] / c, -m * a[0] * a[1] * b[0] / c]\n  ];\n}\n\n// Returns [sn, cn, dn, ph](u|m).\nexport function ellipticJ(u, m) {\n  var ai, b, phi, t, twon;\n  if (m < epsilon) {\n    t = sin(u);\n    b = cos(u);\n    ai = m * (u - t * b) / 4;\n    return [\n      t - ai * b,\n      b + ai * t,\n      1 - m * t * t / 2,\n      u - ai\n    ];\n  }\n  if (m >= 1 - epsilon) {\n    ai = (1 - m) / 4;\n    b = cosh(u);\n    t = tanh(u);\n    phi = 1 / b;\n    twon = b * sinh(u);\n    return [\n      t + ai * (twon - u) / (b * b),\n      phi - ai * t * phi * (twon - u),\n      phi + ai * t * phi * (twon + u),\n      2 * atan(exp(u)) - halfPi + ai * (twon - u) / b\n    ];\n  }\n\n  var a = [1, 0, 0, 0, 0, 0, 0, 0, 0],\n      c = [sqrt(m), 0, 0, 0, 0, 0, 0, 0, 0],\n      i = 0;\n  b = sqrt(1 - m);\n  twon = 1;\n\n  while (abs(c[i] / a[i]) > epsilon && i < 8) {\n    ai = a[i++];\n    c[i] = (ai - b) / 2;\n    a[i] = (ai + b) / 2;\n    b = sqrt(ai * b);\n    twon *= 2;\n  }\n\n  phi = twon * a[i] * u;\n  do {\n    t = c[i] * sin(b = phi) / a[i];\n    phi = (asin(t) + phi) / 2;\n  } while (--i);\n\n  return [sin(phi), t = cos(phi), t / cos(phi - b), phi];\n}\n\n// Calculate F(phi+iPsi|m).\n// See Abramowitz and Stegun, 17.4.11.\nexport function ellipticFi(phi, psi, m) {\n  var r = abs(phi),\n      i = abs(psi),\n      sinhPsi = sinh(i);\n  if (r) {\n    var cscPhi = 1 / sin(r),\n        cotPhi2 = 1 / (tan(r) * tan(r)),\n        b = -(cotPhi2 + m * (sinhPsi * sinhPsi * cscPhi * cscPhi) - 1 + m),\n        c = (m - 1) * cotPhi2,\n        cotLambda2 = (-b + sqrt(b * b - 4 * c)) / 2;\n    return [\n      ellipticF(atan(1 / sqrt(cotLambda2)), m) * sign(phi),\n      ellipticF(atan(sqrt((cotLambda2 / cotPhi2 - 1) / m)), 1 - m) * sign(psi)\n    ];\n  }\n  return [\n    0,\n    ellipticF(atan(sinhPsi), 1 - m) * sign(psi)\n  ];\n}\n\n// Calculate F(phi|m) where m = k² = sin²α.\n// See Abramowitz and Stegun, 17.6.7.\nexport function ellipticF(phi, m) {\n  if (!m) return phi;\n  if (m === 1) return log(tan(phi / 2 + quarterPi));\n  var a = 1,\n      b = sqrt(1 - m),\n      c = sqrt(m);\n  for (var i = 0; abs(c) > epsilon; i++) {\n    if (phi % pi) {\n      var dPhi = atan(b * tan(phi) / a);\n      if (dPhi < 0) dPhi += pi;\n      phi += dPhi + ~~(phi / pi) * pi;\n    } else phi += phi;\n    c = (a + b) / 2;\n    b = sqrt(a * b);\n    c = ((a = c) - b) / 2;\n  }\n  return phi / (pow(2, i) * a);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {ellipticF, ellipticFi, ellipticJi} from \"./elliptic\";\nimport {abs, atan, atan2, cos, exp, halfPi, log, pi, sin, sqrt, sqrt2, tan} from \"./math\";\nimport squareRaw from \"./square\";\n\nexport function guyouRaw(lambda, phi) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      psi = log(tan(pi / 4 + abs(phi) / 2)),\n      r = exp(f * psi) / sqrt(k_),\n      at = guyouComplexAtan(r * cos(f * lambda), r * sin(f * lambda)),\n      t = ellipticFi(at[0], at[1], k * k);\n  return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];\n}\n\nfunction guyouComplexAtan(x, y) {\n  var x2 = x * x,\n      y_1 = y + 1,\n      t = 1 - x2 - y * y;\n  return [\n   0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)),\n    -0.25 * log(t * t + 4 * x2) +0.5 * log(y_1 * y_1 + x2)\n  ];\n}\n\nfunction guyouComplexDivide(a, b) {\n  var denominator = b[0] * b[0] + b[1] * b[1];\n  return [\n    (a[0] * b[0] + a[1] * b[1]) / denominator,\n    (a[1] * b[0] - a[0] * b[1]) / denominator\n  ];\n}\n\nguyouRaw.invert = function(x, y) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      j = ellipticJi(0.5 * K - y, -x, k * k),\n      tn = guyouComplexDivide(j[0], j[1]),\n      lambda = atan2(tn[1], tn[0]) / f;\n  return [\n    lambda,\n    2 * atan(exp(0.5 / f * log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi\n  ];\n};\n\nexport default function() {\n  return projection(squareRaw(guyouRaw))\n      .scale(151.496);\n}\n","import {geoProjectionMutator as projectionMutator, geoCircle} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, degrees, epsilon, halfPi, radians, sqrt, sin} from \"./math\";\n\nexport function hammerRetroazimuthalRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      rotate = hammerRetroazimuthalRotation(phi0);\n\n  rotate.invert = hammerRetroazimuthalRotation(-phi0);\n\n  function forward(lambda, phi) {\n    var p = rotate(lambda, phi);\n    lambda = p[0], phi = p[1];\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        cosLambda = cos(lambda),\n        z = acos(sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosLambda),\n        sinz = sin(z),\n        K = abs(sinz) > epsilon ? z / sinz : 1;\n    return [\n      K * cosPhi0 * sin(lambda),\n      (abs(lambda) > halfPi ? K : -K) // rotate for back hemisphere\n        * (sinPhi0 * cosPhi - cosPhi0 * sinPhi * cosLambda)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho = sqrt(x * x + y * y),\n        sinz = -sin(rho),\n        cosz = cos(rho),\n        a = rho * cosz,\n        b = -y * sinz,\n        c = rho * sinPhi0,\n        d = sqrt(a * a + b * b - c * c),\n        phi = atan2(a * c + b * d, b * c - a * d),\n        lambda = (rho > halfPi ? -1 : 1) * atan2(x * sinz, rho * cos(phi) * cosz + y * sin(phi) * sinz);\n    return rotate.invert(lambda, phi);\n  };\n\n  return forward;\n}\n\n// Latitudinal rotation by phi0.\n// Temporary hack until D3 supports arbitrary small-circle clipping origins.\nfunction hammerRetroazimuthalRotation(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0);\n\n  return function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi);\n    return [\n      atan2(y, x * cosPhi0 - z * sinPhi0),\n      asin(z * cosPhi0 + x * sinPhi0)\n    ];\n  };\n}\n\nexport default function() {\n  var phi0 = 0,\n      m = projectionMutator(hammerRetroazimuthalRaw),\n      p = m(phi0),\n      rotate_ = p.rotate,\n      stream_ = p.stream,\n      circle = geoCircle();\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    var r = p.rotate();\n    return m(phi0 = _ * radians).rotate(r);\n  };\n\n  // Temporary hack; see hammerRetroazimuthalRotation.\n  p.rotate = function(_) {\n    if (!arguments.length) return (_ = rotate_.call(p), _[1] += phi0 * degrees, _);\n    rotate_.call(p, [_[0], _[1] - phi0 * degrees]);\n    circle.center([-_[0], -_[1]]);\n    return p;\n  };\n\n  p.stream = function(stream) {\n    stream = stream_(stream);\n    stream.sphere = function() {\n      stream.polygonStart();\n      var epsilon = 1e-2,\n          ring = circle.radius(90 - epsilon)().coordinates[0],\n          n = ring.length - 1,\n          i = -1,\n          p;\n      stream.lineStart();\n      while (++i < n) stream.point((p = ring[i])[0], p[1]);\n      stream.lineEnd();\n      ring = circle.radius(90 + epsilon)().coordinates[0];\n      n = ring.length - 1;\n      stream.lineStart();\n      while (--i >= 0) stream.point((p = ring[i])[0], p[1]);\n      stream.lineEnd();\n      stream.polygonEnd();\n    };\n    return stream;\n  };\n\n  return p\n      .scale(79.4187)\n      .parallel(45)\n      .clipAngle(180 - 1e-3);\n}\n","import {range} from \"d3-array\";\nimport {geoStream, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {collignonRaw} from \"./collignon\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea\";\nimport {abs, floor, max, min, pi, radians, sqrtPi, tau} from \"./math\";\n\nvar healpixParallel = 41 + 48 / 36 + 37 / 3600, // for K=3; TODO automate\n    healpixLambert = cylindricalEqualAreaRaw(0);\n\nexport function healpixRaw(H) {\n  var phi0 = healpixParallel * radians,\n      dx = collignonRaw(pi, phi0)[0] - collignonRaw(-pi, phi0)[0],\n      y0 = healpixLambert(0, phi0)[1],\n      y1 = collignonRaw(0, phi0)[1],\n      dy1 = sqrtPi - y1,\n      k = tau / H,\n      w = 4 / tau,\n      h = y0 + (dy1 * dy1 * 4) / tau;\n\n  function forward(lambda, phi) {\n    var point,\n        phi2 = abs(phi);\n    if (phi2 > phi0) {\n      var i = min(H - 1, max(0, floor((lambda + pi) / k)));\n      lambda += pi * (H - 1) / H - i * k;\n      point = collignonRaw(lambda, phi2);\n      point[0] = point[0] * tau / dx - tau * (H - 1) / (2 * H) + i * tau / H;\n      point[1] = y0 + (point[1] - y1) * 4 * dy1 / tau;\n      if (phi < 0) point[1] = -point[1];\n    } else {\n      point = healpixLambert(lambda, phi);\n    }\n    point[0] *= w, point[1] /= h;\n    return point;\n  }\n\n  forward.invert = function(x, y) {\n    x /= w, y *= h;\n    var y2 = abs(y);\n    if (y2 > y0) {\n      var i = min(H - 1, max(0, floor((x + pi) / k)));\n      x = (x + pi * (H - 1) / H - i * k) * dx / tau;\n      var point = collignonRaw.invert(x, 0.25 * (y2 - y0) * tau / dy1 + y1);\n      point[0] -= pi * (H - 1) / H - i * k;\n      if (y < 0) point[1] = -point[1];\n      return point;\n    }\n    return healpixLambert.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction sphere(step) {\n  return {\n    type: \"Polygon\",\n    coordinates: [\n      range(-180, 180 + step / 2, step).map(function(x, i) { return [x, i & 1 ? 90 - 1e-6 : healpixParallel]; })\n      .concat(range(180, -180 - step / 2, -step).map(function(x, i) { return [x, i & 1 ? -90 + 1e-6 : -healpixParallel]; }))\n    ]\n  };\n}\n\nexport default function() {\n  var H = 4,\n      m = projectionMutator(healpixRaw),\n      p = m(H),\n      stream_ = p.stream;\n\n  p.lobes = function(_) {\n    return arguments.length ? m(H = +_) : H;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() { geoStream(sphere(180 / H), sphereStream); };\n    return rotateStream;\n  };\n\n  return p\n      .scale(239.75);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon2, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function hillRaw(K) {\n  var L = 1 + K,\n      sinBt = sin(1 / L),\n      Bt = asin(sinBt),\n      A = 2 * sqrt(pi / (B = pi + 4 * Bt * L)),\n      B,\n      rho0 = 0.5 * A * (L + sqrt(K * (2 + K))),\n      K2 = K * K,\n      L2 = L * L;\n\n  function forward(lambda, phi) {\n    var t = 1 - sin(phi),\n        rho,\n        omega;\n    if (t && t < 2) {\n      var theta = halfPi - phi, i = 25, delta;\n      do {\n        var sinTheta = sin(theta),\n            cosTheta = cos(theta),\n            Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta),\n            C = 1 + L2 - 2 * L * cosTheta;\n        theta -= delta = (theta - K2 * Bt - L * sinTheta + C * Bt_Bt1 -0.5 * t * B) / (2 * L * sinTheta * Bt_Bt1);\n      } while (abs(delta) > epsilon2 && --i > 0);\n      rho = A * sqrt(C);\n      omega = lambda * Bt_Bt1 / pi;\n    } else {\n      rho = A * (K + t);\n      omega = lambda * Bt / pi;\n    }\n    return [\n      rho * sin(omega),\n      rho0 - rho * cos(omega)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + (y -= rho0) * y,\n        cosTheta = (1 + L2 - rho2 / (A * A)) / (2 * L),\n        theta = acos(cosTheta),\n        sinTheta = sin(theta),\n        Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta);\n    return [\n      asin(x / sqrt(rho2)) * pi / Bt_Bt1,\n      asin(1 - 2 * (theta - K2 * Bt - L * sinTheta + (1 + L2 - 2 * L * cosTheta) * Bt_Bt1) / B)\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var K = 1,\n      m = projectionMutator(hillRaw),\n      p = m(K);\n\n  p.ratio = function(_) {\n    return arguments.length ? m(K = +_) : K;\n  };\n\n  return p\n      .scale(167.774)\n      .center([0, 18.67]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideRaw} from \"./mollweide\";\nimport {sinusoidalRaw} from \"./sinusoidal\";\n\nexport var sinuMollweidePhi = 0.7109889596207567;\n\nexport var sinuMollweideY = 0.0528035274542;\n\nexport function sinuMollweideRaw(lambda, phi) {\n  return phi > -sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] += sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nsinuMollweideRaw.invert = function(x, y) {\n  return y > -sinuMollweidePhi\n      ? mollweideRaw.invert(x, y - sinuMollweideY)\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(sinuMollweideRaw)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs} from \"./math\";\nimport {mollweideRaw} from \"./mollweide\";\nimport {sinusoidalRaw} from \"./sinusoidal\";\nimport {sinuMollweidePhi, sinuMollweideY} from \"./sinuMollweide\";\n\nexport function homolosineRaw(lambda, phi) {\n  return abs(phi) > sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] -= phi > 0 ? sinuMollweideY : -sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nhomolosineRaw.invert = function(x, y) {\n  return abs(y) > sinuMollweidePhi\n      ? mollweideRaw.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY))\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(homolosineRaw)\n      .scale(152.63);\n}\n","// https://github.com/scijs/integrate-adaptive-simpson\n\n// This algorithm adapted from pseudocode in:\n// http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf\nfunction adsimp (f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {\n  if (state.nanEncountered) {\n    return NaN;\n  }\n\n  var h, f1, f2, sl, sr, s2, m, V1, V2, err;\n\n  h = b - a;\n  f1 = f(a + h * 0.25);\n  f2 = f(b - h * 0.25);\n\n  // Simple check for NaN:\n  if (isNaN(f1)) {\n    state.nanEncountered = true;\n    return;\n  }\n\n  // Simple check for NaN:\n  if (isNaN(f2)) {\n    state.nanEncountered = true;\n    return;\n  }\n\n  sl = h * (fa + 4 * f1 + fm) / 12;\n  sr = h * (fm + 4 * f2 + fb) / 12;\n  s2 = sl + sr;\n  err = (s2 - V0) / 15;\n\n  if (depth > maxdepth) {\n    state.maxDepthCount++;\n    return s2 + err;\n  } else if (Math.abs(err) < tol) {\n    return s2 + err;\n  } else {\n    m = a + h * 0.5;\n\n    V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);\n\n    if (isNaN(V1)) {\n      state.nanEncountered = true;\n      return NaN;\n    }\n\n    V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);\n\n    if (isNaN(V2)) {\n      state.nanEncountered = true;\n      return NaN;\n    }\n\n    return V1 + V2;\n  }\n}\n\nexport function integrate (f, a, b, tol, maxdepth) {\n  var state = {\n    maxDepthCount: 0,\n    nanEncountered: false\n  };\n\n  if (tol === undefined) {\n    tol = 1e-8;\n  }\n  if (maxdepth === undefined) {\n    maxdepth = 20;\n  }\n\n  var fa = f(a);\n  var fm = f(0.5 * (a + b));\n  var fb = f(b);\n\n  var V0 = (fa + 4 * fm + fb) * (b - a) / 6;\n\n  var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);\n\n/*\n  if (state.maxDepthCount > 0 && console && console.warn) {\n    console.warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');\n  }\n\n  if (state.nanEncountered && console && console.warn) {\n    console.warn('integrate-adaptive-simpson: Warning: NaN encountered. Halting early.');\n  }\n*/\n\n  return result;\n}","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, pi, pow, sign, sin} from \"./math\";\nimport {integrate} from \"./integrate\";\n\nexport function hyperellipticalRaw(alpha, k, gamma) {\n\n  function elliptic (f) {\n    return alpha + (1 - alpha) * pow(1 - pow(f, k), 1 / k);\n  }\n\n  function z(f) {\n    return integrate(elliptic, 0, f, 1e-4);\n  }\n\n  var G = 1 / z(1),\n      n = 1000,\n      m = (1 + 1e-8) * G,\n      approx = [];\n  for (var i = 0; i <= n; i++)\n      approx.push(z(i / n) * m);\n\n  function Y(sinphi) {\n    var rmin = 0, rmax = n, r = n >> 1;\n    do {\n      if (approx[r] > sinphi) rmax = r; else rmin = r;\n      r = (rmin + rmax) >> 1;\n    } while (r > rmin);\n    var u = approx[r + 1] - approx[r];\n    if (u) u = (sinphi - approx[r + 1]) / u;\n    return (r + 1 + u) / n;\n  }\n\n  var ratio = 2 * Y(1) / pi * G / gamma;\n\n  var forward = function(lambda, phi) {\n    var y = Y(abs(sin(phi))),\n        x = elliptic(y) * lambda;\n    y /= ratio;\n    return [ x, (phi >= 0) ? y : -y ];\n  };\n\n  forward.invert = function(x, y) {\n    var phi;\n    y *= ratio;\n    if (abs(y) < 1) phi = sign(y) * asin(z(abs(y)) * G);\n    return [ x / elliptic(abs(y)), phi ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var alpha = 0,\n      k = 2.5,\n      gamma = 1.183136, // affine = sqrt(2 * gamma / pi) = 0.8679\n      m = projectionMutator(hyperellipticalRaw),\n      p = m(alpha, k, gamma);\n\n  p.alpha = function(_) {\n    return arguments.length ? m(alpha = +_, k, gamma) : alpha;\n  };\n\n  p.k = function(_) {\n    return arguments.length ? m(alpha, k = +_, gamma) : k;\n  };\n\n  p.gamma = function(_) {\n    return arguments.length ? m(alpha, k, gamma = +_) : gamma;\n  };\n\n  return p\n      .scale(152.63);\n}\n","import {merge} from \"d3-array\";\nimport {geoStream, geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon, radians} from \"../math\";\n\nfunction pointEqual(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n\nfunction interpolateLine(coordinates, m) {\n  var i = -1,\n      n = coordinates.length,\n      p0 = coordinates[0],\n      p1,\n      dx,\n      dy,\n      resampled = [];\n  while (++i < n) {\n    p1 = coordinates[i];\n    dx = (p1[0] - p0[0]) / m;\n    dy = (p1[1] - p0[1]) / m;\n    for (var j = 0; j < m; ++j) resampled.push([p0[0] + j * dx, p0[1] + j * dy]);\n    p0 = p1;\n  }\n  resampled.push(p1);\n  return resampled;\n}\n\nfunction interpolateSphere(lobes) {\n  var coordinates = [],\n      lobe,\n      lambda0, phi0, phi1,\n      lambda2, phi2,\n      i, n = lobes[0].length;\n\n  // Northern Hemisphere\n  for (i = 0; i < n; ++i) {\n    lobe = lobes[0][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([\n      [lambda0 + epsilon, phi0 + epsilon],\n      [lambda0 + epsilon, phi1 - epsilon],\n      [lambda2 - epsilon, phi1 - epsilon],\n      [lambda2 - epsilon, phi2 + epsilon]\n    ], 30));\n  }\n\n  // Southern Hemisphere\n  for (i = lobes[1].length - 1; i >= 0; --i) {\n    lobe = lobes[1][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([\n      [lambda2 - epsilon, phi2 - epsilon],\n      [lambda2 - epsilon, phi1 + epsilon],\n      [lambda0 + epsilon, phi1 + epsilon],\n      [lambda0 + epsilon, phi0 - epsilon]\n    ], 30));\n  }\n\n  return {\n    type: \"Polygon\",\n    coordinates: [merge(coordinates)]\n  };\n}\n\nexport default function(project, lobes) {\n  var sphere, bounds;\n\n  function forward(lambda, phi) {\n    var sign = phi < 0 ? -1 : +1, lobe = lobes[+(phi < 0)];\n    for (var i = 0, n = lobe.length - 1; i < n && lambda > lobe[i][2][0]; ++i);\n    var p = project(lambda - lobe[i][1][0], phi);\n    p[0] += project(lobe[i][1][0], sign * phi > sign * lobe[i][0][1] ? lobe[i][0][1] : phi)[0];\n    return p;\n  }\n\n  // Assumes mutually exclusive bounding boxes for lobes.\n  if (project.invert) forward.invert = function(x, y) {\n    var bound = bounds[+(y < 0)], lobe = lobes[+(y < 0)];\n    for (var i = 0, n = bound.length; i < n; ++i) {\n      var b = bound[i];\n      if (b[0][0] <= x && x < b[1][0] && b[0][1] <= y && y < b[1][1]) {\n        var p = project.invert(x - project(lobe[i][1][0], 0)[0], y);\n        p[0] += lobe[i][1][0];\n        return pointEqual(forward(p[0], p[1]), [x, y]) ? p : null;\n      }\n    }\n  };\n\n  var p = projection(forward),\n      stream_ = p.stream;\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() { geoStream(sphere, sphereStream); };\n    return rotateStream;\n  };\n  \n  p.lobes = function(_) {\n    if (!arguments.length) return lobes.map(function(lobe) {\n      return lobe.map(function(l) {\n        return [\n          [l[0][0] * degrees, l[0][1] * degrees],\n          [l[1][0] * degrees, l[1][1] * degrees],\n          [l[2][0] * degrees, l[2][1] * degrees]\n        ];\n      });\n    });\n\n    sphere = interpolateSphere(_);\n\n    lobes = _.map(function(lobe) {\n      return lobe.map(function(l) {\n        return [\n          [l[0][0] * radians, l[0][1] * radians],\n          [l[1][0] * radians, l[1][1] * radians],\n          [l[2][0] * radians, l[2][1] * radians]\n        ];\n      });\n    });\n\n    bounds = lobes.map(function(lobe) {\n      return lobe.map(function(l) {\n        var x0 = project(l[0][0], l[0][1])[0],\n            x1 = project(l[2][0], l[2][1])[0],\n            y0 = project(l[1][0], l[0][1])[1],\n            y1 = project(l[1][0], l[1][1])[1],\n            t;\n        if (y0 > y1) t = y0, y0 = y1, y1 = t;\n        return [[x0, y0], [x1, y1]];\n      });\n    });\n\n    return p;\n  };\n\n  if (lobes != null) p.lobes(lobes);\n\n  return p;\n}\n","import {boggsRaw} from \"../boggs\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(boggsRaw, lobes)\n      .scale(160.857);\n}\n","import {homolosineRaw} from \"../homolosine\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(homolosineRaw, lobes)\n      .scale(152.63);\n}\n","import {mollweideRaw} from \"../mollweide\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(mollweideRaw, lobes)\n      .scale(169.529);\n}\n","import {mollweideRaw} from \"../mollweide\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [ -90,  90], [   0,   0]],\n  [[   0,   0], [  90,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [ -90, -90], [   0,   0]],\n  [[   0,   0], [  90, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(mollweideRaw, lobes)\n      .scale(169.529)\n      .rotate([20, 0]);\n}\n","import {sinuMollweideRaw} from \"../sinuMollweide\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,  35], [ -30,  90], [   0,  35]],\n  [[   0,  35], [  30,  90], [ 180,  35]]\n], [ // southern hemisphere\n  [[-180, -10], [-102, -90], [ -65, -10]],\n  [[ -65, -10], [   5, -90], [  77, -10]],\n  [[  77, -10], [ 103, -90], [ 180, -10]]\n]];\n\nexport default function() {\n  return interrupt(sinuMollweideRaw, lobes)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n","import {sinusoidalRaw} from \"../sinusoidal\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-110,  90], [ -40,   0]],\n  [[ -40,   0], [   0,  90], [  40,   0]],\n  [[  40,   0], [ 110,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-110, -90], [ -40,   0]],\n  [[ -40,   0], [   0, -90], [  40,   0]],\n  [[  40,   0], [ 110, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(sinusoidalRaw, lobes)\n      .scale(152.63)\n      .rotate([-20, 0]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt, tau} from \"./math\";\n\nexport function kavrayskiy7Raw(lambda, phi) {\n  return [3 / tau * lambda * sqrt(pi * pi / 3 - phi * phi), phi];\n}\n\nkavrayskiy7Raw.invert = function(x, y) {\n  return [tau / 3 * x / sqrt(pi * pi / 3 - y * y), y];\n};\n\nexport default function() {\n  return projection(kavrayskiy7Raw)\n      .scale(158.837);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, epsilon, halfPi, pow, sign, sin} from \"./math\";\n\nexport function lagrangeRaw(n) {\n\n  function forward(lambda, phi) {\n    if (abs(abs(phi) - halfPi) < epsilon) return [0, phi < 0 ? -2 : 2];\n    var sinPhi = sin(phi),\n        v = pow((1 + sinPhi) / (1 - sinPhi), n / 2),\n        c = 0.5 * (v + 1 / v) + cos(lambda *= n);\n    return [\n      2 * sin(lambda) / c,\n      (v - 1 / v) / c\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var y0 = abs(y);\n    if (abs(y0 - 2) < epsilon) return x ? null : [0, sign(y) * halfPi];\n    if (y0 > 2) return null;\n\n    x /= 2, y /= 2;\n    var x2 = x * x,\n        y2 = y * y,\n        t = 2 * y / (1 + x2 + y2); // tanh(nPhi)\n    t = pow((1 + t) / (1 - t), 1 / n);\n    return [\n      atan2(2 * x, 1 - x2 - y2) / n,\n      asin((t - 1) / (t + 1))\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var n = 0.5,\n      m = projectionMutator(lagrangeRaw),\n      p = m(n);\n\n  p.spacing = function(_) {\n    return arguments.length ? m(n = +_) : n;\n  };\n\n  return p\n      .scale(124.75);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, halfPi, sin, pi, sqrt, sqrt2} from \"./math\";\n\nvar pi_sqrt2 = pi / sqrt2;\n\nexport function larriveeRaw(lambda, phi) {\n  return [\n    lambda * (1 + sqrt(cos(phi))) / 2,\n    phi / (cos(phi / 2) * cos(lambda / 6))\n  ];\n}\n\nlarriveeRaw.invert = function(x, y) {\n  var x0 = abs(x),\n      y0 = abs(y),\n      lambda = epsilon,\n      phi = halfPi;\n  if (y0 < pi_sqrt2) phi *= y0 / pi_sqrt2;\n  else lambda += 6 * acos(pi_sqrt2 / y0);\n  for (var i = 0; i < 25; i++) {\n    var sinPhi = sin(phi),\n        sqrtcosPhi = sqrt(cos(phi)),\n        sinPhi_2 = sin(phi / 2),\n        cosPhi_2 = cos(phi / 2),\n        sinLambda_6 = sin(lambda / 6),\n        cosLambda_6 = cos(lambda / 6),\n        f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x0,\n        f1 = phi / (cosPhi_2 * cosLambda_6) - y0,\n        df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0,\n        df0dLambda = 0.5 * (1 + sqrtcosPhi),\n        df1dPhi = (1 +0.5 * phi * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6),\n        df1dLambda = (phi / cosPhi_2) * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6),\n        denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda,\n        dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom,\n        dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;\n    phi -= dPhi;\n    lambda -= dLambda;\n    if (abs(dPhi) < epsilon && abs(dLambda) < epsilon) break;\n  }\n  return [x < 0 ? -lambda : lambda, y < 0 ? -phi : phi];\n};\n\nexport default function() {\n  return projection(larriveeRaw)\n      .scale(97.2672);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, pi, sign} from \"./math\";\n\nexport function laskowskiRaw(lambda, phi) {\n  var lambda2 = lambda * lambda, phi2 = phi * phi;\n  return [\n    lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)),\n    phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032))\n  ];\n}\n\nlaskowskiRaw.invert = function(x, y) {\n  var lambda = sign(x) * pi,\n      phi = y / 2,\n      i = 50;\n  do {\n    var lambda2 = lambda * lambda,\n        phi2 = phi * phi,\n        lambdaPhi = lambda * phi,\n        fx = lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)) - x,\n        fy = phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032)) - y,\n        deltaxDeltaLambda = 0.975534 - phi2 * (0.119161 + 3 * lambda2 * 0.0143059 + phi2 * 0.0547009),\n        deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi2 + 2 * 0.0143059 * lambda2),\n        deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 0.000199025 * lambda2 + 2 * -0.02855 * phi2),\n        deltayDeltaPhi = 1.00384 + lambda2 * (0.0802894 + 0.000199025 * lambda2) + phi2 * (3 * (0.0998909 - 0.02855 * lambda2) - 5 * 0.0491032 * phi2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda,\n        deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda, phi -= deltaPhi;\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(laskowskiRaw)\n      .scale(139.98);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {acos, asin, cos, sign, sin, tan, sqrt, sqrt1_2} from \"./math\";\n\nexport function littrowRaw(lambda, phi) {\n  return [\n    sin(lambda) / cos(phi),\n    tan(phi) * cos(lambda)\n  ];\n}\n\nlittrowRaw.invert = function(x, y) {\n  var x2 = x * x,\n      y2 = y * y,\n      y2_1 = y2 + 1,\n      x2_y2_1 = x2 + y2_1,\n      cosPhi = x\n          ? sqrt1_2 * sqrt((x2_y2_1 - sqrt(x2_y2_1 * x2_y2_1 - 4 * x2)) / x2)\n          : 1 / sqrt(y2_1);\n  return [\n    asin(x * cosPhi),\n    sign(y) * acos(cosPhi)\n  ];\n};\n\nexport default function() {\n  return projection(littrowRaw)\n      .scale(144.049)\n      .clipAngle(90 - 1e-3);\n}\n","import parallel1 from \"./parallel1\";\nimport {abs, cos, epsilon, halfPi, log, quarterPi, tan} from \"./math\";\n\nexport function loximuthalRaw(phi0) {\n  var cosPhi0 = cos(phi0),\n      tanPhi0 = tan(quarterPi + phi0 / 2);\n\n  function forward(lambda, phi) {\n    var y = phi - phi0,\n        x = abs(y) < epsilon ? lambda * cosPhi0\n            : abs(x = quarterPi + phi / 2) < epsilon || abs(abs(x) - halfPi) < epsilon\n            ? 0 : lambda * y / log(tan(x) / tanPhi0);\n    return [x, y];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda,\n        phi = y + phi0;\n    return [\n      abs(y) < epsilon ? x / cosPhi0\n          : (abs(lambda = quarterPi + phi / 2) < epsilon || abs(abs(lambda) - halfPi) < epsilon) ? 0\n          : x * log(tan(lambda) / tanPhi0) / y,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(loximuthalRaw)\n      .parallel(40)\n      .scale(158.837);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, exp, log, quarterPi, pi, tan} from \"./math\";\n\nexport function millerRaw(lambda, phi) {\n  return [lambda, 1.25 * log(tan(quarterPi + 0.4 * phi))];\n}\n\nmillerRaw.invert = function(x, y) {\n  return [x, 2.5 * atan(exp(0.8 * y)) - 0.625 * pi];\n};\n\nexport default function() {\n  return projection(millerRaw)\n      .scale(108.318);\n}\n","import {geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, epsilon, sin, sqrt} from \"./math\";\n\nexport function modifiedStereographicRaw(C) {\n  var m = C.length - 1;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = 2 / (1 + cosPhi * cos(lambda)),\n        zr = k * cosPhi * sin(lambda),\n        zi = k * sin(phi),\n        i = m,\n        w = C[i],\n        ar = w[0],\n        ai = w[1],\n        t;\n    while (--i >= 0) {\n      w = C[i];\n      ar = w[0] + zr * (t = ar) - zi * ai;\n      ai = w[1] + zr * ai + zi * t;\n    }\n    ar = zr * (t = ar) - zi * ai;\n    ai = zr * ai + zi * t;\n    return [ar, ai];\n  }\n\n  forward.invert = function(x, y) {\n    var i = 20,\n        zr = x,\n        zi = y;\n    do {\n      var j = m,\n          w = C[j],\n          ar = w[0],\n          ai = w[1],\n          br = 0,\n          bi = 0,\n          t;\n\n      while (--j >= 0) {\n        w = C[j];\n        br = ar + zr * (t = br) - zi * bi;\n        bi = ai + zr * bi + zi * t;\n        ar = w[0] + zr * (t = ar) - zi * ai;\n        ai = w[1] + zr * ai + zi * t;\n      }\n      br = ar + zr * (t = br) - zi * bi;\n      bi = ai + zr * bi + zi * t;\n      ar = zr * (t = ar) - zi * ai - x;\n      ai = zr * ai + zi * t - y;\n\n      var denominator = br * br + bi * bi, deltar, deltai;\n      zr -= deltar = (ar * br + ai * bi) / denominator;\n      zi -= deltai = (ai * br - ar * bi) / denominator;\n    } while (abs(deltar) + abs(deltai) > epsilon * epsilon && --i > 0);\n\n    if (i) {\n      var rho = sqrt(zr * zr + zi * zi),\n          c = 2 * atan(rho * 0.5),\n          sinc = sin(c);\n      return [atan2(zr * sinc, rho * cos(c)), rho ? asin(zi * sinc / rho) : 0];\n    }\n  };\n\n  return forward;\n}\n\nvar alaska = [[0.9972523, 0], [0.0052513, -0.0041175], [0.0074606, 0.0048125], [-0.0153783, -0.1968253], [0.0636871, -0.1408027], [0.3660976, -0.2937382]],\n    gs48 = [[0.98879, 0], [0, 0], [-0.050909, 0], [0, 0], [0.075528, 0]],\n    gs50 = [[0.9842990, 0], [0.0211642, 0.0037608], [-0.1036018, -0.0575102], [-0.0329095, -0.0320119], [0.0499471, 0.1223335], [0.0260460, 0.0899805], [0.0007388, -0.1435792], [0.0075848, -0.1334108], [-0.0216473, 0.0776645], [-0.0225161, 0.0853673]],\n    miller = [[0.9245, 0], [0, 0], [0.01943, 0]],\n    lee = [[0.721316, 0], [0, 0], [-0.00881625, -0.00617325]];\n\nexport function modifiedStereographicAlaska() {\n  return modifiedStereographic(alaska, [152, -64])\n      .scale(1500)\n      .center([-160.908, 62.4864])\n      .clipAngle(25);\n}\n\nexport function modifiedStereographicGs48() {\n  return modifiedStereographic(gs48, [95, -38])\n      .scale(1000)\n      .clipAngle(55)\n      .center([-96.5563, 38.8675]);\n}\n\nexport function modifiedStereographicGs50() {\n  return modifiedStereographic(gs50, [120, -45])\n      .scale(359.513)\n      .clipAngle(55)\n      .center([-117.474, 53.0628]);\n}\n\nexport function modifiedStereographicMiller() {\n  return modifiedStereographic(miller, [-20, -18])\n      .scale(209.091)\n      .center([20, 16.7214])\n      .clipAngle(82);\n}\n\nexport function modifiedStereographicLee() {\n  return modifiedStereographic(lee, [165, 10])\n      .scale(250)\n      .clipAngle(130)\n      .center([-165, -10]);\n}\n\nexport default function modifiedStereographic(coefficients, rotate) {\n  var p = projection(modifiedStereographicRaw(coefficients)).rotate(rotate).clipAngle(90),\n      r = rotation(rotate),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt} from \"./math\";\n\nvar sqrt6 = sqrt(6),\n    sqrt7 = sqrt(7);\n\nexport function mtFlatPolarParabolicRaw(lambda, phi) {\n  var theta = asin(7 * sin(phi) / (3 * sqrt6));\n  return [\n    sqrt6 * lambda * (2 * cos(2 * theta / 3) - 1) / sqrt7,\n    9 * sin(theta / 3) / sqrt7\n  ];\n}\n\nmtFlatPolarParabolicRaw.invert = function(x, y) {\n  var theta = 3 * asin(y * sqrt7 / 9);\n  return [\n    x * sqrt7 / (sqrt6 * (2 * cos(2 * theta / 3) - 1)),\n    asin(sin(theta) * 3 * sqrt6 / 7)\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarParabolicRaw)\n      .scale(164.859);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, sin, sqrt, sqrt1_2, sqrt2} from \"./math\";\n\nexport function mtFlatPolarQuarticRaw(lambda, phi) {\n  var k = (1 + sqrt1_2) * sin(phi),\n      theta = phi;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (sin(theta / 2) + sin(theta) - k) / (0.5 * cos(theta / 2) + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    lambda * (1 + 2 * cos(theta) / cos(theta / 2)) / (3 * sqrt2),\n    2 * sqrt(3) * sin(theta / 2) / sqrt(2 + sqrt2)\n  ];\n}\n\nmtFlatPolarQuarticRaw.invert = function(x, y) {\n  var sinTheta_2 = y * sqrt(2 + sqrt2) / (2 * sqrt(3)),\n      theta = 2 * asin(sinTheta_2);\n  return [\n    3 * sqrt2 * x / (1 + 2 * cos(theta) / cos(theta / 2)),\n    asin((sinTheta_2 + sin(theta)) / (1 + sqrt1_2))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarQuarticRaw)\n      .scale(188.209);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function mtFlatPolarSinusoidalRaw(lambda, phi) {\n  var A = sqrt(6 / (4 + pi)),\n      k = (1 + pi / 4) * sin(phi),\n      theta = phi / 2;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    A * (0.5 + cos(theta)) * lambda / 1.5,\n    A * theta\n  ];\n}\n\nmtFlatPolarSinusoidalRaw.invert = function(x, y) {\n  var A = sqrt(6 / (4 + pi)),\n      theta = y / A;\n  if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;\n  return [\n    1.5 * x / (A * (0.5 + cos(theta))),\n    asin((theta / 2 + sin(theta)) / (1 + pi / 4))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarSinusoidalRaw)\n      .scale(166.518);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon2} from \"./math\";\n\nexport function naturalEarth2Raw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2, phi6 = phi2 * phi4;\n  return [\n    lambda * (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)),\n    phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4))\n  ];\n}\n\nnaturalEarth2Raw.invert = function(x, y) {\n  var phi = y, i = 25, delta, phi2, phi4, phi6;\n  do {\n    phi2 = phi * phi; phi4 = phi2 * phi2;\n    phi -= delta = ((phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4))) - y) /\n      (1.01183 + phi4 * phi4 * ((9 * -0.02625) + (11 * 0.01926) * phi2 + (13 * -0.00396) * phi4));\n  } while (abs(delta) > epsilon2 && --i > 0);\n  phi2 = phi * phi; phi4 = phi2 * phi2; phi6 = phi2 * phi4;\n  return [\n    x / (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarth2Raw)\n      .scale(175.295);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, epsilon, tan} from \"./math\";\n\nexport function nellHammerRaw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / 2,\n    2 * (phi - tan(phi / 2))\n  ];\n}\n\nnellHammerRaw.invert = function(x, y) {\n  var p = y / 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; ++i) {\n    var c = cos(y / 2);\n    y -= delta = (y - tan(y / 2) - p) / (1 - 0.5 / (c * c));\n  }\n  return [\n    2 * x / (1 + cos(y)),\n    y\n  ];\n};\n\nexport default function() {\n  return projection(nellHammerRaw)\n      .scale(152.63);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math\";\n\n// Based on Java implementation by Bojan Savric.\n// https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java\n\nvar pattersonK1 = 1.0148,\n    pattersonK2 = 0.23185,\n    pattersonK3 = -0.14499,\n    pattersonK4 = 0.02406,\n    pattersonC1 = pattersonK1,\n    pattersonC2 = 5 * pattersonK2,\n    pattersonC3 = 7 * pattersonK3,\n    pattersonC4 = 9 * pattersonK4,\n    pattersonYmax = 1.790857183;\n\nexport function pattersonRaw(lambda, phi) {\n  var phi2 = phi * phi;\n  return [\n    lambda,\n    phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))\n  ];\n}\n\npattersonRaw.invert = function(x, y) {\n  if (y > pattersonYmax) y = pattersonYmax;\n  else if (y < -pattersonYmax) y = -pattersonYmax;\n  var yc = y, delta;\n\n  do { // Newton-Raphson\n    var y2 = yc * yc;\n    yc -= delta = ((yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2)))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));\n  } while (abs(delta) > epsilon);\n\n  return [x, yc];\n};\n\nexport default function() {\n  return projection(pattersonRaw)\n      .scale(139.319);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, cos, epsilon, halfPi, sign, sin, tan} from \"./math\";\n\nexport function polyconicRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var tanPhi = tan(phi),\n      k = lambda * sin(phi);\n  return [\n    sin(k) / tanPhi,\n    phi + (1 - cos(k)) / tanPhi\n  ];\n}\n\npolyconicRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  var k = x * x + y * y,\n      phi = y * 0.5,\n      i = 10, delta;\n  do {\n    var tanPhi = tan(phi),\n        secPhi = 1 / cos(phi),\n        j = k - 2 * y * phi + phi * phi;\n    phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n  } while (abs(delta) > epsilon && --i > 0);\n  tanPhi = tan(phi);\n  return [\n    (abs(y) < abs(phi + 1 / tanPhi) ? asin(x * tanPhi) : sign(x) * (acos(abs(x * tanPhi)) + halfPi)) / sin(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(polyconicRaw)\n      .scale(103.74);\n}\n","import {atan2, cos, sin, sqrt} from \"../math\";\n\n// Note: 6-element arrays are used to denote the 3x3 affine transform matrix:\n// [a, b, c,\n//  d, e, f,\n//  0, 0, 1] - this redundant row is left out.\n\n// Transform matrix for [a0, a1] -> [b0, b1].\nexport default function(a, b) {\n  var u = subtract(a[1], a[0]),\n      v = subtract(b[1], b[0]),\n      phi = angle(u, v),\n      s = length(u) / length(v);\n\n  return multiply([\n    1, 0, a[0][0],\n    0, 1, a[0][1]\n  ], multiply([\n    s, 0, 0,\n    0, s, 0\n  ], multiply([\n    cos(phi), sin(phi), 0,\n    -sin(phi), cos(phi), 0\n  ], [\n    1, 0, -b[0][0],\n    0, 1, -b[0][1]\n  ])));\n}\n\n// Inverts a transform matrix.\nexport function inverse(m) {\n  var k = 1 / (m[0] * m[4] - m[1] * m[3]);\n  return [\n    k * m[4], -k * m[1], k * (m[1] * m[5] - m[2] * m[4]),\n    -k * m[3], k * m[0], k * (m[2] * m[3] - m[0] * m[5])\n  ];\n}\n\n// Multiplies two 3x2 matrices.\nexport function multiply(a, b) {\n  return [\n    a[0] * b[0] + a[1] * b[3],\n    a[0] * b[1] + a[1] * b[4],\n    a[0] * b[2] + a[1] * b[5] + a[2],\n    a[3] * b[0] + a[4] * b[3],\n    a[3] * b[1] + a[4] * b[4],\n    a[3] * b[2] + a[4] * b[5] + a[5]\n  ];\n}\n\n// Subtracts 2D vectors.\nfunction subtract(a, b) {\n  return [a[0] - b[0], a[1] - b[1]];\n}\n\n// Magnitude of a 2D vector.\nfunction length(v) {\n  return sqrt(v[0] * v[0] + v[1] * v[1]);\n}\n\n// Angle between two 2D vectors.\nfunction angle(a, b) {\n  return atan2(a[0] * b[1] - a[1] * b[0], a[0] * b[0] + a[1] * b[1]);\n}\n","import {geoBounds as bounds, geoCentroid as centroid, geoInterpolate as interpolate, geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon, radians} from \"../math\";\nimport {default as matrix, multiply, inverse} from \"./matrix\";\n\n// Creates a polyhedral projection.\n//  * root: a spanning tree of polygon faces.  Nodes are automatically\n//    augmented with a transform matrix.\n//  * face: a function that returns the appropriate node for a given {lambda, phi}\n//    point (radians).\n//  * r: rotation angle for root face [deprecated by .angle()].\nexport default function(root, face, r) {\n\n  recurse(root, {transform: null});\n\n  function recurse(node, parent) {\n    node.edges = faceEdges(node.face);\n    // Find shared edge.\n    if (parent.face) {\n      var shared = node.shared = sharedEdge(node.face, parent.face),\n          m = matrix(shared.map(parent.project), shared.map(node.project));\n      node.transform = parent.transform ? multiply(parent.transform, m) : m;\n      // Replace shared edge in parent edges array.\n      var edges = parent.edges;\n      for (var i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;\n      }\n      edges = node.edges;\n      for (i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;\n      }\n    } else {\n      node.transform = parent.transform;\n    }\n    if (node.children) {\n      node.children.forEach(function(child) {\n        recurse(child, node);\n      });\n    }\n    return node;\n  }\n\n  function forward(lambda, phi) {\n    var node = face(lambda, phi),\n        point = node.project([lambda * degrees, phi * degrees]),\n        t;\n    if (t = node.transform) {\n      return [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        -(t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    point[1] = -point[1];\n    return point;\n  }\n\n  // Naive inverse!  A faster solution would use bounding boxes, or even a\n  // polygonal quadtree.\n  if (hasInverse(root)) forward.invert = function(x, y) {\n    var coordinates = faceInvert(root, [x, -y]);\n    return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);\n  };\n\n  function faceInvert(node, coordinates) {\n    var invert = node.project.invert,\n        t = node.transform,\n        point = coordinates;\n    if (t) {\n      t = inverse(t);\n      point = [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        (t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    if (invert && node === faceDegrees(p = invert(point))) return p;\n    var p,\n        children = node.children;\n    for (var i = 0, n = children && children.length; i < n; ++i) {\n      if (p = faceInvert(children[i], coordinates)) return p;\n    }\n  }\n\n  function faceDegrees(coordinates) {\n    return face(coordinates[0] * radians, coordinates[1] * radians);\n  }\n\n  var proj = projection(forward),\n      stream_ = proj.stream;\n\n  proj.stream = function(stream) {\n    var rotate = proj.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (proj.rotate([0, 0]), stream_(stream));\n    proj.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart();\n      sphereStream.lineStart();\n      outline(sphereStream, root);\n      sphereStream.lineEnd();\n      sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return proj.angle(r == null ? -30 : r * degrees);\n}\n\nfunction outline(stream, node, parent) {\n  var point,\n      edges = node.edges,\n      n = edges.length,\n      edge,\n      multiPoint = {type: \"MultiPoint\", coordinates: node.face},\n      notPoles = node.face.filter(function(d) { return abs(d[1]) !== 90; }),\n      b = bounds({type: \"MultiPoint\", coordinates: notPoles}),\n      inside = false,\n      j = -1,\n      dx = b[1][0] - b[0][0];\n  // TODO\n  var c = dx === 180 || dx === 360\n      ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2]\n      : centroid(multiPoint);\n  // First find the shared edge…\n  if (parent) while (++j < n) {\n    if (edges[j] === parent) break;\n  }\n  ++j;\n  for (var i = 0; i < n; ++i) {\n    edge = edges[(i + j) % n];\n    if (Array.isArray(edge)) {\n      if (!inside) {\n        stream.point((point = interpolate(edge[0], c)(epsilon))[0], point[1]);\n        inside = true;\n      }\n      stream.point((point = interpolate(edge[1], c)(epsilon))[0], point[1]);\n    } else {\n      inside = false;\n      if (edge !== parent) outline(stream, edge, node);\n    }\n  }\n}\n\n// Tests equality of two spherical points.\nfunction pointEqual(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n}\n\n// Finds a shared edge given two clockwise polygons.\nfunction sharedEdge(a, b) {\n  var x, y, n = a.length, found = null;\n  for (var i = 0; i < n; ++i) {\n    x = a[i];\n    for (var j = b.length; --j >= 0;) {\n      y = b[j];\n      if (x[0] === y[0] && x[1] === y[1]) {\n        if (found) return [found, x];\n        found = x;\n      }\n    }\n  }\n}\n\n// Converts an array of n face vertices to an array of n + 1 edges.\nfunction faceEdges(face) {\n  var n = face.length,\n      edges = [];\n  for (var a = face[n - 1], i = 0; i < n; ++i) edges.push([a, a = face[i]]);\n  return edges;\n}\n\nfunction hasInverse(node) {\n  return node.project.invert || node.children && node.children.some(hasInverse);\n}\n","// TODO generate on-the-fly to avoid external modification.\nvar octahedron = [\n  [0, 90],\n  [-90, 0], [0, 0], [90, 0], [180, 0],\n  [0, -90]\n];\n\nexport default [\n  [0, 2, 1],\n  [0, 3, 2],\n  [5, 1, 2],\n  [5, 2, 3],\n  [0, 1, 4],\n  [0, 4, 3],\n  [5, 4, 1],\n  [5, 3, 4]\n].map(function(face) {\n  return face.map(function(i) {\n    return octahedron[i];\n  });\n});\n","import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {pi} from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = centroid({type: \"MultiPoint\", coordinates: face});\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var faces = octahedron.map(function(face) {\n    return {face: face, project: faceProjection(face)};\n  });\n\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n\n  return polyhedral(faces[0], function(lambda, phi) {\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\n            : phi < 0 ? 7 : 5];\n      })\n      .angle(-30)\n      .scale(101.858)\n      .center([0, 45]);\n}\n","import {geoCentroid as centroid, geoProjection as projection} from \"d3-geo\";\nimport {collignonRaw} from \"../collignon\";\nimport {pi, sqrt} from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\n\nvar kx = 2 / sqrt(3);\n\nfunction collignonK(a, b) {\n  var p = collignonRaw(a, b);\n  return [p[0] * kx, p[1]];\n}\n\ncollignonK.invert = function(x,y) {\n  return collignonRaw.invert(x / kx, y);\n};\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = centroid({type: \"MultiPoint\", coordinates: face});\n    return projection(collignonK).translate([0, 0]).scale(1).rotate(c[1] > 0 ? [-c[0], 0] : [180 - c[0], 180]);\n  };\n\n  var faces = octahedron.map(function(face) {\n    return {face: face, project: faceProjection(face)};\n  });\n\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n\n  return polyhedral(faces[0], function(lambda, phi) {\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\n            : phi < 0 ? 7 : 5];\n      })\n      .angle(-30)\n      .scale(121.906)\n      .center([0, 48.5904]);\n}\n","import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {asin, atan2, cos, degrees, max, min, pi, radians, sin} from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = face.length === 6 ? centroid({type: \"MultiPoint\", coordinates: face}) : face[0];\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var w5 = octahedron.map(function(face) {\n    var xyz = face.map(cartesian),\n        n = xyz.length,\n        a = xyz[n - 1],\n        b,\n        hexagon = [];\n    for (var i = 0; i < n; ++i) {\n      b = xyz[i];\n      hexagon.push(spherical([\n        a[0] * 0.9486832980505138 + b[0] * 0.31622776601683794,\n        a[1] * 0.9486832980505138 + b[1] * 0.31622776601683794,\n        a[2] * 0.9486832980505138 + b[2] * 0.31622776601683794\n      ]), spherical([\n        b[0] * 0.9486832980505138 + a[0] * 0.31622776601683794,\n        b[1] * 0.9486832980505138 + a[1] * 0.31622776601683794,\n        b[2] * 0.9486832980505138 + a[2] * 0.31622776601683794\n      ]));\n      a = b;\n    }\n    return hexagon;\n  });\n\n  var cornerNormals = [];\n\n  var parents = [-1, 0, 0, 1, 0, 1, 4, 5];\n\n  w5.forEach(function(hexagon, j) {\n    var face = octahedron[j],\n        n = face.length,\n        normals = cornerNormals[j] = [];\n    for (var i = 0; i < n; ++i) {\n      w5.push([\n        face[i],\n        hexagon[(i * 2 + 2) % (2 * n)],\n        hexagon[(i * 2 + 1) % (2 * n)]\n      ]);\n      parents.push(j);\n      normals.push(cross(\n        cartesian(hexagon[(i * 2 + 2) % (2 * n)]),\n        cartesian(hexagon[(i * 2 + 1) % (2 * n)])\n      ));\n    }\n  });\n\n  var faces = w5.map(function(face) {\n    return {\n      project: faceProjection(face),\n      face: face\n    };\n  });\n\n  parents.forEach(function(d, i) {\n    var parent = faces[d];\n    parent && (parent.children || (parent.children = [])).push(faces[i]);\n  });\n\n  function face(lambda, phi) {\n    var cosphi = cos(phi),\n        p = [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n\n    var hexagon = lambda < -pi / 2 ? phi < 0 ? 6 : 4\n        : lambda < 0 ? phi < 0 ? 2 : 0\n        : lambda < pi / 2 ? phi < 0 ? 3 : 1\n        : phi < 0 ? 7 : 5;\n\n    var n = cornerNormals[hexagon];\n\n    return faces[dot(n[0], p) < 0 ? 8 + 3 * hexagon\n        : dot(n[1], p) < 0 ? 8 + 3 * hexagon + 1\n        : dot(n[2], p) < 0 ? 8 + 3 * hexagon + 2\n        : hexagon];\n  }\n\n  return polyhedral(faces[0], face)\n      .angle(-30)\n      .scale(110.625)\n      .center([0,45]);\n}\n\nfunction dot(a, b) {\n  for (var i = 0, n = a.length, s = 0; i < n; ++i) s += a[i] * b[i];\n  return s;\n}\n\nfunction cross(a, b) {\n  return [\n    a[1] * b[2] - a[2] * b[1],\n    a[2] * b[0] - a[0] * b[2],\n    a[0] * b[1] - a[1] * b[0]\n  ];\n}\n\n// Converts 3D Cartesian to spherical coordinates (degrees).\nfunction spherical(cartesian) {\n  return [\n    atan2(cartesian[1], cartesian[0]) * degrees,\n    asin(max(-1, min(1, cartesian[2]))) * degrees\n  ];\n}\n\n// Converts spherical coordinates (degrees) to 3D Cartesian.\nfunction cartesian(coordinates) {\n  var lambda = coordinates[0] * radians,\n      phi = coordinates[1] * radians,\n      cosphi = cos(phi);\n  return [\n    cosphi * cos(lambda),\n    cosphi * sin(lambda),\n    sin(phi)\n  ];\n}\n","export default function() {}\n","import {geoStream} from \"d3-geo\";\nimport noop from \"../noop\";\nimport clockwise from \"./clockwise\";\nimport contains from \"./contains\";\n\nexport default function(object, projection) {\n  var stream = projection.stream, project;\n  if (!stream) throw new Error(\"invalid projection\");\n  switch (object && object.type) {\n    case \"Feature\": project = projectFeature; break;\n    case \"FeatureCollection\": project = projectFeatureCollection; break;\n    default: project = projectGeometry; break;\n  }\n  return project(object, stream);\n}\n\nfunction projectFeatureCollection(o, stream) {\n  return {\n    type: \"FeatureCollection\",\n    features: o.features.map(function(f) {\n      return projectFeature(f, stream);\n    })\n  };\n}\n\nfunction projectFeature(o, stream) {\n  return {\n    type: \"Feature\",\n    id: o.id,\n    properties: o.properties,\n    geometry: projectGeometry(o.geometry, stream)\n  };\n}\n\nfunction projectGeometryCollection(o, stream) {\n  return {\n    type: \"GeometryCollection\",\n    geometries: o.geometries.map(function(o) {\n      return projectGeometry(o, stream);\n    })\n  };\n}\n\nfunction projectGeometry(o, stream) {\n  if (!o) return null;\n  if (o.type === \"GeometryCollection\") return projectGeometryCollection(o, stream);\n  var sink;\n  switch (o.type) {\n    case \"Point\": sink = sinkPoint; break;\n    case \"MultiPoint\": sink = sinkPoint; break;\n    case \"LineString\": sink = sinkLine; break;\n    case \"MultiLineString\": sink = sinkLine; break;\n    case \"Polygon\": sink = sinkPolygon; break;\n    case \"MultiPolygon\": sink = sinkPolygon; break;\n    case \"Sphere\": sink = sinkPolygon; break;\n    default: return null;\n  }\n  geoStream(o, stream(sink));\n  return sink.result();\n}\n\nvar points = [],\n    lines = [];\n\nvar sinkPoint = {\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  result: function() {\n    var result = !points.length ? null\n        : points.length < 2 ? {type: \"Point\", coordinates: points[0]}\n        : {type: \"MultiPoint\", coordinates: points};\n    points = [];\n    return result;\n  }\n};\n\nvar sinkLine = {\n  lineStart: noop,\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function() {\n    if (points.length) lines.push(points), points = [];\n  },\n  result: function() {\n    var result = !lines.length ? null\n        : lines.length < 2 ? {type: \"LineString\", coordinates: lines[0]}\n        : {type: \"MultiLineString\", coordinates: lines};\n    lines = [];\n    return result;\n  }\n};\n\nvar sinkPolygon = {\n  polygonStart: noop,\n  lineStart: noop,\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function() {\n    var n = points.length;\n    if (n) {\n      do points.push(points[0].slice()); while (++n < 4);\n      lines.push(points), points = [];\n    }\n  },\n  polygonEnd: noop,\n  result: function() {\n    if (!lines.length) return null;\n    var polygons = [],\n        holes = [];\n\n    // https://github.com/d3/d3/issues/1558\n    lines.forEach(function(ring) {\n      if (clockwise(ring)) polygons.push([ring]);\n      else holes.push(ring);\n    });\n\n    holes.forEach(function(hole) {\n      var point = hole[0];\n      polygons.some(function(polygon) {\n        if (contains(polygon[0], point)) {\n          polygon.push(hole);\n          return true;\n        }\n      }) || polygons.push([hole]);\n    });\n\n    lines = [];\n\n    return !polygons.length ? null\n        : polygons.length > 1 ? {type: \"MultiPolygon\", coordinates: polygons}\n        : {type: \"Polygon\", coordinates: polygons[0]};\n  }\n};\n","export default function(ring) {\n  if ((n = ring.length) < 4) return false;\n  var i = 0,\n      n,\n      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\n  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\n  return area <= 0;\n}\n","export default function(ring, point) {\n  var x = point[0],\n      y = point[1],\n      contains = false;\n  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\n    var pi = ring[i], xi = pi[0], yi = pi[1],\n        pj = ring[j], xj = pj[0], yj = pj[1];\n    if (((yi > y) ^ (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi)) contains = !contains;\n  }\n  return contains;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, halfPi, pi, sign, sqrt1_2} from \"../math\";\n\nexport default function(project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectQuincuncial(lambda, phi) {\n    var t = abs(lambda) < halfPi,\n        p = project(t ? lambda : lambda > 0 ? lambda - pi : lambda + pi, phi),\n        x = (p[0] - p[1]) * sqrt1_2,\n        y = (p[0] + p[1]) * sqrt1_2;\n    if (t) return [x, y];\n    var d = dx * sqrt1_2,\n        s = x > 0 ^ y > 0 ? -1 : 1;\n    return [s * x - sign(y) * d, s * y - sign(x) * d];\n  }\n\n  if (project.invert) projectQuincuncial.invert = function(x0, y0) {\n    var x = (x0 + y0) * sqrt1_2,\n        y = (y0 - x0) * sqrt1_2,\n        t = abs(x) < 0.5 * dx && abs(y) < 0.5 * dx;\n\n    if (!t) {\n      var d = dx * sqrt1_2,\n          s = x > 0 ^ y > 0 ? -1 : 1,\n          x1 = -s * x0 + (y > 0 ? 1 : -1) * d,\n          y1 = -s * y0 + (x > 0 ? 1 : -1) * d;\n      x = (-x1 - y1) * sqrt1_2;\n      y = (x1 - y1) * sqrt1_2;\n    }\n\n    var p = project.invert(x, y);\n    if (!t) p[0] += x > 0 ? pi : -pi;\n    return p;\n  };\n\n  return projection(projectQuincuncial)\n      .rotate([-90, -90, 45])\n      .clipAngle(180 - 1e-3);\n}\n","import {gringortenRaw} from \"../gringorten\";\nimport quincuncial from \"./index\";\n\nexport default function() {\n  return quincuncial(gringortenRaw)\n      .scale(176.423);\n}\n","import {guyouRaw} from \"../guyou\";\nimport quincuncial from \"./index\";\n\nexport default function() {\n  return quincuncial(guyouRaw)\n      .scale(111.48);\n}\n","export default function(input, digits) {\n  if (!(0 <= (digits = +digits) && digits <= 20)) throw new Error(\"invalid digits\");\n\n  function quantizePoint(input) {\n    var n = input.length, i = 2, output = new Array(n);\n    output[0] = +input[0].toFixed(digits);\n    output[1] = +input[1].toFixed(digits);\n    while (i < n) output[i] = input[i], ++i;\n    return output;\n  }\n\n  function quantizePoints(input) {\n    return input.map(quantizePoint);\n  }\n\n  function quantizePolygon(input) {\n    return input.map(quantizePoints);\n  }\n\n  function quantizeGeometry(input) {\n    if (input == null) return input;\n    var output;\n    switch (input.type) {\n      case \"GeometryCollection\": output = {type: \"GeometryCollection\", geometries: input.geometries.map(quantizeGeometry)}; break;\n      case \"Point\": output = {type: \"Point\", coordinates: quantizePoint(input.coordinates)}; break;\n      case \"MultiPoint\": case \"LineString\": output = {type: input.type, coordinates: quantizePoints(input.coordinates)}; break;\n      case \"MultiLineString\": case \"Polygon\": output = {type: input.type, coordinates: quantizePolygon(input.coordinates)}; break;\n      case \"MultiPolygon\": output = {type: \"MultiPolygon\", coordinates: input.coordinates.map(quantizePolygon)}; break;\n      default: return input;\n    }\n    if (input.bbox != null) output.bbox = input.bbox;\n    return output;\n  }\n\n  function quantizeFeature(input) {\n    var output = {type: \"Feature\", properties: input.properties, geometry: quantizeGeometry(input.geometry)};\n    if (input.id != null) output.id = input.id;\n    if (input.bbox != null) output.bbox = input.bbox;\n    return output;\n  }\n\n  if (input != null) switch (input.type) {\n    case \"Feature\": return quantizeFeature(input);\n    case \"FeatureCollection\": {\n      var output = {type: \"FeatureCollection\", features: input.features.map(quantizeFeature)};\n      if (input.bbox != null) output.bbox = input.bbox;\n      return output;\n    }\n    default: return quantizeGeometry(input);\n  }\n\n  return input;\n}\n","import {abs, acos, asin, atan, cos, epsilon, pi, sin, tan} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function rectangularPolyconicRaw(phi0) {\n  var sinPhi0 = sin(phi0);\n\n  function forward(lambda, phi) {\n    var A = sinPhi0 ? tan(lambda * sinPhi0 / 2) / sinPhi0 : lambda / 2;\n    if (!phi) return [2 * A, -phi0];\n    var E = 2 * atan(A * sin(phi)),\n        cotPhi = 1 / tan(phi);\n    return [\n      sin(E) * cotPhi,\n      phi + (1 - cos(E)) * cotPhi - phi0\n    ];\n  }\n\n  // TODO return null for points outside outline.\n  forward.invert = function(x, y) {\n    if (abs(y += phi0) < epsilon) return [sinPhi0 ? 2 * atan(sinPhi0 * x / 2) / sinPhi0 : x, 0];\n    var k = x * x + y * y,\n        phi = 0,\n        i = 10, delta;\n    do {\n      var tanPhi = tan(phi),\n          secPhi = 1 / cos(phi),\n          j = k - 2 * y * phi + phi * phi;\n      phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n    } while (abs(delta) > epsilon && --i > 0);\n    var E = x * (tanPhi = tan(phi)),\n        A = tan(abs(y) < abs(phi + 1 / tanPhi) ? asin(E) * 0.5 : acos(E) * 0.5 + pi / 4) / sin(phi);\n    return [\n      sinPhi0 ? 2 * atan(sinPhi0 * A) / sinPhi0 : 2 * A,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(rectangularPolyconicRaw)\n      .scale(131.215);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon2, floor, halfPi, max, min, pi, radians} from \"./math\";\n\nvar K = [\n  [0.9986, -0.062],\n  [1.0000, 0.0000],\n  [0.9986, 0.0620],\n  [0.9954, 0.1240],\n  [0.9900, 0.1860],\n  [0.9822, 0.2480],\n  [0.9730, 0.3100],\n  [0.9600, 0.3720],\n  [0.9427, 0.4340],\n  [0.9216, 0.4958],\n  [0.8962, 0.5571],\n  [0.8679, 0.6176],\n  [0.8350, 0.6769],\n  [0.7986, 0.7346],\n  [0.7597, 0.7903],\n  [0.7186, 0.8435],\n  [0.6732, 0.8936],\n  [0.6213, 0.9394],\n  [0.5722, 0.9761],\n  [0.5322, 1.0000]\n];\n\nK.forEach(function(d) {\n  d[1] *= 1.0144;\n});\n\nexport function robinsonRaw(lambda, phi) {\n  var i = min(18, abs(phi) * 36 / pi),\n      i0 = floor(i),\n      di = i - i0,\n      ax = (k = K[i0])[0],\n      ay = k[1],\n      bx = (k = K[++i0])[0],\n      by = k[1],\n      cx = (k = K[min(19, ++i0)])[0],\n      cy = k[1],\n      k;\n  return [\n    lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    (phi > 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)\n  ];\n}\n\nrobinsonRaw.invert = function(x, y) {\n  var yy = y / halfPi,\n      phi = yy * 90,\n      i = min(18, abs(phi / 5)),\n      i0 = max(0, floor(i));\n  do {\n    var ay = K[i0][1],\n        by = K[i0 + 1][1],\n        cy = K[min(19, i0 + 2)][1],\n        u = cy - ay,\n        v = cy - 2 * by + ay,\n        t = 2 * (abs(yy) - by) / u,\n        c = v / u,\n        di = t * (1 - c * t * (1 - 2 * c * t));\n    if (di >= 0 || i0 === 1) {\n      phi = (y >= 0 ? 5 : -5) * (di + i);\n      var j = 50, delta;\n      do {\n        i = min(18, abs(phi) / 5);\n        i0 = floor(i);\n        di = i - i0;\n        ay = K[i0][1];\n        by = K[i0 + 1][1];\n        cy = K[min(19, i0 + 2)][1];\n        phi -= (delta = (y >= 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;\n      } while (abs(delta) > epsilon2 && --j > 0);\n      break;\n    }\n  } while (--i0 >= 0);\n  var ax = K[i0][0],\n      bx = K[i0 + 1][0],\n      cx = K[min(19, i0 + 2)][0];\n  return [\n    x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    phi * radians\n  ];\n};\n\nexport default function() {\n  return projection(robinsonRaw)\n      .scale(152.63);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {acos, asin, atan2, cos, degrees, radians, sin, sqrt} from \"./math\";\n\nfunction satelliteVerticalRaw(P) {\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = (P - 1) / (P - cosPhi * cos(lambda));\n    return [\n      k * cosPhi * sin(lambda),\n      k * sin(phi)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + y * y,\n        rho = sqrt(rho2),\n        sinc = (P - sqrt(1 - rho2 * (P + 1) / (P - 1))) / ((P - 1) / rho + rho / (P - 1));\n    return [\n      atan2(x * sinc, rho * sqrt(1 - sinc * sinc)),\n      rho ? asin(y * sinc / rho) : 0\n    ];\n  };\n\n  return forward;\n}\n\nexport function satelliteRaw(P, omega) {\n  var vertical = satelliteVerticalRaw(P);\n  if (!omega) return vertical;\n  var cosOmega = cos(omega),\n      sinOmega = sin(omega);\n\n  function forward(lambda, phi) {\n    var coordinates = vertical(lambda, phi),\n        y = coordinates[1],\n        A = y * sinOmega / (P - 1) + cosOmega;\n    return [\n      coordinates[0] * cosOmega / A,\n      y / A\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var k = (P - 1) / (P - 1 - y * sinOmega);\n    return vertical.invert(k * x, k * y * cosOmega);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var distance = 2,\n      omega = 0,\n      m = projectionMutator(satelliteRaw),\n      p = m(distance, omega);\n\n  // As a multiple of radius.\n  p.distance = function(_) {\n    if (!arguments.length) return distance;\n    return m(distance = +_, omega);\n  };\n\n  p.tilt = function(_) {\n    if (!arguments.length) return omega * degrees;\n    return m(distance, omega = _ * radians);\n  };\n\n  return p\n      .scale(432.147)\n      .clipAngle(acos(1 / distance) * degrees - 1e-6);\n}\n","var epsilon = 1e-4,\n    epsilonInverse = 1e4,\n    x0 = -180, x0e = x0 + epsilon,\n    x1 = 180, x1e = x1 - epsilon,\n    y0 = -90, y0e = y0 + epsilon,\n    y1 = 90, y1e = y1 - epsilon;\n\nfunction nonempty(coordinates) {\n  return coordinates.length > 0;\n}\n\nfunction quantize(x) {\n  return Math.floor(x * epsilonInverse) / epsilonInverse;\n}\n\nfunction normalizePoint(y) {\n  return y === y0 || y === y1 ? [0, y] : [x0, quantize(y)]; // pole or antimeridian?\n}\n\nfunction clampPoint(p) {\n  var x = p[0], y = p[1], clamped = false;\n  if (x <= x0e) x = x0, clamped = true;\n  else if (x >= x1e) x = x1, clamped = true;\n  if (y <= y0e) y = y0, clamped = true;\n  else if (y >= y1e) y = y1, clamped = true;\n  return clamped ? [x, y] : p;\n}\n\nfunction clampPoints(points) {\n  return points.map(clampPoint);\n}\n\n// For each ring, detect where it crosses the antimeridian or pole.\nfunction extractFragments(rings, polygon, fragments) {\n  for (var j = 0, m = rings.length; j < m; ++j) {\n    var ring = rings[j].slice();\n\n    // By default, assume that this ring doesn’t need any stitching.\n    fragments.push({index: -1, polygon: polygon, ring: ring});\n\n    for (var i = 0, n = ring.length; i < n; ++i) {\n      var point = ring[i],\n          x = point[0],\n          y = point[1];\n\n      // If this is an antimeridian or polar point…\n      if (x <= x0e || x >= x1e || y <= y0e || y >= y1e) {\n        ring[i] = clampPoint(point);\n\n        // Advance through any antimeridian or polar points…\n        for (var k = i + 1; k < n; ++k) {\n          var pointk = ring[k],\n              xk = pointk[0],\n              yk = pointk[1];\n          if (xk > x0e && xk < x1e && yk > y0e && yk < y1e) break;\n        }\n\n        // If this was just a single antimeridian or polar point,\n        // we don’t need to cut this ring into a fragment;\n        // we can just leave it as-is.\n        if (k === i + 1) continue;\n\n        // Otherwise, if this is not the first point in the ring,\n        // cut the current fragment so that it ends at the current point.\n        // The current point is also normalized for later joining.\n        if (i) {\n          var fragmentBefore = {index: -1, polygon: polygon, ring: ring.slice(0, i + 1)};\n          fragmentBefore.ring[fragmentBefore.ring.length - 1] = normalizePoint(y);\n          fragments[fragments.length - 1] = fragmentBefore;\n        }\n\n        // If the ring started with an antimeridian fragment,\n        // we can ignore that fragment entirely.\n        else fragments.pop();\n\n        // If the remainder of the ring is an antimeridian fragment,\n        // move on to the next ring.\n        if (k >= n) break;\n\n        // Otherwise, add the remaining ring fragment and continue.\n        fragments.push({index: -1, polygon: polygon, ring: ring = ring.slice(k - 1)});\n        ring[0] = normalizePoint(ring[0][1]);\n        i = -1;\n        n = ring.length;\n      }\n    }\n  }\n}\n\n// Now stitch the fragments back together into rings.\nfunction stitchFragments(fragments) {\n  var i, n = fragments.length;\n\n  // To connect the fragments start-to-end, create a simple index by end.\n  var fragmentByStart = {},\n      fragmentByEnd = {},\n      fragment,\n      start,\n      startFragment,\n      end,\n      endFragment;\n\n  // For each fragment…\n  for (i = 0; i < n; ++i) {\n    fragment = fragments[i];\n    start = fragment.ring[0];\n    end = fragment.ring[fragment.ring.length - 1];\n\n    // If this fragment is closed, add it as a standalone ring.\n    if (start[0] === end[0] && start[1] === end[1]) {\n      fragment.polygon.push(fragment.ring);\n      fragments[i] = null;\n      continue;\n    }\n\n    fragment.index = i;\n    fragmentByStart[start] = fragmentByEnd[end] = fragment;\n  }\n\n  // For each open fragment…\n  for (i = 0; i < n; ++i) {\n    fragment = fragments[i];\n    if (fragment) {\n      start = fragment.ring[0];\n      end = fragment.ring[fragment.ring.length - 1];\n      startFragment = fragmentByEnd[start];\n      endFragment = fragmentByStart[end];\n\n      delete fragmentByStart[start];\n      delete fragmentByEnd[end];\n\n      // If this fragment is closed, add it as a standalone ring.\n      if (start[0] === end[0] && start[1] === end[1]) {\n        fragment.polygon.push(fragment.ring);\n        continue;\n      }\n\n      if (startFragment) {\n        delete fragmentByEnd[start];\n        delete fragmentByStart[startFragment.ring[0]];\n        startFragment.ring.pop(); // drop the shared coordinate\n        fragments[startFragment.index] = null;\n        fragment = {index: -1, polygon: startFragment.polygon, ring: startFragment.ring.concat(fragment.ring)};\n\n        if (startFragment === endFragment) {\n          // Connect both ends to this single fragment to create a ring.\n          fragment.polygon.push(fragment.ring);\n        } else {\n          fragment.index = n++;\n          fragments.push(fragmentByStart[fragment.ring[0]] = fragmentByEnd[fragment.ring[fragment.ring.length - 1]] = fragment);\n        }\n      } else if (endFragment) {\n        delete fragmentByStart[end];\n        delete fragmentByEnd[endFragment.ring[endFragment.ring.length - 1]];\n        fragment.ring.pop(); // drop the shared coordinate\n        fragment = {index: n++, polygon: endFragment.polygon, ring: fragment.ring.concat(endFragment.ring)};\n        fragments[endFragment.index] = null;\n        fragments.push(fragmentByStart[fragment.ring[0]] = fragmentByEnd[fragment.ring[fragment.ring.length - 1]] = fragment);\n      } else {\n        fragment.ring.push(fragment.ring[0]); // close ring\n        fragment.polygon.push(fragment.ring);\n      }\n    }\n  }\n}\n\nfunction stitchFeature(input) {\n  var output = {type: \"Feature\", geometry: stitchGeometry(input.geometry)};\n  if (input.id != null) output.id = input.id;\n  if (input.bbox != null) output.bbox = input.bbox;\n  if (input.properties != null) output.properties = input.properties;\n  return output;\n}\n\nfunction stitchGeometry(input) {\n  if (input == null) return input;\n  var output, fragments, i, n;\n  switch (input.type) {\n    case \"GeometryCollection\": output = {type: \"GeometryCollection\", geometries: input.geometries.map(stitchGeometry)}; break;\n    case \"Point\": output = {type: \"Point\", coordinates: clampPoint(input.coordinates)}; break;\n    case \"MultiPoint\": case \"LineString\": output = {type: input.type, coordinates: clampPoints(input.coordinates)}; break;\n    case \"MultiLineString\": output = {type: \"MultiLineString\", coordinates: input.coordinates.map(clampPoints)}; break;\n    case \"Polygon\": {\n      var polygon = [];\n      extractFragments(input.coordinates, polygon, fragments = []);\n      stitchFragments(fragments);\n      output = {type: \"Polygon\", coordinates: polygon};\n      break;\n    }\n    case \"MultiPolygon\": {\n      fragments = [], i = -1, n = input.coordinates.length;\n      var polygons = new Array(n);\n      while (++i < n) extractFragments(input.coordinates[i], polygons[i] = [], fragments);\n      stitchFragments(fragments);\n      output = {type: \"MultiPolygon\", coordinates: polygons.filter(nonempty)};\n      break;\n    }\n    default: return input;\n  }\n  if (input.bbox != null) output.bbox = input.bbox;\n  return output;\n}\n\nexport default function(input) {\n  if (input == null) return input;\n  switch (input.type) {\n    case \"Feature\": return stitchFeature(input);\n    case \"FeatureCollection\": {\n      var output = {type: \"FeatureCollection\", features: input.features.map(stitchFeature)};\n      if (input.bbox != null) output.bbox = input.bbox;\n      return output;\n    }\n    default: return stitchGeometry(input);\n  }\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, quarterPi, sin, tan} from \"./math\";\n\nexport function timesRaw(lambda, phi) {\n  var t = tan(phi / 2),\n      s = sin(quarterPi * t);\n  return [\n    lambda * (0.74482 - 0.34588 * s * s),\n    1.70711 * t\n  ];\n}\n\ntimesRaw.invert = function(x, y) {\n  var t = y / 1.70711,\n      s = sin(quarterPi * t);\n  return [\n    x / (0.74482 - 0.34588 * s * s),\n    2 * atan(t)\n  ];\n};\n\nexport default function() {\n  return projection(timesRaw)\n      .scale(146.153);\n}\n","import {geoInterpolate as interpolate, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {asin, degrees, pi, sin, radians} from \"./math\";\n\n// Compute the origin as the midpoint of the two reference points.\n// Rotate one of the reference points by the origin.\n// Apply the spherical law of sines to compute gamma rotation.\nexport default function(raw, p0, p1) {\n  var i = interpolate(p0, p1),\n      o = i(0.5),\n      a = rotation([-o[0], -o[1]])(p0),\n      b = i.distance / 2,\n      y = -asin(sin(a[1] * radians) / sin(b)),\n      R = [-o[0], -o[1], -(a[0] > 0 ? pi - y : y) * degrees],\n      p = projection(raw(b)).rotate(R),\n      r = rotation(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n","import {geoGnomonicRaw as gnomonicRaw} from \"d3-geo\";\nimport {cos} from \"./math\";\nimport twoPoint from \"./twoPoint\";\n\nexport function twoPointAzimuthalRaw(d) {\n  var cosd = cos(d);\n\n  function forward(lambda, phi) {\n    var coordinates = gnomonicRaw(lambda, phi);\n    coordinates[0] *= cosd;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    return gnomonicRaw.invert(x / cosd, y);\n  };\n\n  return forward;\n}\n\nexport function twoPointAzimuthalUsa() {\n  return twoPointAzimuthal([-158, 21.5], [-77, 39])\n      .clipAngle(60)\n      .scale(400);\n}\n\nexport default function twoPointAzimuthal(p0, p1) {\n  return twoPoint(twoPointAzimuthalRaw, p0, p1);\n}\n","import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \"d3-geo\";\nimport {acos, atan2, cos, sin, sqrt, tan} from \"./math\";\nimport twoPoint from \"./twoPoint\";\n\n// TODO clip to ellipse\nexport function twoPointEquidistantRaw(z0) {\n  if (!(z0 *= 2)) return azimuthalEquidistantRaw;\n  var lambdaa = -z0 / 2,\n      lambdab = -lambdaa,\n      z02 = z0 * z0,\n      tanLambda0 = tan(lambdab),\n      S = 0.5 / sin(lambdab);\n\n  function forward(lambda, phi) {\n    var za = acos(cos(phi) * cos(lambda - lambdaa)),\n        zb = acos(cos(phi) * cos(lambda - lambdab)),\n        ys = phi < 0 ? -1 : 1;\n    za *= za, zb *= zb;\n    return [\n      (za - zb) / (2 * z0),\n      ys * sqrt(4 * z02 * zb - (z02 - za + zb) * (z02 - za + zb)) / (2 * z0)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var y2 = y * y,\n        cosza = cos(sqrt(y2 + (t = x + lambdaa) * t)),\n        coszb = cos(sqrt(y2 + (t = x + lambdab) * t)),\n        t,\n        d;\n    return [\n      atan2(d = cosza - coszb, t = (cosza + coszb) * tanLambda0),\n      (y < 0 ? -1 : 1) * acos(sqrt(t * t + d * d) * S)\n    ];\n  };\n\n  return forward;\n}\n\nexport function twoPointEquidistantUsa() {\n  return twoPointEquidistant([-158, 21.5], [-77, 39])\n      .clipAngle(130)\n      .scale(122.571);\n}\n\nexport default function twoPointEquidistant(p0, p1) {\n  return twoPoint(twoPointEquidistantRaw, p0, p1);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrintenRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      G = cosTheta / (sinTheta + cosTheta - 1),\n      P = G * (2 / sinTheta - 1),\n      P2 = P * P,\n      P2_A2 = P2 + A2,\n      G_P2 = G - P2,\n      Q = A2 + G;\n  return [\n    sign(lambda) * pi * (A * G_P2 + sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2,\n    sign(phi) * pi * (P * Q - A * sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2\n  ];\n}\n\nvanDerGrintenRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  if (abs(x) < epsilon) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x2 = (x /= pi) * x,\n      y2 = (y /= pi) * y,\n      x2_y2 = x2 + y2,\n      z = x2_y2 * x2_y2,\n      c1 = -abs(y) * (1 + x2_y2),\n      c2 = c1 - 2 * y2 + x2,\n      c3 = -2 * c1 + 1 + 2 * y2 + z,\n      d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27,\n      a1 = (c1 - c2 * c2 / (3 * c3)) / c3,\n      m1 = 2 * sqrt(-a1 / 3),\n      theta1 = acos(3 * d / (a1 * m1)) / 3;\n  return [\n    pi * (x2_y2 - 1 + sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x),\n    sign(y) * pi * (-m1 * cos(theta1 + pi / 3) - c2 / (3 * c3))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrintenRaw)\n      .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, halfPi, epsilon, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrinten2Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      x1 = cosTheta * (sqrt(1 + A2) - A * cosTheta) / (1 + A2 * sinTheta * sinTheta);\n  return [\n    sign(lambda) * pi * x1,\n    sign(phi) * pi * sqrt(1 - x1 * (2 * A + x1))\n  ];\n}\n\nvanDerGrinten2Raw.invert = function(x, y) {\n  if (!x) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x1 = abs(x / pi),\n      A = (1 - x1 * x1 - (y /= pi) * y) / (2 * x1),\n      A2 = A * A,\n      B = sqrt(A2 + 1);\n  return [\n    sign(x) * pi * (B - A),\n    sign(y) * halfPi * sin(2 * atan2(sqrt((1 - 2 * A * x1) * (A + B) - x1), sqrt(B + A + x1)))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten2Raw)\n      .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrinten3Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = phi / halfPi,\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, pi * tan(theta / 2)];\n  var A = (pi / lambda - lambda / pi) / 2,\n      y1 = sinTheta / (1 + cos(theta));\n  return [\n    pi * (sign(lambda) * sqrt(A * A + 1 - y1 * y1) - A),\n    pi * y1\n  ];\n}\n\nvanDerGrinten3Raw.invert = function(x, y) {\n  if (!y) return [x, 0];\n  var y1 = y / pi,\n      A = (pi * pi * (1 - y1 * y1) - x * x) / (2 * pi * x);\n  return [\n    x ? pi * (sign(x) * sqrt(A * A + 1) - A) : 0,\n    halfPi * sin(2 * atan(y1))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten3Raw)\n        .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, halfPi, pi, sign, sqrt} from \"./math\";\n\nexport function vanDerGrinten4Raw(lambda, phi) {\n  if (!phi) return [lambda, 0];\n  var phi0 = abs(phi);\n  if (!lambda || phi0 === halfPi) return [0, phi];\n  var B = phi0 / halfPi,\n      B2 = B * B,\n      C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n      C2 = C * C,\n      BC = B * C,\n      B_C2 = B2 + C2 + 2 * BC,\n      B_3C = B + 3 * C,\n      lambda0 = lambda / halfPi,\n      lambda1 = lambda0 + 1 / lambda0,\n      D = sign(abs(lambda) - halfPi) * sqrt(lambda1 * lambda1 - 4),\n      D2 = D * D,\n      F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2),\n      x1 = (D * (B_C2 + C2 - 1) + 2 * sqrt(F)) / (4 * B_C2 + D2);\n  return [\n    sign(lambda) * halfPi * x1,\n    sign(phi) * halfPi * sqrt(1 + D * abs(x1) - x1 * x1)\n  ];\n}\n\nvanDerGrinten4Raw.invert = function(x, y) {\n  var delta;\n  if (!x || !y) return [x, y];\n  y /= pi;\n  var x1 = sign(x) * x / halfPi,\n      D = (x1 * x1 - 1 + 4 * y * y) / abs(x1),\n      D2 = D * D,\n      B = 2 * y,\n      i = 50;\n  do {\n    var B2 = B * B,\n        C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n        C_ = (3 * B - B2 * B - 10) / (2 * B2 * B),\n        C2 = C * C,\n        BC = B * C,\n        B_C = B + C,\n        B_C2 = B_C * B_C,\n        B_3C = B + 3 * C,\n        F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)),\n        F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)),\n        sqrtF = sqrt(F),\n        f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2),\n        f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);\n    B -= delta = f / f_;\n  } while (delta > epsilon && --i > 0);\n  return [\n    sign(x) * (sqrt(D * D + 4) + D) * pi / 4,\n    halfPi * B\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten4Raw)\n      .scale(127.16);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {sqrt, pi} from \"./math\";\nimport {mollweideBromleyRaw} from \"./mollweide\";\n\nvar A = 4 * pi + 3 * sqrt(3),\n    B = 2 * sqrt(2 * pi * sqrt(3) / A);\n\nexport var wagner4Raw = mollweideBromleyRaw(B * sqrt(3) / pi, B, A / 6);\n\nexport default function() {\n  return projection(wagner4Raw)\n      .scale(176.84);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math\";\n\nexport function wagner6Raw(lambda, phi) {\n  return [lambda * sqrt(1 - 3 * phi * phi / (pi * pi)), phi];\n}\n\nwagner6Raw.invert = function(x, y) {\n  return [x / sqrt(1 - 3 * y * y / (pi * pi)), y];\n};\n\nexport default function() {\n  return projection(wagner6Raw)\n      .scale(152.63);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, atan2, cos, sin, sqrt, tan} from \"./math\";\n\nexport function wagner7Raw(lambda, phi) {\n  var s = 0.90631 * sin(phi),\n      c0 = sqrt(1 - s * s),\n      c1 = sqrt(2 / (1 + c0 * cos(lambda /= 3)));\n  return [\n    2.66723 * c0 * c1 * sin(lambda),\n    1.24104 * s * c1\n  ];\n}\n\nwagner7Raw.invert = function(x, y) {\n  var t1 = x / 2.66723,\n      t2 = y / 1.24104,\n      p = sqrt(t1 * t1 + t2 * t2),\n      c = 2 * asin(p / 2);\n  return [\n    3 * atan2(x * tan(c), 2.66723 * p),\n    p && asin(y * sin(c) / (1.24104 * 0.90631 * p))\n  ];\n};\n\nexport default function() {\n  return projection(wagner7Raw)\n      .scale(172.632);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, atan2, cos, sin, sqrt} from \"./math\";\n\nexport function wiechelRaw(lambda, phi) {\n  var cosPhi = cos(phi),\n      sinPhi = cos(lambda) * cosPhi,\n      sin1_Phi = 1 - sinPhi,\n      cosLambda = cos(lambda = atan2(sin(lambda) * cosPhi, -sin(phi))),\n      sinLambda = sin(lambda);\n  cosPhi = sqrt(1 - sinPhi * sinPhi);\n  return [\n    sinLambda * cosPhi - cosLambda * sin1_Phi,\n    -cosLambda * cosPhi - sinLambda * sin1_Phi\n  ];\n}\n\nwiechelRaw.invert = function(x, y) {\n  var w = (x * x + y * y) / -2,\n      k = sqrt(-w * (2 + w)),\n      b = y * w + x * k,\n      a = x * w - y * k,\n      D = sqrt(a * a + b * b);\n  return [\n    atan2(k * b, D * (1 + w)),\n    D ? -asin(k * a / D) : 0\n  ];\n};\n\nexport default function() {\n  return projection(wiechelRaw)\n      .rotate([0, -90, 45])\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {aitoffRaw} from \"./aitoff\";\nimport {halfPi, epsilon, sin, cos, sqrt, abs, acos} from \"./math\";\n\nexport function winkel3Raw(lambda, phi) {\n  var coordinates = aitoffRaw(lambda, phi);\n  return [\n    (coordinates[0] + lambda / halfPi) / 2,\n    (coordinates[1] + phi) / 2\n  ];\n}\n\nwinkel3Raw.invert = function(x, y) {\n  var lambda = x, phi = y, i = 25;\n  do {\n    var cosphi = cos(phi),\n        sinphi = sin(phi),\n        sin_2phi = sin(2 * phi),\n        sin2phi = sinphi * sinphi,\n        cos2phi = cosphi * cosphi,\n        sinlambda = sin(lambda),\n        coslambda_2 = cos(lambda / 2),\n        sinlambda_2 = sin(lambda / 2),\n        sin2lambda_2 = sinlambda_2 * sinlambda_2,\n        C = 1 - cos2phi * coslambda_2 * coslambda_2,\n        E = C ? acos(cosphi * coslambda_2) * sqrt(F = 1 / C) : F = 0,\n        F,\n        fx = 0.5 * (2 * E * cosphi * sinlambda_2 + lambda / halfPi) - x,\n        fy = 0.5 * (E * sinphi + phi) - y,\n        dxdlambda = 0.5 * F * (cos2phi * sin2lambda_2 + E * cosphi * coslambda_2 * sin2phi) + 0.5 / halfPi,\n        dxdphi = F * (sinlambda * sin_2phi / 4 - E * sinphi * sinlambda_2),\n        dydlambda = 0.125 * F * (sin_2phi * sinlambda_2 - E * sinphi * cos2phi * sinlambda),\n        dydphi = 0.5 * F * (sin2phi * coslambda_2 + E * sin2lambda_2 * cosphi) + 0.5,\n        denominator = dxdphi * dydlambda - dydphi * dxdlambda,\n        dlambda = (fy * dxdphi - fx * dydphi) / denominator,\n        dphi = (fx * dydlambda - fy * dxdlambda) / denominator;\n    lambda -= dlambda, phi -= dphi;\n  } while ((abs(dlambda) > epsilon || abs(dphi) > epsilon) && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(winkel3Raw)\n      .scale(158.837);\n}\n","var d3 = Object.assign({}, require('d3-scale'), require('d3-geo'), require('d3-geo-projection'));\n\nmodule.exports = {\n  /**\n   * @param projectionName the name of a projection from d3-geo or d3-geo-projection\n   * @returns the d3 projection or transform specified by the projectionName\n   * @throws Error if projectionName doesn't exist in d3-geo or d3-geo-projection\n   */\n  getD3Projection: function (projectionName) {\n    var projection = d3[projectionName];\n    if (typeof projection !== 'function') {\n      throw Error('Invalid d3 projection; use a projection from d3-geo or d3-geo-projection');\n    }\n    return projection();\n  },\n\n  /**\n   * @param height the height in A-Frame units\n   * @param width the width in A-Frame units\n   * @returns a d3 transform that converts from normal SVG screen coordinates\n   *          (an origin of [0,0] with y pointing down) to A-Frame coordinates\n   *          where the extent is based on the height and width, the origin is\n   *          in the center, and y points up\n   */\n  getWorldTransform: function (height, width) {\n    const x = d3.scaleLinear().domain([0, width]).range([-width / 2, width / 2]);\n    const y = d3.scaleLinear().domain([0, height]).range([height / 2, -height / 2]);\n\n    return d3.geoTransform({\n      point: function (px, py) {\n        this.stream.point(x(px), y(py));\n      }\n    });\n  },\n\n  /**\n   * @param projectionName the name of a projection from d3-geo or d3-geo-projection\n   * @param height the height in A-Frame units\n   * @param width the width in A-Frame units\n   * @param geoJson the geometry to use for scaling and centering\n   * @returns a d3 projection stream which centers the given geoJson in\n   *          A-Frame coordinates and scales it to fit the height and width\n   *          of the component\n   */\n  getFittedProjection: function (projectionName, geoJson, height, width) {\n    var projection = this.getD3Projection(projectionName).fitSize([width, height], geoJson);\n    var worldTransform = this.getWorldTransform(height, width);\n    // Thanks to this StackOverflow answer on how to chain streams:\n    // https://stackoverflow.com/a/31647135\n    return {\n      stream: function (s) {\n        return projection.stream(worldTransform.stream(s));\n      }\n    };\n  }\n};\n","/**\n * A rendering context that can be used with d3-geo to convert geoJSON\n * into data that can be used by THREE.js.  To do this, it implements\n * the d3-geo required subset of the CanvasRenderingContext2D API.\n *\n * @param shapePath a THREE.ShapePath that will hold the rendered data\n * @constructor\n * @see https://github.com/d3/d3-geo#path_context\n */\nfunction ThreeJSRenderContext (shapePath) {\n  this.shapePath = shapePath;\n}\n\nThreeJSRenderContext.prototype.beginPath = function beginPath () {\n  // no-op\n};\n\nThreeJSRenderContext.prototype.moveTo = function moveTo (x, y) {\n  this.shapePath.moveTo(x, y);\n};\n\nThreeJSRenderContext.prototype.lineTo = function lineTo (x, y) {\n  this.shapePath.lineTo(x, y);\n};\n\nThreeJSRenderContext.prototype.arc = function arc (x, y, radius, startAngle, endAngle) {\n  this.shapePath.currentPath.arc(x, y, radius, startAngle, endAngle);\n};\n\nThreeJSRenderContext.prototype.closePath = function closePath () {\n  this.shapePath.currentPath.closePath();\n};\n\n/**\n * Exports the data stored in this context into an array of Shapes.\n * By default solid shapes are defined clockwise (CW) and holes are\n * defined counterclockwise (CCW). If isCCW is set to true, then those\n * are flipped. If the parameter noHoles is set to true then all paths\n * are set as solid shapes and isCCW is ignored.\n *\n * The isCCW flag is important when rendering topoJSON vs. geoJSON.  For\n * features smaller than a hemisphere, topoJSON uses clockwise shapes while\n * geoJSON uses counterclockwise shapes.  For features larger than a\n * hemisphere (such as oceans), the opposite is true.\n *\n * @param isCCW changes how solids and holes are generated\n * @param noHoles whether or not to generate holes\n * @return {Array} of THREE.Shape objects\n * @see https://github.com/d3/d3-geo for a summary of winding order convention\n */\nThreeJSRenderContext.prototype.toShapes = function toShapes (isCCW, noHoles) {\n  return this.shapePath.toShapes(isCCW, noHoles);\n};\n\n/**\n * Exports the data stored in this context into an array of vertices.  Each\n * vertex takes up three positions in the array so it is optimized to populate\n * a THREE.BufferGeometry.  The z parameter can be used to control the position of\n * the vertices on the z-axis.\n *\n * @param z optional parameter to set as the z-value for all the vertices produced; 0 will be used if no z is specified\n * @return {Array} of numbers\n */\nThreeJSRenderContext.prototype.toVertices = function toVertices (z) {\n  var verticesForShape = [];\n  var zVal = z || 0;\n  this.shapePath.subPaths.forEach(function (path) {\n    path.curves.forEach(function (curve) {\n      if (curve.isLineCurve) {\n        verticesForShape.push(curve.v1.x);\n        verticesForShape.push(curve.v1.y);\n        verticesForShape.push(zVal);\n        verticesForShape.push(curve.v2.x);\n        verticesForShape.push(curve.v2.y);\n        verticesForShape.push(zVal);\n      } else {\n        curve.getPoints().forEach(function (point) {\n          verticesForShape.push(point.x);\n          verticesForShape.push(point.y);\n          verticesForShape.push(zVal);\n        });\n      }\n    });\n  });\n  return verticesForShape;\n};\n\nmodule.exports = {\n  ThreeJSRenderContext: ThreeJSRenderContext\n};\n","var d3 = require('d3-geo');\nvar ThreeJSRenderContext = require('./renderContext').ThreeJSRenderContext;\n\nvar THREE = AFRAME.THREE;\n\n/**\n * Takes the input geoJson and uses the projection and D3 to draw it\n * into a ThreeJSRenderContext.\n *\n * @param geoJson the geoJson object to render\n * @param projection the projection to use for rendering\n * @return ThreeJSRenderContext\n */\nfunction renderToContext (geoJson, projection) {\n  var shapePath = new THREE.ShapePath();\n  var mapRenderContext = new ThreeJSRenderContext(shapePath);\n  var mapPath = d3.geoPath(projection, mapRenderContext);\n  mapPath(geoJson);\n  return mapRenderContext;\n}\n\n/**\n * Takes the input geoJson and renders it as an Object3D.\n *\n * @param geoJson the geoJson object to render\n * @param projection the projection to use for rendering\n * @param isCCW true if shapes are defined counter-clockwise and holes defined clockwise; false for the reverse\n * @param material the THREE.Material to use in the resulting Object3D\n * @return THREE.Object3D\n */\nfunction render (geoJson, projection, isCCW, material) {\n  var mapRenderContext = this.renderToContext(geoJson, projection);\n  var geometry = this.createGeometry(mapRenderContext, isCCW);\n  return this.createMesh(geometry, material);\n}\n\nmodule.exports = {\n  line: {\n    render: render,\n    renderToContext: renderToContext,\n    createGeometry: function createGeometry (mapRenderContext) {\n      var lineGeometry = new THREE.BufferGeometry();\n      var vertices = mapRenderContext.toVertices();\n      lineGeometry.addAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n      return lineGeometry;\n    },\n    createMesh: function createMesh (geometry, material) {\n      return new THREE.LineSegments(geometry, material);\n    }\n  },\n\n  shape: {\n    render: render,\n    renderToContext: renderToContext,\n    createGeometry: function createGeometry (mapRenderContext, isCCW) {\n      const shapes = mapRenderContext.toShapes(isCCW);\n      return new THREE.ShapeBufferGeometry(shapes);\n    },\n    createMesh: function createMesh (geometry, material) {\n      return new THREE.Mesh(geometry, material);\n    }\n  },\n\n  extrude: {\n    render: render,\n    renderToContext: renderToContext,\n    createGeometry: function createGeometry (mapRenderContext, isCCW) {\n      const extrudeSettings = {\n        amount: 1,\n        bevelEnabled: false\n      };\n      const extShapes = mapRenderContext.toShapes(isCCW);\n      return new THREE.ExtrudeBufferGeometry(extShapes, extrudeSettings);\n    },\n    createMesh: function createMesh (geometry, material) {\n      return new THREE.Mesh(geometry, material);\n    }\n  }\n};\n","var THREE = AFRAME.THREE;\n// from https://stackoverflow.com/questions/39905663/aframe-how-to-put-three-linebasicmaterial-in-aframe\nAFRAME.registerShader('linebasic', {\n  schema: {\n    blending: {default: THREE.NormalBlending},\n    color: {type: 'color', default: '#000', is: 'uniform'},\n    depthTest: {default: true},\n    depthFunc: {default: THREE.LessEqualDepth},\n    depthWrite: {default: true},\n    fog: {default: false},\n    linewidth: {default: 1},\n    linecap: {default: 'round'},\n    linejoin: {default: 'round'},\n    opacity: {default: 1},\n    side: {default: THREE.FrontSide},\n    transparent: {default: false},\n    vertexColors: {default: THREE.NoColors},\n    visible: {default: true}\n  },\n  init: function (data) {\n    data = AFRAME.utils.extend({}, data);\n    delete data.flatShading;\n    delete data.shader;\n    delete data.npot;\n    delete data.repeat;\n    delete data.offset;\n    this.material = new THREE.LineBasicMaterial(data);\n    this.update(data);\n  },\n  update: function (data) {\n    this.material.clone(data);\n  }\n});\n","/* global AFRAME */\n\nrequire('./src/lineBasicMaterial');\nvar renderers = require('./src/renderers');\nvar projectionLib = require('./src/projection');\nvar topojson = require('topojson-client');\n\nif (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.');\n}\nvar THREE = AFRAME.THREE;\nvar GEO_SRC_LOADED_EVENT = 'geo-src-loaded';\n\n/**\n * Geo Projection component for A-Frame.\n */\nAFRAME.registerComponent('geo-projection', {\n  dependencies: ['material'],\n\n  schema: {\n    src: {\n      type: 'asset'\n    },\n    srcType: {\n      oneOf: ['geojson', 'topojson'],\n      default: 'geojson'\n    },\n    topologyObject: {\n      type: 'string'\n    },\n    isCCW: {\n      type: 'boolean',\n      default: false\n    },\n    projection: {\n      default: 'geoIdentity'\n    },\n    meshType: {\n      oneOf: ['line', 'shape', 'extrude'],\n      default: 'line'\n    },\n    width: {default: 1},\n    height: {default: 1}\n  },\n\n  /**\n   * Called once when component is attached. Generally for initial setup.\n   */\n  init: function () {\n    this.loader = new THREE.FileLoader();\n  },\n\n  /**\n   * Called when component is attached and when component data changes.\n   * Generally modifies the entity based on the data.\n   */\n  update: function (oldData) {\n    this.renderer = renderers[this.data.meshType];\n    if (!this.data.src) {\n      return;\n    }\n    var differences = AFRAME.utils.diff(oldData, this.data);\n    if (Object.keys(differences).length > 0) {\n      this.loader.load(this.data.src, this.onSrcLoaded.bind(this));\n    }\n  },\n\n  onSrcLoaded: function (text) {\n    this.geoJson = this.parseGeoJson(text);\n    this.projection = projectionLib.getFittedProjection(this.data.projection, this.geoJson, this.data.height, this.data.width);\n    this.render();\n    this.el.emit(GEO_SRC_LOADED_EVENT, {\n      geoProjectionComponent: this\n    });\n  },\n\n  parseGeoJson: function (text) {\n    var json = JSON.parse(text);\n\n    var geoJson = json;\n    if (this.data.srcType === 'topojson') {\n      var topologyObjectName = this.data.topologyObject;\n      if (!this.data.topologyObject) {\n        topologyObjectName = Object.keys(json.objects)[0];\n      }\n      geoJson = topojson.feature(json, json.objects[topologyObjectName]);\n    }\n    return geoJson;\n  },\n\n  render: function () {\n    var material = this.el.components.material.material;\n    var object3D = this.renderer.render(this.geoJson, this.projection, this.data.isCCW, material);\n    this.el.setObject3D('map', object3D);\n  },\n\n  /**\n   * Called when a component is removed (e.g., via removeAttribute).\n   * Generally undoes all modifications to the entity.\n   */\n  remove: function () {\n    var obj = this.el.getObject3D('map');\n    if (obj) {\n      this.el.removeObject3D('map');\n    }\n  }\n});\n\nmodule.exports = {\n  GEO_SRC_LOADED_EVENT: GEO_SRC_LOADED_EVENT\n};\n"],"sourceRoot":""}